<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="implementation_01orig_8cpp" kind="file" language="C++">
    <compoundname>implementation orig.cpp</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">iomanip</includes>
    <includes local="no">unordered_map</includes>
    <includes local="no">unordered_set</includes>
    <includes local="no">array</includes>
    <includes local="no">vector</includes>
    <includes local="no">utility</includes>
    <includes local="no">queue</includes>
    <includes local="no">tuple</includes>
    <includes local="no">algorithm</includes>
    <incdepgraph>
      <node id="800">
        <label>BrainHarmonics/implementation orig.cpp</label>
        <link refid="implementation_01orig_8cpp"/>
        <childnode refid="801" relation="include">
        </childnode>
        <childnode refid="802" relation="include">
        </childnode>
        <childnode refid="803" relation="include">
        </childnode>
        <childnode refid="804" relation="include">
        </childnode>
        <childnode refid="805" relation="include">
        </childnode>
        <childnode refid="806" relation="include">
        </childnode>
        <childnode refid="807" relation="include">
        </childnode>
        <childnode refid="808" relation="include">
        </childnode>
        <childnode refid="809" relation="include">
        </childnode>
        <childnode refid="810" relation="include">
        </childnode>
      </node>
      <node id="802">
        <label>iomanip</label>
      </node>
      <node id="808">
        <label>queue</label>
      </node>
      <node id="804">
        <label>unordered_set</label>
      </node>
      <node id="809">
        <label>tuple</label>
      </node>
      <node id="806">
        <label>vector</label>
      </node>
      <node id="807">
        <label>utility</label>
      </node>
      <node id="805">
        <label>array</label>
      </node>
      <node id="801">
        <label>iostream</label>
      </node>
      <node id="803">
        <label>unordered_map</label>
      </node>
      <node id="810">
        <label>algorithm</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_graph" prot="public">Graph</innerclass>
    <innerclass refid="structstd_1_1hash_3_01tuple_3_01int_00_01int_01_4_01_4" prot="public">std::hash&lt; tuple&lt; int, int &gt; &gt;</innerclass>
    <innerclass refid="struct_square_grid" prot="public">SquareGrid</innerclass>
    <innerclass refid="struct_grid_with_weights" prot="public">GridWithWeights</innerclass>
    <innerclass refid="struct_priority_queue" prot="public">PriorityQueue</innerclass>
    <innernamespace refid="namespacestd">std</innernamespace>
      <sectiondef kind="var">
      <memberdef kind="variable" id="implementation_01orig_8cpp_1a6bf00a88b62b9e264eeaac21edbd181b" prot="public" static="no" mutable="no">
        <type><ref refid="struct_graph" kindref="compound">Graph</ref>&lt; char &gt;</type>
        <definition>Graph&lt;char&gt; example_graph</definition>
        <argsstring></argsstring>
        <name>example_graph</name>
        <initializer>{{
    {&apos;A&apos;, {&apos;B&apos;}},
    {&apos;B&apos;, {&apos;A&apos;, &apos;C&apos;, &apos;D&apos;}},
    {&apos;C&apos;, {&apos;A&apos;}},
    {&apos;D&apos;, {&apos;E&apos;, &apos;A&apos;}},
    {&apos;E&apos;, {&apos;B&apos;}}
  }}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/implementation orig.cpp" line="43" column="1" bodyfile="BrainHarmonics/implementation orig.cpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="implementation_01orig_8cpp_1a14bbb7e7d9701d4b4f1839f5f7608fa5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::basic_iostream&lt; char &gt;::basic_ostream &amp;</type>
        <definition>std::basic_iostream&lt;char&gt;::basic_ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::basic_iostream&lt; char &gt;::basic_ostream &amp;out, tuple&lt; int, int &gt; loc)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::basic_iostream&lt; char &gt;::basic_ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>tuple&lt; int, int &gt;</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/implementation orig.cpp" line="65" column="1" bodyfile="BrainHarmonics/implementation orig.cpp" bodystart="65" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="implementation_01orig_8cpp_1a788438e9f72bf881df6ae25ba857a9f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="struct_graph" kindref="compound">Graph</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void draw_grid</definition>
        <argsstring>(const Graph &amp;graph, int field_width, unordered_map&lt; typename Graph::Location, int &gt; *distances=nullptr, unordered_map&lt; typename Graph::Location, typename Graph::Location &gt; *point_to=nullptr, vector&lt; typename Graph::Location &gt; *path=nullptr)</argsstring>
        <name>draw_grid</name>
        <param>
          <type>const <ref refid="struct_graph" kindref="compound">Graph</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>int</type>
          <declname>field_width</declname>
        </param>
        <param>
          <type>unordered_map&lt; typename <ref refid="struct_graph_1aea7d42bb67163fe692353674435a1426" kindref="member">Graph::Location</ref>, int &gt; *</type>
          <declname>distances</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>unordered_map&lt; typename <ref refid="struct_graph_1aea7d42bb67163fe692353674435a1426" kindref="member">Graph::Location</ref>, typename <ref refid="struct_graph_1aea7d42bb67163fe692353674435a1426" kindref="member">Graph::Location</ref> &gt; *</type>
          <declname>point_to</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>vector&lt; typename <ref refid="struct_graph_1aea7d42bb67163fe692353674435a1426" kindref="member">Graph::Location</ref> &gt; *</type>
          <declname>path</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/implementation orig.cpp" line="73" column="1" bodyfile="BrainHarmonics/implementation orig.cpp" bodystart="73" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="implementation_01orig_8cpp_1accbfe5247dbef4f79673a2ff5dd05045" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void add_rect</definition>
        <argsstring>(SquareGrid &amp;grid, int x1, int y1, int x2, int y2)</argsstring>
        <name>add_rect</name>
        <param>
          <type><ref refid="struct_square_grid" kindref="compound">SquareGrid</ref> &amp;</type>
          <declname>grid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/implementation orig.cpp" line="148" column="1" bodyfile="BrainHarmonics/implementation orig.cpp" bodystart="148" bodyend="154"/>
        <references refid="struct_square_grid_1a1bc7e32bd195e42fd9685310d7ee65c5" compoundref="implementation_01orig_8cpp" startline="109">SquareGrid::walls</references>
        <referencedby refid="implementation_01orig_8cpp_1a3e35f7b5b37cf00a0f0a2c6221c3f05e" compoundref="implementation_01orig_8cpp" startline="156" endline="163">make_diagram1</referencedby>
        <referencedby refid="implementation_01orig_8cpp_1a78b3dfdcdf5ef633f554ecca192e5328" compoundref="implementation_01orig_8cpp" startline="173" endline="187">make_diagram4</referencedby>
      </memberdef>
      <memberdef kind="function" id="implementation_01orig_8cpp_1a3e35f7b5b37cf00a0f0a2c6221c3f05e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_square_grid" kindref="compound">SquareGrid</ref></type>
        <definition>SquareGrid make_diagram1</definition>
        <argsstring>()</argsstring>
        <name>make_diagram1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/implementation orig.cpp" line="156" column="1" bodyfile="BrainHarmonics/implementation orig.cpp" bodystart="156" bodyend="163"/>
        <references refid="implementation_01orig_8cpp_1accbfe5247dbef4f79673a2ff5dd05045" compoundref="implementation_01orig_8cpp" startline="148" endline="154">add_rect</references>
      </memberdef>
      <memberdef kind="function" id="implementation_01orig_8cpp_1a78b3dfdcdf5ef633f554ecca192e5328" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_grid_with_weights" kindref="compound">GridWithWeights</ref></type>
        <definition>GridWithWeights make_diagram4</definition>
        <argsstring>()</argsstring>
        <name>make_diagram4</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/implementation orig.cpp" line="173" column="1" bodyfile="BrainHarmonics/implementation orig.cpp" bodystart="173" bodyend="187"/>
        <references refid="implementation_01orig_8cpp_1accbfe5247dbef4f79673a2ff5dd05045" compoundref="implementation_01orig_8cpp" startline="148" endline="154">add_rect</references>
        <references refid="struct_grid_with_weights_1a03137c824b8c63cdeed414ef40f5b504" compoundref="implementation_01orig_8cpp" startline="166">GridWithWeights::forests</references>
      </memberdef>
      <memberdef kind="function" id="implementation_01orig_8cpp_1ae5dda031f20466b1a419ca983a3dc474" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="struct_graph" kindref="compound">Graph</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void dijkstra_search</definition>
        <argsstring>(Graph graph, typename Graph::Location start, typename Graph::Location goal, unordered_map&lt; typename Graph::Location, typename Graph::Location &gt; &amp;came_from, unordered_map&lt; typename Graph::Location, int &gt; &amp;cost_so_far)</argsstring>
        <name>dijkstra_search</name>
        <param>
          <type><ref refid="struct_graph" kindref="compound">Graph</ref></type>
          <declname>graph</declname>
        </param>
        <param>
          <type>typename <ref refid="struct_graph_1aea7d42bb67163fe692353674435a1426" kindref="member">Graph::Location</ref></type>
          <declname>start</declname>
        </param>
        <param>
          <type>typename <ref refid="struct_graph_1aea7d42bb67163fe692353674435a1426" kindref="member">Graph::Location</ref></type>
          <declname>goal</declname>
        </param>
        <param>
          <type>unordered_map&lt; typename <ref refid="struct_graph_1aea7d42bb67163fe692353674435a1426" kindref="member">Graph::Location</ref>, typename <ref refid="struct_graph_1aea7d42bb67163fe692353674435a1426" kindref="member">Graph::Location</ref> &gt; &amp;</type>
          <declname>came_from</declname>
        </param>
        <param>
          <type>unordered_map&lt; typename <ref refid="struct_graph_1aea7d42bb67163fe692353674435a1426" kindref="member">Graph::Location</ref>, int &gt; &amp;</type>
          <declname>cost_so_far</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/implementation orig.cpp" line="209" column="1" bodyfile="BrainHarmonics/implementation orig.cpp" bodystart="210" bodyend="239"/>
        <references refid="struct_priority_queue_1a9361c94664b98a15a91a595d65c9846c" compoundref="implementation_01orig_8cpp" startline="197" endline="199">PriorityQueue&lt; T, Number &gt;::put</references>
        <references refid="struct_priority_queue_1a422e38d0c3b8398dc6e4867bb4ceec41" compoundref="implementation_01orig_8cpp" startline="195" endline="195">PriorityQueue&lt; T, Number &gt;::empty</references>
        <references refid="struct_priority_queue_1ab211c9583fda5c1a6352021444af5f0e" compoundref="implementation_01orig_8cpp" startline="201" endline="205">PriorityQueue&lt; T, Number &gt;::get</references>
        <references refid="struct_graph_1a8389c308ee673e63d574e0a30191662e" compoundref="implementation_01orig_8cpp" startline="38" endline="40">Graph&lt; L &gt;::neighbors</references>
        <referencedby refid="struct_priority_queue_1ab211c9583fda5c1a6352021444af5f0e" compoundref="implementation_01orig_8cpp" startline="201" endline="205">PriorityQueue&lt; T, Number &gt;::get</referencedby>
      </memberdef>
      <memberdef kind="function" id="implementation_01orig_8cpp_1af7ae297639a56db32da98fa801049faa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Location</type>
          </param>
        </templateparamlist>
        <type>vector&lt; Location &gt;</type>
        <definition>vector&lt;Location&gt; reconstruct_path</definition>
        <argsstring>(Location start, Location goal, unordered_map&lt; Location, Location &gt; &amp;came_from)</argsstring>
        <name>reconstruct_path</name>
        <param>
          <type>Location</type>
          <declname>start</declname>
        </param>
        <param>
          <type>Location</type>
          <declname>goal</declname>
        </param>
        <param>
          <type>unordered_map&lt; Location, Location &gt; &amp;</type>
          <declname>came_from</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/implementation orig.cpp" line="243" column="1" bodyfile="BrainHarmonics/implementation orig.cpp" bodystart="243" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="implementation_01orig_8cpp_1a394ba0076283a1523c29842e95aa897d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int heuristic</definition>
        <argsstring>(SquareGrid::Location a, SquareGrid::Location b)</argsstring>
        <name>heuristic</name>
        <param>
          <type><ref refid="struct_square_grid_1a2c9a2cbd3912aa48ac97289abc3f1c0f" kindref="member">SquareGrid::Location</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="struct_square_grid_1a2c9a2cbd3912aa48ac97289abc3f1c0f" kindref="member">SquareGrid::Location</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/implementation orig.cpp" line="258" column="1" bodyfile="BrainHarmonics/implementation orig.cpp" bodystart="258" bodyend="263"/>
        <references refid="implementation_01orig_8cpp_1a9b1566d7e8a1017f075720664601abb0" compoundref="implementation_01orig_8cpp" startline="267" endline="297">a_star_search</references>
        <referencedby refid="implementation_01orig_8cpp_1a9b1566d7e8a1017f075720664601abb0" compoundref="implementation_01orig_8cpp" startline="267" endline="297">a_star_search</referencedby>
      </memberdef>
      <memberdef kind="function" id="implementation_01orig_8cpp_1a9b1566d7e8a1017f075720664601abb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="struct_graph" kindref="compound">Graph</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void a_star_search</definition>
        <argsstring>(Graph graph, typename Graph::Location start, typename Graph::Location goal, unordered_map&lt; typename Graph::Location, typename Graph::Location &gt; &amp;came_from, unordered_map&lt; typename Graph::Location, int &gt; &amp;cost_so_far)</argsstring>
        <name>a_star_search</name>
        <param>
          <type><ref refid="struct_graph" kindref="compound">Graph</ref></type>
          <declname>graph</declname>
        </param>
        <param>
          <type>typename <ref refid="struct_graph_1aea7d42bb67163fe692353674435a1426" kindref="member">Graph::Location</ref></type>
          <declname>start</declname>
        </param>
        <param>
          <type>typename <ref refid="struct_graph_1aea7d42bb67163fe692353674435a1426" kindref="member">Graph::Location</ref></type>
          <declname>goal</declname>
        </param>
        <param>
          <type>unordered_map&lt; typename <ref refid="struct_graph_1aea7d42bb67163fe692353674435a1426" kindref="member">Graph::Location</ref>, typename <ref refid="struct_graph_1aea7d42bb67163fe692353674435a1426" kindref="member">Graph::Location</ref> &gt; &amp;</type>
          <declname>came_from</declname>
        </param>
        <param>
          <type>unordered_map&lt; typename <ref refid="struct_graph_1aea7d42bb67163fe692353674435a1426" kindref="member">Graph::Location</ref>, int &gt; &amp;</type>
          <declname>cost_so_far</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/implementation orig.cpp" line="266" column="1" bodyfile="BrainHarmonics/implementation orig.cpp" bodystart="267" bodyend="297"/>
        <references refid="struct_priority_queue_1a9361c94664b98a15a91a595d65c9846c" compoundref="implementation_01orig_8cpp" startline="197" endline="199">PriorityQueue&lt; T, Number &gt;::put</references>
        <references refid="struct_priority_queue_1a422e38d0c3b8398dc6e4867bb4ceec41" compoundref="implementation_01orig_8cpp" startline="195" endline="195">PriorityQueue&lt; T, Number &gt;::empty</references>
        <references refid="struct_priority_queue_1ab211c9583fda5c1a6352021444af5f0e" compoundref="implementation_01orig_8cpp" startline="201" endline="205">PriorityQueue&lt; T, Number &gt;::get</references>
        <references refid="struct_graph_1a8389c308ee673e63d574e0a30191662e" compoundref="implementation_01orig_8cpp" startline="38" endline="40">Graph&lt; L &gt;::neighbors</references>
        <references refid="implementation_01orig_8cpp_1a394ba0076283a1523c29842e95aa897d" compoundref="implementation_01orig_8cpp" startline="258" endline="263">heuristic</references>
        <referencedby refid="implementation_01orig_8cpp_1a394ba0076283a1523c29842e95aa897d" compoundref="implementation_01orig_8cpp" startline="258" endline="263">heuristic</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>Sample<sp/>code<sp/>from<sp/>http://www.redblobgames.com/pathfinding/</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>Copyright<sp/>2014<sp/>Red<sp/>Blob<sp/>Games<sp/>&lt;redblobgames@gmail.com&gt;</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>Feel<sp/>free<sp/>to<sp/>use<sp/>this<sp/>code<sp/>in<sp/>your<sp/>own<sp/>projects,<sp/>including<sp/>commercial<sp/>projects</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>License:<sp/>Apache<sp/>v2.0<sp/>&lt;http://www.apache.org/licenses/LICENSE-2.0.html&gt;</highlight></codeline>
<codeline lineno="8"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;array&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;queue&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tuple&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::unordered_map;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::unordered_set;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::array;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::vector;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::queue;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::priority_queue;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::pair;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::tuple;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::tie;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::string;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L&gt;</highlight></codeline>
<codeline lineno="33" refid="struct_graph" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_graph" kindref="compound">Graph</ref><sp/>{</highlight></codeline>
<codeline lineno="34" refid="struct_graph_1aea7d42bb67163fe692353674435a1426" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>L<sp/><ref refid="struct_graph_1aea7d42bb67163fe692353674435a1426" kindref="member">Location</ref>;</highlight></codeline>
<codeline lineno="35" refid="struct_graph_1af43d6412d7a6034eaeacde8ca1c1d984" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>vector&lt;Location&gt;::iterator<sp/><ref refid="struct_graph_1af43d6412d7a6034eaeacde8ca1c1d984" kindref="member">iterator</ref>;</highlight></codeline>
<codeline lineno="36" refid="struct_graph_1a8b01818e086835dc5d24ec4082afeef0" refkind="member"><highlight class="normal"><sp/><sp/>unordered_map&lt;Location,<sp/>vector&lt;Location&gt;<sp/>&gt;<sp/><ref refid="struct_graph_1a8b01818e086835dc5d24ec4082afeef0" kindref="member">edges</ref>;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="struct_graph_1a8389c308ee673e63d574e0a30191662e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;Location&gt;<sp/><sp/><ref refid="struct_graph_1a8389c308ee673e63d574e0a30191662e" kindref="member">neighbors</ref>(Location<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>edges[id];</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal">};</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="implementation_01orig_8cpp_1a6bf00a88b62b9e264eeaac21edbd181b" refkind="member"><highlight class="normal"><ref refid="struct_graph" kindref="compound">Graph&lt;char&gt;</ref><sp/><ref refid="implementation_01orig_8cpp_1a6bf00a88b62b9e264eeaac21edbd181b" kindref="member">example_graph</ref><sp/>{{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">,<sp/>{</highlight><highlight class="charliteral">&apos;B&apos;</highlight><highlight class="normal">}},</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="charliteral">&apos;B&apos;</highlight><highlight class="normal">,<sp/>{</highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;C&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;D&apos;</highlight><highlight class="normal">}},</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="charliteral">&apos;C&apos;</highlight><highlight class="normal">,<sp/>{</highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">}},</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="charliteral">&apos;D&apos;</highlight><highlight class="normal">,<sp/>{</highlight><highlight class="charliteral">&apos;E&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">}},</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="charliteral">&apos;E&apos;</highlight><highlight class="normal">,<sp/>{</highlight><highlight class="charliteral">&apos;B&apos;</highlight><highlight class="normal">}}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>}};</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helpers<sp/>for<sp/>SquareGrid::Location</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="namespacestd" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestd" kindref="compound">std</ref><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/>I<sp/>know,<sp/>this<sp/>is<sp/>technically<sp/>not<sp/>allowed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="56" refid="structstd_1_1hash_3_01tuple_3_01int_00_01int_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">hash&lt;tuple&lt;int,int&gt;<sp/>&gt;<sp/>{</highlight></codeline>
<codeline lineno="57" refid="structstd_1_1hash_3_01tuple_3_01int_00_01int_01_4_01_4_1af46854ec2c5aa6cd6d1cd164374bd54f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structstd_1_1hash_3_01tuple_3_01int_00_01int_01_4_01_4_1af46854ec2c5aa6cd6d1cd164374bd54f" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>tuple&lt;int,int&gt;&amp;<sp/>location)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/>y;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>tie<sp/>(x,<sp/>y)<sp/>=<sp/>location;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>*<sp/>1812433253<sp/>+<sp/>y;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal">};</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="implementation_01orig_8cpp_1a14bbb7e7d9701d4b4f1839f5f7608fa5" refkind="member"><highlight class="normal">std::basic_iostream&lt;char&gt;::basic_ostream&amp;<sp/>operator&lt;&lt;(std::basic_iostream&lt;char&gt;::basic_ostream&amp;<sp/>out,<sp/>tuple&lt;int,int&gt;<sp/>loc)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/>y;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>tie<sp/>(x,<sp/>y)<sp/>=<sp/>loc;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>x<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>y<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Graph&gt;</highlight></codeline>
<codeline lineno="73" refid="implementation_01orig_8cpp_1a788438e9f72bf881df6ae25ba857a9f6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="implementation_01orig_8cpp_1a788438e9f72bf881df6ae25ba857a9f6" kindref="member">draw_grid</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_graph" kindref="compound">Graph</ref>&amp;<sp/>graph,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>field_width,<sp/></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unordered_map&lt;typename<sp/>Graph::Location,<sp/>int&gt;*<sp/>distances=</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unordered_map&lt;typename<sp/>Graph::Location,<sp/>typename<sp/>Graph::Location&gt;*<sp/>point_to=</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;typename<sp/>Graph::Location&gt;*<sp/>path=</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>0;<sp/>y<sp/>!=<sp/>graph.height;<sp/>++y)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;<sp/>x<sp/>!=<sp/>graph.width;<sp/>++x)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="struct_graph_1aea7d42bb67163fe692353674435a1426" kindref="member">Graph::Location</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>{x,<sp/>y};</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::left<sp/>&lt;&lt;<sp/>std::setw(field_width);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(graph.walls.count(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>string(field_width,<sp/></highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(point_to<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>point_to-&gt;count(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x2,<sp/>y2;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tie<sp/>(x2,<sp/>y2)<sp/>=<sp/>(*point_to)[id];</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>how<sp/>do<sp/>I<sp/>get<sp/>setw<sp/>to<sp/>work<sp/>with<sp/>utf8?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x2<sp/>==<sp/>x<sp/>+<sp/>1)<sp/>{<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\u2192<sp/>&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x2<sp/>==<sp/>x<sp/>-<sp/>1)<sp/>{<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\u2190<sp/>&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y2<sp/>==<sp/>y<sp/>+<sp/>1)<sp/>{<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\u2193<sp/>&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y2<sp/>==<sp/>y<sp/>-<sp/>1)<sp/>{<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\u2191<sp/>&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;*<sp/>&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(distances<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>distances-&gt;count(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(*distances)[id];</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(path<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>find(path-&gt;begin(),<sp/>path-&gt;end(),<sp/>id)<sp/>!=<sp/>path-&gt;end())<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="struct_square_grid" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_square_grid" kindref="compound">SquareGrid</ref><sp/>{</highlight></codeline>
<codeline lineno="105" refid="struct_square_grid_1a2c9a2cbd3912aa48ac97289abc3f1c0f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>tuple&lt;int,int&gt;<sp/><ref refid="struct_square_grid_1a2c9a2cbd3912aa48ac97289abc3f1c0f" kindref="member">Location</ref>;</highlight></codeline>
<codeline lineno="106" refid="struct_square_grid_1aac91cba6573640c545485ed054089c87" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>array&lt;Location,<sp/>4&gt;<sp/><ref refid="struct_square_grid_1aac91cba6573640c545485ed054089c87" kindref="member">DIRS</ref>;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="struct_square_grid_1af5476cf49f0bb03d1e940adbc6e5febf" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_square_grid_1af5476cf49f0bb03d1e940adbc6e5febf" kindref="member">width</ref>,<sp/>height;</highlight></codeline>
<codeline lineno="109" refid="struct_square_grid_1a1bc7e32bd195e42fd9685310d7ee65c5" refkind="member"><highlight class="normal"><sp/><sp/>unordered_set&lt;Location&gt;<sp/><ref refid="struct_square_grid_1a1bc7e32bd195e42fd9685310d7ee65c5" kindref="member">walls</ref>;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="struct_square_grid_1ae5debd1459b89aba9497f270f6d76d7b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="struct_square_grid_1ae5debd1459b89aba9497f270f6d76d7b" kindref="member">SquareGrid</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width_,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height_)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>:<sp/>width(width_),<sp/>height(height_)<sp/>{}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="struct_square_grid_1a84bbaa9dad618228a2d6d3196254b86b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_square_grid_1a84bbaa9dad618228a2d6d3196254b86b" kindref="member">in_bounds</ref>(Location<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/>y;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>tie<sp/>(x,<sp/>y)<sp/>=<sp/>id;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0<sp/>&lt;=<sp/>x<sp/>&amp;&amp;<sp/>x<sp/>&lt;<sp/>width<sp/>&amp;&amp;<sp/>0<sp/>&lt;=<sp/>y<sp/>&amp;&amp;<sp/>y<sp/>&lt;<sp/>height;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="struct_square_grid_1a3f638b46510dd880823b1acac75c7b96" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_square_grid_1a3f638b46510dd880823b1acac75c7b96" kindref="member">passable</ref>(Location<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!walls.count(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="struct_square_grid_1a106d76702d8c4acb03883c477db28e3a" refkind="member"><highlight class="normal"><sp/><sp/>vector&lt;Location&gt;<sp/><ref refid="struct_square_grid_1a106d76702d8c4acb03883c477db28e3a" kindref="member">neighbors</ref>(Location<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/>y,<sp/>dx,<sp/>dy;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>tie<sp/>(x,<sp/>y)<sp/>=<sp/>id;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;Location&gt;<sp/>results;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dir<sp/>:<sp/>DIRS)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tie<sp/>(dx,<sp/>dy)<sp/>=<sp/>dir;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Location<sp/>next(x<sp/>+<sp/>dx,<sp/>y<sp/>+<sp/>dy);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(in_bounds(next)<sp/>&amp;&amp;<sp/>passable(next))<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>results.push_back(next);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((x<sp/>+<sp/>y)<sp/>%<sp/>2<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>aesthetic<sp/>improvement<sp/>on<sp/>square<sp/>grids</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::reverse(results.begin(),<sp/>results.end());</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>results;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal">};</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal">array&lt;SquareGrid::Location,<sp/>4&gt;<sp/><ref refid="struct_square_grid_1aac91cba6573640c545485ed054089c87" kindref="member">SquareGrid::DIRS</ref><sp/>{<ref refid="struct_square_grid_1a2c9a2cbd3912aa48ac97289abc3f1c0f" kindref="member">Location</ref>{1,<sp/>0},<sp/><ref refid="struct_square_grid_1a2c9a2cbd3912aa48ac97289abc3f1c0f" kindref="member">Location</ref>{0,<sp/>-1},<sp/><ref refid="struct_square_grid_1a2c9a2cbd3912aa48ac97289abc3f1c0f" kindref="member">Location</ref>{-1,<sp/>0},<sp/><ref refid="struct_square_grid_1a2c9a2cbd3912aa48ac97289abc3f1c0f" kindref="member">Location</ref>{0,<sp/>1}};</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="implementation_01orig_8cpp_1accbfe5247dbef4f79673a2ff5dd05045" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="implementation_01orig_8cpp_1accbfe5247dbef4f79673a2ff5dd05045" kindref="member">add_rect</ref>(<ref refid="struct_square_grid" kindref="compound">SquareGrid</ref>&amp;<sp/>grid,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y2)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>x1;<sp/>x<sp/>&lt;<sp/>x2;<sp/>++x)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>y1;<sp/>y<sp/>&lt;<sp/>y2;<sp/>++y)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>grid.<ref refid="struct_square_grid_1a1bc7e32bd195e42fd9685310d7ee65c5" kindref="member">walls</ref>.insert(<ref refid="struct_square_grid_1a2c9a2cbd3912aa48ac97289abc3f1c0f" kindref="member">SquareGrid::Location</ref><sp/>{<sp/>x,<sp/>y<sp/>});</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="implementation_01orig_8cpp_1a3e35f7b5b37cf00a0f0a2c6221c3f05e" refkind="member"><highlight class="normal"><ref refid="struct_square_grid" kindref="compound">SquareGrid</ref><sp/><ref refid="implementation_01orig_8cpp_1a3e35f7b5b37cf00a0f0a2c6221c3f05e" kindref="member">make_diagram1</ref>()<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><ref refid="struct_square_grid" kindref="compound">SquareGrid</ref><sp/>grid(30,<sp/>15);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><ref refid="implementation_01orig_8cpp_1accbfe5247dbef4f79673a2ff5dd05045" kindref="member">add_rect</ref>(grid,<sp/>3,<sp/>3,<sp/>5,<sp/>12);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><ref refid="implementation_01orig_8cpp_1accbfe5247dbef4f79673a2ff5dd05045" kindref="member">add_rect</ref>(grid,<sp/>13,<sp/>4,<sp/>15,<sp/>15);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><ref refid="implementation_01orig_8cpp_1accbfe5247dbef4f79673a2ff5dd05045" kindref="member">add_rect</ref>(grid,<sp/>21,<sp/>0,<sp/>23,<sp/>7);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><ref refid="implementation_01orig_8cpp_1accbfe5247dbef4f79673a2ff5dd05045" kindref="member">add_rect</ref>(grid,<sp/>23,<sp/>5,<sp/>26,<sp/>7);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>grid;</highlight></codeline>
<codeline lineno="163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165" refid="struct_grid_with_weights" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_grid_with_weights" kindref="compound">GridWithWeights</ref>:<sp/><ref refid="struct_square_grid" kindref="compound">SquareGrid</ref><sp/>{</highlight></codeline>
<codeline lineno="166" refid="struct_grid_with_weights_1a03137c824b8c63cdeed414ef40f5b504" refkind="member"><highlight class="normal"><sp/><sp/>unordered_set&lt;Location&gt;<sp/><ref refid="struct_grid_with_weights_1a03137c824b8c63cdeed414ef40f5b504" kindref="member">forests</ref>;</highlight></codeline>
<codeline lineno="167" refid="struct_grid_with_weights_1ad9eb67bf93deb3409ecf658288bc78f6" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="struct_grid_with_weights_1ad9eb67bf93deb3409ecf658288bc78f6" kindref="member">GridWithWeights</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h):<sp/><ref refid="struct_square_grid" kindref="compound">SquareGrid</ref>(w,<sp/>h)<sp/>{}</highlight></codeline>
<codeline lineno="168" refid="struct_grid_with_weights_1a999c39922a9b507e4436b817592a7ff9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_grid_with_weights_1a999c39922a9b507e4436b817592a7ff9" kindref="member">cost</ref>(<ref refid="struct_square_grid_1a2c9a2cbd3912aa48ac97289abc3f1c0f" kindref="member">Location</ref><sp/>a,<sp/><ref refid="struct_square_grid_1a2c9a2cbd3912aa48ac97289abc3f1c0f" kindref="member">Location</ref><sp/>b)<sp/>{<sp/></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>forests.count(b)<sp/>?<sp/>5<sp/>:<sp/>1;<sp/></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal">};</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173" refid="implementation_01orig_8cpp_1a78b3dfdcdf5ef633f554ecca192e5328" refkind="member"><highlight class="normal"><ref refid="struct_grid_with_weights" kindref="compound">GridWithWeights</ref><sp/><ref refid="implementation_01orig_8cpp_1a78b3dfdcdf5ef633f554ecca192e5328" kindref="member">make_diagram4</ref>()<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><ref refid="struct_grid_with_weights" kindref="compound">GridWithWeights</ref><sp/>grid(10,<sp/>10);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><ref refid="implementation_01orig_8cpp_1accbfe5247dbef4f79673a2ff5dd05045" kindref="member">add_rect</ref>(grid,<sp/>1,<sp/>7,<sp/>4,<sp/>9);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="struct_square_grid_1a2c9a2cbd3912aa48ac97289abc3f1c0f" kindref="member">SquareGrid::Location</ref><sp/>L;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>grid.<ref refid="struct_grid_with_weights_1a03137c824b8c63cdeed414ef40f5b504" kindref="member">forests</ref><sp/>=<sp/>unordered_set&lt;SquareGrid::Location&gt;<sp/>{<sp/></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>L{3,<sp/>4},<sp/>L{3,<sp/>5},<sp/>L{4,<sp/>1},<sp/>L{4,<sp/>2},</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>L{4,<sp/>3},<sp/>L{4,<sp/>4},<sp/>L{4,<sp/>5},<sp/>L{4,<sp/>6},</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>L{4,<sp/>7},<sp/>L{4,<sp/>8},<sp/>L{5,<sp/>1},<sp/>L{5,<sp/>2},</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>L{5,<sp/>3},<sp/>L{5,<sp/>4},<sp/>L{5,<sp/>5},<sp/>L{5,<sp/>6},</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>L{5,<sp/>7},<sp/>L{5,<sp/>8},<sp/>L{6,<sp/>2},<sp/>L{6,<sp/>3},</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>L{6,<sp/>4},<sp/>L{6,<sp/>5},<sp/>L{6,<sp/>6},<sp/>L{6,<sp/>7},</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>L{7,<sp/>3},<sp/>L{7,<sp/>4},<sp/>L{7,<sp/>5}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>grid;</highlight></codeline>
<codeline lineno="187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Number=</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="190" refid="struct_priority_queue" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_priority_queue" kindref="compound">PriorityQueue</ref><sp/>{</highlight></codeline>
<codeline lineno="191" refid="struct_priority_queue_1ae86a19aae3f9a32a1d76dfdab34eb70b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>pair&lt;Number,<sp/>T&gt;<sp/><ref refid="struct_priority_queue_1ae86a19aae3f9a32a1d76dfdab34eb70b" kindref="member">PQElement</ref>;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>priority_queue&lt;PQElement,<sp/>vector&lt;PQElement&gt;,<sp/></highlight></codeline>
<codeline lineno="193" refid="struct_priority_queue_1a289cc383607c83fe77a0d571cb06bb01" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::greater&lt;PQElement&gt;&gt;<sp/><ref refid="struct_priority_queue_1a289cc383607c83fe77a0d571cb06bb01" kindref="member">elements</ref>;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195" refid="struct_priority_queue_1a422e38d0c3b8398dc6e4867bb4ceec41" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_priority_queue_1a422e38d0c3b8398dc6e4867bb4ceec41" kindref="member">empty</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>elements.empty();<sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197" refid="struct_priority_queue_1a9361c94664b98a15a91a595d65c9846c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_priority_queue_1a9361c94664b98a15a91a595d65c9846c" kindref="member">put</ref>(T<sp/>item,<sp/>Number<sp/>priority)<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>elements.emplace(priority,<sp/>item);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201" refid="struct_priority_queue_1ab211c9583fda5c1a6352021444af5f0e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">()<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>best_item<sp/>=<sp/>elements.top().second;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>elements.pop();</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>best_item;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal">};</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Graph&gt;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="implementation_01orig_8cpp_1ae5dda031f20466b1a419ca983a3dc474" kindref="member">dijkstra_search</ref></highlight></codeline>
<codeline lineno="210" refid="implementation_01orig_8cpp_1ae5dda031f20466b1a419ca983a3dc474" refkind="member"><highlight class="normal"><sp/><sp/>(<ref refid="struct_graph" kindref="compound">Graph</ref><sp/>graph,</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="struct_graph_1aea7d42bb67163fe692353674435a1426" kindref="member">Graph::Location</ref><sp/>start,</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="struct_graph_1aea7d42bb67163fe692353674435a1426" kindref="member">Graph::Location</ref><sp/>goal,</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/>unordered_map&lt;typename<sp/>Graph::Location,<sp/>typename<sp/>Graph::Location&gt;&amp;<sp/>came_from,</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/>unordered_map&lt;typename<sp/>Graph::Location,<sp/>int&gt;&amp;<sp/>cost_so_far)</highlight></codeline>
<codeline lineno="215"><highlight class="normal">{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="struct_graph_1aea7d42bb67163fe692353674435a1426" kindref="member">Graph::Location</ref><sp/><ref refid="struct_graph_1aea7d42bb67163fe692353674435a1426" kindref="member">Location</ref>;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><ref refid="struct_priority_queue" kindref="compound">PriorityQueue&lt;Location&gt;</ref><sp/>frontier;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>frontier.<ref refid="struct_priority_queue_1a9361c94664b98a15a91a595d65c9846c" kindref="member">put</ref>(start,<sp/>0);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>came_from[start]<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>cost_so_far[start]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!frontier.<ref refid="struct_priority_queue_1a422e38d0c3b8398dc6e4867bb4ceec41" kindref="member">empty</ref>())<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>current<sp/>=<sp/>frontier.<ref refid="struct_priority_queue_1ab211c9583fda5c1a6352021444af5f0e" kindref="member">get</ref>();</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current<sp/>==<sp/>goal)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>next<sp/>:<sp/>graph.<ref refid="struct_graph_1a8389c308ee673e63d574e0a30191662e" kindref="member">neighbors</ref>(current))<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_cost<sp/>=<sp/>cost_so_far[current]<sp/>+<sp/>graph.cost(current,<sp/>next);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cost_so_far.count(next)<sp/>||<sp/>new_cost<sp/>&lt;<sp/>cost_so_far[next])<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cost_so_far[next]<sp/>=<sp/>new_cost;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>came_from[next]<sp/>=<sp/>current;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frontier.<ref refid="struct_priority_queue_1a9361c94664b98a15a91a595d65c9846c" kindref="member">put</ref>(next,<sp/>new_cost);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Location&gt;</highlight></codeline>
<codeline lineno="243" refid="implementation_01orig_8cpp_1af7ae297639a56db32da98fa801049faa" refkind="member"><highlight class="normal">vector&lt;Location&gt;<sp/><ref refid="implementation_01orig_8cpp_1af7ae297639a56db32da98fa801049faa" kindref="member">reconstruct_path</ref>(</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><ref refid="struct_graph_1aea7d42bb67163fe692353674435a1426" kindref="member">Location</ref><sp/>start,</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><ref refid="struct_graph_1aea7d42bb67163fe692353674435a1426" kindref="member">Location</ref><sp/>goal,</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/>unordered_map&lt;Location,<sp/>Location&gt;&amp;<sp/>came_from</highlight></codeline>
<codeline lineno="247"><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>vector&lt;Location&gt;<sp/>path;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><ref refid="struct_graph_1aea7d42bb67163fe692353674435a1426" kindref="member">Location</ref><sp/>current<sp/>=<sp/>goal;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>path.push_back(current);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current<sp/>!=<sp/>start)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>current<sp/>=<sp/>came_from[current];</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>path.push_back(current);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>path;</highlight></codeline>
<codeline lineno="256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258" refid="implementation_01orig_8cpp_1a394ba0076283a1523c29842e95aa897d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="implementation_01orig_8cpp_1a394ba0076283a1523c29842e95aa897d" kindref="member">heuristic</ref>(<ref refid="struct_square_grid_1a2c9a2cbd3912aa48ac97289abc3f1c0f" kindref="member">SquareGrid::Location</ref><sp/>a,<sp/><ref refid="struct_square_grid_1a2c9a2cbd3912aa48ac97289abc3f1c0f" kindref="member">SquareGrid::Location</ref><sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x1,<sp/>y1,<sp/>x2,<sp/>y2;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>tie<sp/>(x1,<sp/>y1)<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>tie<sp/>(x2,<sp/>y2)<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>abs(x1<sp/>-<sp/>x2)<sp/>+<sp/>abs(y1<sp/>-<sp/>y2);</highlight></codeline>
<codeline lineno="263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Graph&gt;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="implementation_01orig_8cpp_1a9b1566d7e8a1017f075720664601abb0" kindref="member">a_star_search</ref></highlight></codeline>
<codeline lineno="267" refid="implementation_01orig_8cpp_1a9b1566d7e8a1017f075720664601abb0" refkind="member"><highlight class="normal"><sp/><sp/>(<ref refid="struct_graph" kindref="compound">Graph</ref><sp/>graph,</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="struct_graph_1aea7d42bb67163fe692353674435a1426" kindref="member">Graph::Location</ref><sp/>start,</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="struct_graph_1aea7d42bb67163fe692353674435a1426" kindref="member">Graph::Location</ref><sp/>goal,</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/>unordered_map&lt;typename<sp/>Graph::Location,<sp/>typename<sp/>Graph::Location&gt;&amp;<sp/>came_from,</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/>unordered_map&lt;typename<sp/>Graph::Location,<sp/>int&gt;&amp;<sp/>cost_so_far)</highlight></codeline>
<codeline lineno="272"><highlight class="normal">{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="struct_graph_1aea7d42bb67163fe692353674435a1426" kindref="member">Graph::Location</ref><sp/><ref refid="struct_graph_1aea7d42bb67163fe692353674435a1426" kindref="member">Location</ref>;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><ref refid="struct_priority_queue" kindref="compound">PriorityQueue&lt;Location&gt;</ref><sp/>frontier;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>frontier.<ref refid="struct_priority_queue_1a9361c94664b98a15a91a595d65c9846c" kindref="member">put</ref>(start,<sp/>0);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>came_from[start]<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>cost_so_far[start]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!frontier.<ref refid="struct_priority_queue_1a422e38d0c3b8398dc6e4867bb4ceec41" kindref="member">empty</ref>())<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>current<sp/>=<sp/>frontier.<ref refid="struct_priority_queue_1ab211c9583fda5c1a6352021444af5f0e" kindref="member">get</ref>();</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current<sp/>==<sp/>goal)<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>next<sp/>:<sp/>graph.<ref refid="struct_graph_1a8389c308ee673e63d574e0a30191662e" kindref="member">neighbors</ref>(current))<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_cost<sp/>=<sp/>cost_so_far[current]<sp/>+<sp/>graph.cost(current,<sp/>next);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cost_so_far.count(next)<sp/>||<sp/>new_cost<sp/>&lt;<sp/>cost_so_far[next])<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cost_so_far[next]<sp/>=<sp/>new_cost;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>priority<sp/>=<sp/>new_cost<sp/>+<sp/><ref refid="implementation_01orig_8cpp_1a394ba0076283a1523c29842e95aa897d" kindref="member">heuristic</ref>(next,<sp/>goal);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frontier.<ref refid="struct_priority_queue_1a9361c94664b98a15a91a595d65c9846c" kindref="member">put</ref>(next,<sp/>priority);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>came_from[next]<sp/>=<sp/>current;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="BrainHarmonics/implementation orig.cpp"/>
  </compounddef>
</doxygen>
