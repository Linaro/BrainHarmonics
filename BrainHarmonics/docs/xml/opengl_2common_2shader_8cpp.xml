<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="opengl_2common_2shader_8cpp" kind="file" language="C++">
    <compoundname>shader.cpp</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">fstream</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">vector</includes>
    <includes refid="opengl_2common_2shader_8hpp" local="yes">shader.hpp</includes>
    <incdepgraph>
      <node id="2056">
        <label>stdint.h</label>
      </node>
      <node id="2050">
        <label>stdlib.h</label>
      </node>
      <node id="2055">
        <label>KHR/khrplatform.h</label>
        <link refid="khrplatform_8h"/>
        <childnode refid="2056" relation="include">
        </childnode>
      </node>
      <node id="2053">
        <label>string</label>
      </node>
      <node id="2043">
        <label>opengl/common/shader.cpp</label>
        <link refid="opengl_2common_2shader_8cpp"/>
        <childnode refid="2044" relation="include">
        </childnode>
        <childnode refid="2045" relation="include">
        </childnode>
        <childnode refid="2046" relation="include">
        </childnode>
        <childnode refid="2047" relation="include">
        </childnode>
        <childnode refid="2048" relation="include">
        </childnode>
      </node>
      <node id="2057">
        <label>GLFW/glfw3.h</label>
      </node>
      <node id="2045">
        <label>fstream</label>
      </node>
      <node id="2048">
        <label>shader.hpp</label>
        <link refid="opengl_2common_2shader_8hpp"/>
        <childnode refid="2049" relation="include">
        </childnode>
      </node>
      <node id="2051">
        <label>string.h</label>
      </node>
      <node id="2047">
        <label>vector</label>
      </node>
      <node id="2049">
        <label>common.h</label>
        <link refid="opengl_2common_2common_8h"/>
        <childnode refid="2050" relation="include">
        </childnode>
        <childnode refid="2051" relation="include">
        </childnode>
        <childnode refid="2052" relation="include">
        </childnode>
        <childnode refid="2053" relation="include">
        </childnode>
        <childnode refid="2054" relation="include">
        </childnode>
        <childnode refid="2057" relation="include">
        </childnode>
      </node>
      <node id="2044">
        <label>iostream</label>
      </node>
      <node id="2054">
        <label>glad/glad.h</label>
        <link refid="glad_8h"/>
        <childnode refid="2055" relation="include">
        </childnode>
      </node>
      <node id="2046">
        <label>algorithm</label>
      </node>
      <node id="2052">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="opengl_2common_2shader_8cpp_1a2683ce9fa91b4edc1b33be93261a0325" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="glad_8h_1ae84541b4f3d8e1ea24ec0f466a8c568b" kindref="member">std::string</ref></type>
        <definition>std::string readSourceFile</definition>
        <argsstring>(const char *path)</argsstring>
        <name>readSourceFile</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opengl/common/shader.cpp" line="10" column="1" bodyfile="opengl/common/shader.cpp" bodystart="10" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="opengl_2common_2shader_8cpp_1a1eaf98a14119a7c9c123fc59c4a88d94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="glad_8h_1a950fc91edb4504f62f1c577bf4727c29" kindref="member">void</ref></type>
        <definition>void CompileShader</definition>
        <argsstring>(std::string program_code, GLuint shader_id)</argsstring>
        <name>CompileShader</name>
        <param>
          <type><ref refid="glad_8h_1ae84541b4f3d8e1ea24ec0f466a8c568b" kindref="member">std::string</ref></type>
          <declname>program_code</declname>
        </param>
        <param>
          <type><ref refid="glad_8h_1a68c4714e43d8e827d80759f9cb864f3c" kindref="member">GLuint</ref></type>
          <declname>shader_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opengl/common/shader.cpp" line="29" column="1" bodyfile="opengl/common/shader.cpp" bodystart="29" bodyend="44"/>
        <references refid="glad_8h_1abca6d43f43fae31f49dcb883b2f301f6" compoundref="glad_8h" startline="747">GL_FALSE</references>
        <references refid="glad_8h_1a369ec108462c247e3028edc9070117a0" compoundref="glad_8h" startline="4027">glShaderSource</references>
        <references refid="glad_8h_1acf7a528ef1ef237d2a7676dcb0f22473" compoundref="glad_8h" startline="3946">glCompileShader</references>
        <references refid="glad_8h_1ae7002efbed794728b79205427b3ccc66" compoundref="glad_8h" startline="3988">glGetShaderiv</references>
        <references refid="glad_8h_1a8b14cf3c9445c50aabe5c7d21b31d215" compoundref="glad_8h" startline="1570">GL_COMPILE_STATUS</references>
        <references refid="glad_8h_1ae77c1e831fd164e9ac6c1a9cdb697ce5" compoundref="glad_8h" startline="1573">GL_INFO_LOG_LENGTH</references>
        <references refid="glad_8h_1a3058fd84744eb41e33773ad2b1a8c184" compoundref="glad_8h" startline="3991">glGetShaderInfoLog</references>
      </memberdef>
      <memberdef kind="function" id="opengl_2common_2shader_8cpp_1acece33008ab5ca684d562bbfe4163721" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="glad_8h_1a68c4714e43d8e827d80759f9cb864f3c" kindref="member">GLuint</ref></type>
        <definition>GLuint LoadShaders</definition>
        <argsstring>(const char *vertex_file_path, const char *fragment_file_path, const char *tcs_file_path, const char *tes_file_path)</argsstring>
        <name>LoadShaders</name>
        <param>
          <type>const char *</type>
          <declname>vertex_file_path</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fragment_file_path</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>tcs_file_path</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>tes_file_path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="opengl/common/shader.cpp" line="49" column="1" bodyfile="opengl/common/shader.cpp" bodystart="49" bodyend="104"/>
        <references refid="glad_8h_1a4d3447ff3caf454bc686968fbe5f04bf" compoundref="glad_8h" startline="3952">glCreateShader</references>
        <references refid="glad_8h_1aceb29bc16e885f956eb9e351a7dd6276" compoundref="glad_8h" startline="1543">GL_VERTEX_SHADER</references>
        <references refid="glad_8h_1a1a0294662b50921555cae95fb20740d4" compoundref="glad_8h" startline="1542">GL_FRAGMENT_SHADER</references>
        <references refid="glad_8h_1a49bfa77ccf6fd0a0e7894aa03cee1445" compoundref="glad_8h" startline="2065">GL_TESS_CONTROL_SHADER</references>
        <references refid="glad_8h_1aa4487628bc085e0bf9f3e54a8b638ee3" compoundref="glad_8h" startline="2064">GL_TESS_EVALUATION_SHADER</references>
        <references refid="common_2shader_8cpp_1a2683ce9fa91b4edc1b33be93261a0325" compoundref="common_2shader_8cpp" startline="10" endline="24">readSourceFile</references>
        <references refid="common_2shader_8cpp_1a1eaf98a14119a7c9c123fc59c4a88d94" compoundref="common_2shader_8cpp" startline="29" endline="44">CompileShader</references>
        <references refid="glad_8h_1abca6d43f43fae31f49dcb883b2f301f6" compoundref="glad_8h" startline="747">GL_FALSE</references>
        <references refid="glad_8h_1acf9d728f2b2be42fbc2fe6dada8bcd2b" compoundref="glad_8h" startline="3949">glCreateProgram</references>
        <references refid="glad_8h_1a0cb06d612b3358bfaadbbefd7c51f1cc" compoundref="glad_8h" startline="3940">glAttachShader</references>
        <references refid="glad_8h_1ad241352c6eee6e79f09942ef0771db47" compoundref="glad_8h" startline="4024">glLinkProgram</references>
        <references refid="glad_8h_1a511181ed70d9d4cf7463a0ffe39f836d" compoundref="glad_8h" startline="3982">glGetProgramiv</references>
        <references refid="glad_8h_1ae644ef6b281c9378fa49d9b1ccefaf31" compoundref="glad_8h" startline="1571">GL_LINK_STATUS</references>
        <references refid="glad_8h_1ae77c1e831fd164e9ac6c1a9cdb697ce5" compoundref="glad_8h" startline="1573">GL_INFO_LOG_LENGTH</references>
        <references refid="glad_8h_1ad0eeab6a26c94a0b78c04aac628e5ab5" compoundref="glad_8h" startline="3985">glGetProgramInfoLog</references>
        <references refid="glad_8h_1ac012d7614801ed69d643ad388dcfc768" compoundref="glad_8h" startline="3958">glDeleteShader</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="opengl_2common_2shader_8hpp" kindref="compound">shader.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>Purpose:<sp/>helper<sp/>function<sp/>for<sp/>reading<sp/>file<sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10" refid="opengl_2common_2shader_8cpp_1a2683ce9fa91b4edc1b33be93261a0325" refkind="member"><highlight class="normal"><ref refid="glad_8h_1ae84541b4f3d8e1ea24ec0f466a8c568b" kindref="member">std::string</ref><sp/><ref refid="common_2shader_8cpp_1a2683ce9fa91b4edc1b33be93261a0325" kindref="member">readSourceFile</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="glad_8h_1ab25d8cd967ccbd19b630d7100ff8f67e" kindref="member">path</ref>)<sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="glad_8h_1ae84541b4f3d8e1ea24ec0f466a8c568b" kindref="member">std::string</ref><sp/>code;<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ifstream<sp/>file_stream(<ref refid="glad_8h_1ab25d8cd967ccbd19b630d7100ff8f67e" kindref="member">path</ref>,<ref refid="glad_8h_1a83ad0ee7f1e06b59c90271716e689080" kindref="member">std::ios::in</ref>);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(file_stream.is_open())<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="glad_8h_1ae84541b4f3d8e1ea24ec0f466a8c568b" kindref="member">std::string</ref><sp/>line<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(getline(file_stream,line))<sp/></highlight><highlight class="comment">//<sp/>nice<sp/>way<sp/>to<sp/>get<sp/>all<sp/>words</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>code<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>+<sp/>line;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file_stream.close();</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>code;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;couldn&apos;t<sp/>open&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>Purpose:<sp/>compile<sp/>the<sp/>code<sp/>(interesting!!)<sp/></highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="opengl_2common_2shader_8cpp_1a1eaf98a14119a7c9c123fc59c4a88d94" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="common_2shader_8cpp_1a1eaf98a14119a7c9c123fc59c4a88d94" kindref="member">CompileShader</ref><sp/>(<ref refid="glad_8h_1ae84541b4f3d8e1ea24ec0f466a8c568b" kindref="member">std::string</ref><sp/>program_code,<ref refid="glad_8h_1a68c4714e43d8e827d80759f9cb864f3c" kindref="member">GLuint</ref><sp/>shader_id)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;going<sp/>to<sp/>compile<sp/>the<sp/>shader\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="glad_8h_1acebcc1c5663f14ebde1d16831e5fed94" kindref="member">GLint</ref><sp/><ref refid="glad_8h_1a321ff419cd5252e54cf95e64dc6687ee" kindref="member">result</ref><sp/>=<sp/><ref refid="glad_8h_1abca6d43f43fae31f49dcb883b2f301f6" kindref="member">GL_FALSE</ref>;<sp/></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>infolog_length;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>program_code_pointer<sp/>=<sp/>program_code.c_str();</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="glad_8h_1a369ec108462c247e3028edc9070117a0" kindref="member">glShaderSource</ref>(shader_id,1,&amp;program_code_pointer,NULL);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="glad_8h_1acf7a528ef1ef237d2a7676dcb0f22473" kindref="member">glCompileShader</ref>(shader_id);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="glad_8h_1ae7002efbed794728b79205427b3ccc66" kindref="member">glGetShaderiv</ref>(shader_id,<ref refid="glad_8h_1a8b14cf3c9445c50aabe5c7d21b31d215" kindref="member">GL_COMPILE_STATUS</ref>,&amp;<ref refid="glad_8h_1a321ff419cd5252e54cf95e64dc6687ee" kindref="member">result</ref>);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="glad_8h_1ae7002efbed794728b79205427b3ccc66" kindref="member">glGetShaderiv</ref>(shader_id,<ref refid="glad_8h_1ae77c1e831fd164e9ac6c1a9cdb697ce5" kindref="member">GL_INFO_LOG_LENGTH</ref>,&amp;infolog_length);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>infolog_length<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;char&gt;<sp/>error_msg(infolog_length+1);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="glad_8h_1a3058fd84744eb41e33773ad2b1a8c184" kindref="member">glGetShaderInfoLog</ref>(shader_id,infolog_length,NULL,&amp;error_msg[0]);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,&amp;error_msg[0]);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;finished<sp/>compiling\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>Purpose:<sp/>actually<sp/>load<sp/>the<sp/>shaders<sp/></highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="opengl_2common_2shader_8cpp_1acece33008ab5ca684d562bbfe4163721" refkind="member"><highlight class="normal"><ref refid="glad_8h_1a68c4714e43d8e827d80759f9cb864f3c" kindref="member">GLuint</ref><sp/><ref refid="common_2shader_8cpp_1acece33008ab5ca684d562bbfe4163721" kindref="member">LoadShaders</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>vertex_file_path,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>fragment_file_path,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>tcs_file_path,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>tes_file_path)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;loading<sp/>the<sp/>shaders\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="glad_8h_1a68c4714e43d8e827d80759f9cb864f3c" kindref="member">GLuint</ref><sp/>vertex_shader_id<sp/>=<sp/><ref refid="glad_8h_1a4d3447ff3caf454bc686968fbe5f04bf" kindref="member">glCreateShader</ref>(<ref refid="glad_8h_1aceb29bc16e885f956eb9e351a7dd6276" kindref="member">GL_VERTEX_SHADER</ref>);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="glad_8h_1a68c4714e43d8e827d80759f9cb864f3c" kindref="member">GLuint</ref><sp/>fragment_shader_id<sp/>=<sp/><ref refid="glad_8h_1a4d3447ff3caf454bc686968fbe5f04bf" kindref="member">glCreateShader</ref>(<ref refid="glad_8h_1a1a0294662b50921555cae95fb20740d4" kindref="member">GL_FRAGMENT_SHADER</ref>);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="glad_8h_1a68c4714e43d8e827d80759f9cb864f3c" kindref="member">GLuint</ref><sp/>tcs_shader_id<sp/>=<sp/><ref refid="glad_8h_1a4d3447ff3caf454bc686968fbe5f04bf" kindref="member">glCreateShader</ref>(<ref refid="glad_8h_1a49bfa77ccf6fd0a0e7894aa03cee1445" kindref="member">GL_TESS_CONTROL_SHADER</ref>);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="glad_8h_1a68c4714e43d8e827d80759f9cb864f3c" kindref="member">GLuint</ref><sp/>tes_shader_id<sp/>=<sp/><ref refid="glad_8h_1a4d3447ff3caf454bc686968fbe5f04bf" kindref="member">glCreateShader</ref>(<ref refid="glad_8h_1aa4487628bc085e0bf9f3e54a8b638ee3" kindref="member">GL_TESS_EVALUATION_SHADER</ref>);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="glad_8h_1ae84541b4f3d8e1ea24ec0f466a8c568b" kindref="member">std::string</ref><sp/>vertex_shader_code=<sp/><ref refid="common_2shader_8cpp_1a2683ce9fa91b4edc1b33be93261a0325" kindref="member">readSourceFile</ref>(vertex_file_path);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(vertex_shader_code<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="glad_8h_1ae84541b4f3d8e1ea24ec0f466a8c568b" kindref="member">std::string</ref><sp/>fragment_shader_code<sp/>=<sp/><ref refid="common_2shader_8cpp_1a2683ce9fa91b4edc1b33be93261a0325" kindref="member">readSourceFile</ref>(fragment_file_path);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fragment_shader_code<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="glad_8h_1ae84541b4f3d8e1ea24ec0f466a8c568b" kindref="member">std::string</ref><sp/>tcs_shader_code=<sp/><ref refid="common_2shader_8cpp_1a2683ce9fa91b4edc1b33be93261a0325" kindref="member">readSourceFile</ref>(tcs_file_path);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tcs_shader_code<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="glad_8h_1ae84541b4f3d8e1ea24ec0f466a8c568b" kindref="member">std::string</ref><sp/>tes_shader_code=<sp/><ref refid="common_2shader_8cpp_1a2683ce9fa91b4edc1b33be93261a0325" kindref="member">readSourceFile</ref>(tes_file_path);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tes_shader_code<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;compiling<sp/>the<sp/>vertex<sp/>shader:<sp/>%s\n&quot;</highlight><highlight class="normal">,vertex_file_path);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_2shader_8cpp_1a1eaf98a14119a7c9c123fc59c4a88d94" kindref="member">CompileShader</ref>(vertex_shader_code,vertex_shader_id);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;compiling<sp/>the<sp/>fragment<sp/>shader:<sp/>%s\n&quot;</highlight><highlight class="normal">,fragment_file_path);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_2shader_8cpp_1a1eaf98a14119a7c9c123fc59c4a88d94" kindref="member">CompileShader</ref>(fragment_shader_code,fragment_shader_id);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;compiling<sp/>the<sp/>tcs<sp/>shader:<sp/>%s\n&quot;</highlight><highlight class="normal">,tcs_file_path);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_2shader_8cpp_1a1eaf98a14119a7c9c123fc59c4a88d94" kindref="member">CompileShader</ref>(tcs_shader_code,tcs_shader_id);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;compiling<sp/>the<sp/>tes<sp/>shader:<sp/>%s\n&quot;</highlight><highlight class="normal">,tes_file_path);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_2shader_8cpp_1a1eaf98a14119a7c9c123fc59c4a88d94" kindref="member">CompileShader</ref>(tes_shader_code,tes_shader_id);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//second<sp/>half</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="glad_8h_1acebcc1c5663f14ebde1d16831e5fed94" kindref="member">GLint</ref><sp/><ref refid="glad_8h_1a321ff419cd5252e54cf95e64dc6687ee" kindref="member">result</ref><sp/>=<sp/><ref refid="glad_8h_1abca6d43f43fae31f49dcb883b2f301f6" kindref="member">GL_FALSE</ref>;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>infolog_length;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;linking<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="glad_8h_1a68c4714e43d8e827d80759f9cb864f3c" kindref="member">GLuint</ref><sp/>program_id<sp/>=<sp/><ref refid="glad_8h_1acf9d728f2b2be42fbc2fe6dada8bcd2b" kindref="member">glCreateProgram</ref>();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="glad_8h_1a0cb06d612b3358bfaadbbefd7c51f1cc" kindref="member">glAttachShader</ref>(program_id,vertex_shader_id);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="glad_8h_1a0cb06d612b3358bfaadbbefd7c51f1cc" kindref="member">glAttachShader</ref>(program_id,fragment_shader_id);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="glad_8h_1a0cb06d612b3358bfaadbbefd7c51f1cc" kindref="member">glAttachShader</ref>(program_id,tcs_shader_id);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="glad_8h_1a0cb06d612b3358bfaadbbefd7c51f1cc" kindref="member">glAttachShader</ref>(program_id,tes_shader_id);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="glad_8h_1ad241352c6eee6e79f09942ef0771db47" kindref="member">glLinkProgram</ref>(program_id);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>linking<sp/>complete</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//double<sp/>check<sp/>the<sp/>linking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//similar<sp/>to<sp/>checking<sp/>the<sp/>compiling,<sp/>this<sp/>could<sp/>be<sp/>a<sp/>single<sp/>function<sp/>that<sp/>we<sp/>use?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="glad_8h_1a511181ed70d9d4cf7463a0ffe39f836d" kindref="member">glGetProgramiv</ref>(program_id,<ref refid="glad_8h_1ae644ef6b281c9378fa49d9b1ccefaf31" kindref="member">GL_LINK_STATUS</ref>,&amp;<ref refid="glad_8h_1a321ff419cd5252e54cf95e64dc6687ee" kindref="member">result</ref>);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="glad_8h_1a511181ed70d9d4cf7463a0ffe39f836d" kindref="member">glGetProgramiv</ref>(program_id,<ref refid="glad_8h_1ae77c1e831fd164e9ac6c1a9cdb697ce5" kindref="member">GL_INFO_LOG_LENGTH</ref>,&amp;infolog_length);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>infolog_length<sp/>&gt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;char&gt;<sp/>program_error_msg(infolog_length+1);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="glad_8h_1ad0eeab6a26c94a0b78c04aac628e5ab5" kindref="member">glGetProgramInfoLog</ref>(program_id,infolog_length,NULL,&amp;program_error_msg[0]);</highlight><highlight class="comment">//<sp/>probably<sp/>populates<sp/>the<sp/>error<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,&amp;program_error_msg[0]);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;link<sp/>success!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="glad_8h_1ac012d7614801ed69d643ad388dcfc768" kindref="member">glDeleteShader</ref>(vertex_shader_id);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="glad_8h_1ac012d7614801ed69d643ad388dcfc768" kindref="member">glDeleteShader</ref>(fragment_shader_id);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="glad_8h_1ac012d7614801ed69d643ad388dcfc768" kindref="member">glDeleteShader</ref>(tcs_shader_id);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="glad_8h_1ac012d7614801ed69d643ad388dcfc768" kindref="member">glDeleteShader</ref>(tes_shader_id);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>program_id;</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
    </programlisting>
    <location file="opengl/common/shader.cpp"/>
  </compounddef>
</doxygen>
