<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_brain_harmonics_8cc" kind="file" language="C++">
    <compoundname>BrainHarmonics.cc</compoundname>
    <includes local="no">sys/time.h</includes>
    <includes local="no">sys/types.h</includes>
    <includes local="no">sys/socket.h</includes>
    <includes local="no">netinet/in.h</includes>
    <includes local="no">arpa/inet.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">fcntl.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">assert.h</includes>
    <includes local="no">time.h</includes>
    <includes local="no">array</includes>
    <includes local="no">cstring</includes>
    <includes local="no">cstdint</includes>
    <includes local="no">fstream</includes>
    <includes local="no">iomanip</includes>
    <includes local="no">iostream</includes>
    <includes local="no">map</includes>
    <includes local="no">math.h</includes>
    <includes local="no">numeric</includes>
    <includes local="no">queue</includes>
    <includes local="no">sstream</includes>
    <includes local="no">string</includes>
    <includes local="no">thread</includes>
    <includes local="no">vector</includes>
    <includes local="no">libcaercpp/devices/dynapse.hpp</includes>
    <includes local="no">libcaercpp/libcaer.hpp</includes>
    <includes local="no">libcaercpp/events/packetContainer.hpp</includes>
    <includes local="no">csignal</includes>
    <includes local="no">atomic</includes>
    <includes refid="sniffex_8h" local="yes">sniffex.h</includes>
    <includes local="no">vtk-9.0/vtkAutoInit.h</includes>
    <includes local="no">vtk-9.0/vtkVersion.h</includes>
    <includes local="no">vtk-9.0/vtkActor.h</includes>
    <includes local="no">vtk-9.0/vtkActor2D.h</includes>
    <includes local="no">vtk-9.0/vtkCamera.h</includes>
    <includes local="no">vtk-9.0/vtkCellArray.h</includes>
    <includes local="no">vtk-9.0/vtkCellData.h</includes>
    <includes local="no">vtk-9.0/vtkColorTransferFunction.h</includes>
    <includes local="no">vtk-9.0/vtkContourFilter.h</includes>
    <includes local="no">vtk-9.0/vtkCoordinate.h</includes>
    <includes local="no">vtk-9.0/vtkFloatArray.h</includes>
    <includes local="no">vtk-9.0/vtkMath.h</includes>
    <includes local="no">vtk-9.0/vtkParametricFunctionSource.h</includes>
    <includes local="no">vtk-9.0/vtkPointData.h</includes>
    <includes local="no">vtk-9.0/vtkPoints.h</includes>
    <includes local="no">vtk-9.0/vtkPolygon.h</includes>
    <includes local="no">vtk-9.0/vtkPolyData.h</includes>
    <includes local="no">vtk-9.0/vtkPolyDataMapper.h</includes>
    <includes local="no">vtk-9.0/vtkPolyDataMapper2D.h</includes>
    <includes local="no">vtk-9.0/vtkAppendPolyData.h</includes>
    <includes local="no">vtk-9.0/vtkProgrammableSource.h</includes>
    <includes local="no">vtk-9.0/vtkProperty.h</includes>
    <includes local="no">vtk-9.0/vtkProperty2D.h</includes>
    <includes local="no">vtk-9.0/vtkRenderWindow.h</includes>
    <includes local="no">vtk-9.0/vtkRenderer.h</includes>
    <includes local="no">vtk-9.0/vtkRenderWindowInteractor.h</includes>
    <includes local="no">vtk-9.0/vtkReverseSense.h</includes>
    <includes local="no">vtk-9.0/vtkSmartPointer.h</includes>
    <includes local="no">vtk-9.0/vtkSurfaceReconstructionFilter.h</includes>
    <includes local="no">vtk-9.0/vtkTextActor.h</includes>
    <includes local="no">vtk-9.0/vtkTextMapper.h</includes>
    <includes local="no">vtk-9.0/vtkTextProperty.h</includes>
    <includes local="no">vtk-9.0/vtkUnsignedCharArray.h</includes>
    <includes local="no">vtk-9.0/vtkVertexGlyphFilter.h</includes>
    <includes local="no">vtk-9.0/vtkXMLPolyDataWriter.h</includes>
    <includes local="no">cmath</includes>
    <includes local="no">/usr/local/include/vtk-9.0/vtkTransform.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkCommonTransformsModule.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkLinearTransform.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkHomogeneousTransform.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkAbstractTransform.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkObject.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkCommonCoreModule.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkObjectBase.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkIndent.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkSystemIncludes.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkWin32Header.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkABI.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkConfigure.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkVersionMacros.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkIOStream.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkType.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtk_kwiml.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkkwiml/abi.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkkwiml/int.h</includes>
    <includes local="no">inttypes.h</includes>
    <includes local="yes">stdbool.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkWrappingHints.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkOStreamWrapper.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkOStrStreamWrapper.h</includes>
    <includes local="no">string.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkSetGet.h</includes>
    <includes local="no">type_traits</includes>
    <includes local="no">typeinfo</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkTimeStamp.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkWeakPointerBase.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkMatrix4x4.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkCommonMathModule.h</includes>
    <includes local="no">/usr/local/include/vtk-9.0/vtkTransformPolyDataFilter.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkFiltersGeneralModule.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkPolyDataAlgorithm.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkAlgorithm.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkCommonExecutionModelModule.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkPolyData.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkCommonDataModelModule.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkPointSet.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkDataSet.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkDataObject.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkPoints.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkDataArray.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkAbstractArray.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkVariant.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkStdString.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkUnicodeString.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkVariantInlineOperators.h</includes>
    <includes local="no">climits</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkVTK_USE_SCALED_SOA_ARRAYS.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkCellArray.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkAOSDataArrayTemplate.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkBuffer.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkObjectFactory.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkDebugLeaksManager.h</includes>
    <includes local="no">algorithm</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkGenericDataArray.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkGenericDataArrayLookupHelper.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkIdList.h</includes>
    <includes local="no">unordered_map</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkSmartPointer.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkSmartPointerBase.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkMeta.h</includes>
    <includes local="no">utility</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkNew.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkTypeTraits.h</includes>
    <includes local="no">cassert</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkGenericDataArray.txx</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkMath.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkMathConfigure.h</includes>
    <includes local="no">float.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkVariantCast.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkCell.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkCellType.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkDataArrayRange.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkDataArrayMeta.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkAssume.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkDataArrayTupleRange_AOS.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkDataArrayTupleRange_Generic.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkDataArrayAccessor.h</includes>
    <includes local="no">iterator</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkDataArrayValueRange_AOS.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkDataArrayValueRange_Generic.h</includes>
    <includes local="no">tuple</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkTypeInt32Array.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkIntArray.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkTypeInt64Array.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkTypeList.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkTypeListMacros.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkTypeList.txx</includes>
    <includes local="no">initializer_list</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkCellLinks.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkAbstractCellLinks.h</includes>
    <includes local="yes">/usr/local/include/vtk-9.0/vtkPolyDataInternals.h</includes>
    <includes local="no">cstdlib</includes>
    <includes local="no">Python.h</includes>
    <includes local="no">numpy/arrayobject.h</includes>
    <includes local="no">GL/gl.h</includes>
    <includes local="no">GL/glu.h</includes>
    <includes local="no">GL/glut.h</includes>
    <includes refid="universe_8h" local="yes">universe.h</includes>
    <includes refid="dimension_8h" local="yes">dimension.h</includes>
    <includes refid="elementaryparticle_8h" local="yes">elementaryparticle.h</includes>
    <includes refid="elementaryforce_8h" local="yes">elementaryforce.h</includes>
    <includes refid="compositeforceparticle_8h" local="yes">compositeforceparticle.h</includes>
    <includes refid="law_8h" local="yes">law.h</includes>
    <includes refid="matter_8h" local="yes">matter.h</includes>
    <includes refid="monomer_8h" local="yes">monomer.h</includes>
    <includes refid="polymer_8h" local="yes">polymer.h</includes>
    <includes refid="solid_8h" local="yes">solid.h</includes>
    <includes refid="polyhedron_8h" local="yes">polyhedron.h</includes>
    <includes refid="polygon_8h" local="yes">polygon.h</includes>
    <includes refid="quad_8h" local="yes">quad.h</includes>
    <includes refid="line_8h" local="yes">line.h</includes>
    <includes refid="point_8h" local="yes">point.h</includes>
    <includes refid="node_8h" local="yes">node.h</includes>
    <includes refid="apptimer_8h" local="yes">apptimer.h</includes>
    <includes refid="cognitivenetwork_8h" local="yes">cognitivenetwork.h</includes>
    <includes refid="cognitiveinput_8h" local="yes">cognitiveinput.h</includes>
    <includes refid="cognitiveoutput_8h" local="yes">cognitiveoutput.h</includes>
    <includes refid="orbital_8h" local="yes">orbital.h</includes>
    <includes refid="neuron_8h" local="yes">neuron.h</includes>
    <includes refid="dendritecleft_8h" local="yes">dendritecleft.h</includes>
    <includes refid="neuroreceptor_8h" local="yes">neuroreceptor.h</includes>
    <includes refid="synapse_8h" local="yes">synapse.h</includes>
    <includes refid="interneuronspace_8h" local="yes">interneuronspace.h</includes>
    <includes refid="membrane_8h" local="yes">membrane.h</includes>
    <includes refid="membranechannel_8h" local="yes">membranechannel.h</includes>
    <includes refid="dendrite_8h" local="yes">dendrite.h</includes>
    <includes refid="dendritebranch_8h" local="yes">dendritebranch.h</includes>
    <includes refid="soma_8h" local="yes">soma.h</includes>
    <includes refid="axonhillock_8h" local="yes">axonhillock.h</includes>
    <includes refid="axon_8h" local="yes">axon.h</includes>
    <includes refid="axonbranch_8h" local="yes">axonbranch.h</includes>
    <includes refid="myelinsheath_8h" local="yes">myelinsheath.h</includes>
    <includes refid="schwanncell_8h" local="yes">schwanncell.h</includes>
    <includes refid="axonbouton_8h" local="yes">axonbouton.h</includes>
    <includes refid="synapticvesicle_8h" local="yes">synapticvesicle.h</includes>
    <includes refid="neurotransmitter_8h" local="yes">neurotransmitter.h</includes>
    <includes refid="spike_8h" local="yes">spike.h</includes>
    <incdepgraph>
      <node id="296">
        <label>/usr/local/include/vtk-9.0/vtkOStrStreamWrapper.h</label>
      </node>
      <node id="335">
        <label>/usr/local/include/vtk-9.0/vtkMeta.h</label>
      </node>
      <node id="379">
        <label>law.h</label>
        <link refid="law_8h"/>
        <childnode refid="218" relation="include">
        </childnode>
        <childnode refid="373" relation="include">
        </childnode>
      </node>
      <node id="309">
        <label>/usr/local/include/vtk-9.0/vtkPolyData.h</label>
      </node>
      <node id="293">
        <label>stdbool.h</label>
      </node>
      <node id="324">
        <label>/usr/local/include/vtk-9.0/vtkAOSDataArrayTemplate.h</label>
      </node>
      <node id="231">
        <label>atomic</label>
      </node>
      <node id="372">
        <label>GL/glut.h</label>
      </node>
      <node id="376">
        <label>elementaryparticle.h</label>
        <link refid="elementaryparticle_8h"/>
        <childnode refid="218" relation="include">
        </childnode>
        <childnode refid="226" relation="include">
        </childnode>
        <childnode refid="373" relation="include">
        </childnode>
      </node>
      <node id="205">
        <label>netinet/in.h</label>
      </node>
      <node id="206">
        <label>arpa/inet.h</label>
      </node>
      <node id="217">
        <label>iomanip</label>
      </node>
      <node id="222">
        <label>queue</label>
      </node>
      <node id="303">
        <label>/usr/local/include/vtk-9.0/vtkCommonMathModule.h</label>
      </node>
      <node id="342">
        <label>/usr/local/include/vtk-9.0/vtkMathConfigure.h</label>
      </node>
      <node id="279">
        <label>/usr/local/include/vtk-9.0/vtkCommonCoreModule.h</label>
      </node>
      <node id="251">
        <label>vtk-9.0/vtkPoints.h</label>
      </node>
      <node id="211">
        <label>assert.h</label>
      </node>
      <node id="384">
        <label>polyhedron.h</label>
        <link refid="polyhedron_8h"/>
        <childnode refid="218" relation="include">
        </childnode>
        <childnode refid="383" relation="include">
        </childnode>
        <childnode refid="385" relation="include">
        </childnode>
      </node>
      <node id="353">
        <label>iterator</label>
      </node>
      <node id="405">
        <label>axonhillock.h</label>
        <link refid="axonhillock_8h"/>
        <childnode refid="399" relation="include">
        </childnode>
      </node>
      <node id="343">
        <label>float.h</label>
      </node>
      <node id="362">
        <label>/usr/local/include/vtk-9.0/vtkTypeList.txx</label>
      </node>
      <node id="340">
        <label>/usr/local/include/vtk-9.0/vtkGenericDataArray.txx</label>
      </node>
      <node id="239">
        <label>vtk-9.0/vtkActor.h</label>
      </node>
      <node id="413">
        <label>spike.h</label>
        <link refid="spike_8h"/>
        <childnode refid="207" relation="include">
        </childnode>
        <childnode refid="226" relation="include">
        </childnode>
        <childnode refid="391" relation="include">
        </childnode>
      </node>
      <node id="350">
        <label>/usr/local/include/vtk-9.0/vtkDataArrayTupleRange_AOS.h</label>
      </node>
      <node id="318">
        <label>/usr/local/include/vtk-9.0/vtkStdString.h</label>
      </node>
      <node id="215">
        <label>cstdint</label>
      </node>
      <node id="290">
        <label>/usr/local/include/vtk-9.0/vtkkwiml/abi.h</label>
      </node>
      <node id="378">
        <label>compositeforceparticle.h</label>
        <link refid="compositeforceparticle_8h"/>
        <childnode refid="218" relation="include">
        </childnode>
        <childnode refid="226" relation="include">
        </childnode>
        <childnode refid="373" relation="include">
        </childnode>
      </node>
      <node id="346">
        <label>/usr/local/include/vtk-9.0/vtkCellType.h</label>
      </node>
      <node id="391">
        <label>cognitivenetwork.h</label>
        <link refid="cognitivenetwork_8h"/>
        <childnode refid="375" relation="include">
        </childnode>
        <childnode refid="373" relation="include">
        </childnode>
      </node>
      <node id="261">
        <label>vtk-9.0/vtkRenderer.h</label>
      </node>
      <node id="311">
        <label>/usr/local/include/vtk-9.0/vtkPointSet.h</label>
      </node>
      <node id="358">
        <label>/usr/local/include/vtk-9.0/vtkIntArray.h</label>
      </node>
      <node id="253">
        <label>vtk-9.0/vtkPolyData.h</label>
      </node>
      <node id="301">
        <label>/usr/local/include/vtk-9.0/vtkWeakPointerBase.h</label>
      </node>
      <node id="208">
        <label>stdlib.h</label>
      </node>
      <node id="297">
        <label>/usr/local/include/vtk-9.0/vtkSetGet.h</label>
      </node>
      <node id="359">
        <label>/usr/local/include/vtk-9.0/vtkTypeInt64Array.h</label>
      </node>
      <node id="233">
        <label>pcap.h</label>
      </node>
      <node id="349">
        <label>/usr/local/include/vtk-9.0/vtkAssume.h</label>
      </node>
      <node id="408">
        <label>myelinsheath.h</label>
        <link refid="myelinsheath_8h"/>
        <childnode refid="218" relation="include">
        </childnode>
        <childnode refid="226" relation="include">
        </childnode>
        <childnode refid="391" relation="include">
        </childnode>
      </node>
      <node id="327">
        <label>/usr/local/include/vtk-9.0/vtkDebugLeaksManager.h</label>
      </node>
      <node id="330">
        <label>/usr/local/include/vtk-9.0/vtkGenericDataArrayLookupHelper.h</label>
      </node>
      <node id="383">
        <label>solid.h</label>
        <link refid="solid_8h"/>
        <childnode refid="218" relation="include">
        </childnode>
        <childnode refid="373" relation="include">
        </childnode>
      </node>
      <node id="386">
        <label>polygon.h</label>
        <link refid="polygon_8h"/>
        <childnode refid="218" relation="include">
        </childnode>
        <childnode refid="226" relation="include">
        </childnode>
        <childnode refid="384" relation="include">
        </childnode>
      </node>
      <node id="385">
        <label>point.h</label>
        <link refid="point_8h"/>
        <childnode refid="374" relation="include">
        </childnode>
        <childnode refid="218" relation="include">
        </childnode>
        <childnode refid="220" relation="include">
        </childnode>
        <childnode refid="373" relation="include">
        </childnode>
      </node>
      <node id="354">
        <label>/usr/local/include/vtk-9.0/vtkDataArrayValueRange_AOS.h</label>
      </node>
      <node id="272">
        <label>cmath</label>
      </node>
      <node id="236">
        <label>errno.h</label>
      </node>
      <node id="382">
        <label>polymer.h</label>
        <link refid="polymer_8h"/>
        <childnode refid="218" relation="include">
        </childnode>
        <childnode refid="226" relation="include">
        </childnode>
        <childnode refid="373" relation="include">
        </childnode>
      </node>
      <node id="339">
        <label>cassert</label>
      </node>
      <node id="284">
        <label>/usr/local/include/vtk-9.0/vtkABI.h</label>
      </node>
      <node id="209">
        <label>fcntl.h</label>
      </node>
      <node id="221">
        <label>numeric</label>
      </node>
      <node id="247">
        <label>vtk-9.0/vtkFloatArray.h</label>
      </node>
      <node id="252">
        <label>vtk-9.0/vtkPolygon.h</label>
      </node>
      <node id="244">
        <label>vtk-9.0/vtkColorTransferFunction.h</label>
      </node>
      <node id="394">
        <label>orbital.h</label>
        <link refid="orbital_8h"/>
        <childnode refid="328" relation="include">
        </childnode>
        <childnode refid="374" relation="include">
        </childnode>
        <childnode refid="218" relation="include">
        </childnode>
        <childnode refid="220" relation="include">
        </childnode>
        <childnode refid="224" relation="include">
        </childnode>
        <childnode refid="226" relation="include">
        </childnode>
        <childnode refid="391" relation="include">
        </childnode>
      </node>
      <node id="392">
        <label>cognitiveinput.h</label>
        <link refid="cognitiveinput_8h"/>
        <childnode refid="374" relation="include">
        </childnode>
        <childnode refid="218" relation="include">
        </childnode>
        <childnode refid="391" relation="include">
        </childnode>
      </node>
      <node id="275">
        <label>/usr/local/include/vtk-9.0/vtkLinearTransform.h</label>
      </node>
      <node id="254">
        <label>vtk-9.0/vtkPolyDataMapper.h</label>
      </node>
      <node id="224">
        <label>string</label>
      </node>
      <node id="369">
        <label>numpy/arrayobject.h</label>
      </node>
      <node id="219">
        <label>map</label>
      </node>
      <node id="277">
        <label>/usr/local/include/vtk-9.0/vtkAbstractTransform.h</label>
      </node>
      <node id="265">
        <label>vtk-9.0/vtkSurfaceReconstructionFilter.h</label>
      </node>
      <node id="355">
        <label>/usr/local/include/vtk-9.0/vtkDataArrayValueRange_Generic.h</label>
      </node>
      <node id="387">
        <label>quad.h</label>
        <link refid="quad_8h"/>
        <childnode refid="218" relation="include">
        </childnode>
        <childnode refid="386" relation="include">
        </childnode>
      </node>
      <node id="201">
        <label>BrainHarmonics/BrainHarmonics.cc</label>
        <link refid="_brain_harmonics_8cc"/>
        <childnode refid="202" relation="include">
        </childnode>
        <childnode refid="203" relation="include">
        </childnode>
        <childnode refid="204" relation="include">
        </childnode>
        <childnode refid="205" relation="include">
        </childnode>
        <childnode refid="206" relation="include">
        </childnode>
        <childnode refid="207" relation="include">
        </childnode>
        <childnode refid="208" relation="include">
        </childnode>
        <childnode refid="209" relation="include">
        </childnode>
        <childnode refid="210" relation="include">
        </childnode>
        <childnode refid="211" relation="include">
        </childnode>
        <childnode refid="212" relation="include">
        </childnode>
        <childnode refid="213" relation="include">
        </childnode>
        <childnode refid="214" relation="include">
        </childnode>
        <childnode refid="215" relation="include">
        </childnode>
        <childnode refid="216" relation="include">
        </childnode>
        <childnode refid="217" relation="include">
        </childnode>
        <childnode refid="218" relation="include">
        </childnode>
        <childnode refid="219" relation="include">
        </childnode>
        <childnode refid="220" relation="include">
        </childnode>
        <childnode refid="221" relation="include">
        </childnode>
        <childnode refid="222" relation="include">
        </childnode>
        <childnode refid="223" relation="include">
        </childnode>
        <childnode refid="224" relation="include">
        </childnode>
        <childnode refid="225" relation="include">
        </childnode>
        <childnode refid="226" relation="include">
        </childnode>
        <childnode refid="227" relation="include">
        </childnode>
        <childnode refid="228" relation="include">
        </childnode>
        <childnode refid="229" relation="include">
        </childnode>
        <childnode refid="230" relation="include">
        </childnode>
        <childnode refid="231" relation="include">
        </childnode>
        <childnode refid="232" relation="include">
        </childnode>
        <childnode refid="237" relation="include">
        </childnode>
        <childnode refid="238" relation="include">
        </childnode>
        <childnode refid="239" relation="include">
        </childnode>
        <childnode refid="240" relation="include">
        </childnode>
        <childnode refid="241" relation="include">
        </childnode>
        <childnode refid="242" relation="include">
        </childnode>
        <childnode refid="243" relation="include">
        </childnode>
        <childnode refid="244" relation="include">
        </childnode>
        <childnode refid="245" relation="include">
        </childnode>
        <childnode refid="246" relation="include">
        </childnode>
        <childnode refid="247" relation="include">
        </childnode>
        <childnode refid="248" relation="include">
        </childnode>
        <childnode refid="249" relation="include">
        </childnode>
        <childnode refid="250" relation="include">
        </childnode>
        <childnode refid="251" relation="include">
        </childnode>
        <childnode refid="252" relation="include">
        </childnode>
        <childnode refid="253" relation="include">
        </childnode>
        <childnode refid="254" relation="include">
        </childnode>
        <childnode refid="255" relation="include">
        </childnode>
        <childnode refid="256" relation="include">
        </childnode>
        <childnode refid="257" relation="include">
        </childnode>
        <childnode refid="258" relation="include">
        </childnode>
        <childnode refid="259" relation="include">
        </childnode>
        <childnode refid="260" relation="include">
        </childnode>
        <childnode refid="261" relation="include">
        </childnode>
        <childnode refid="262" relation="include">
        </childnode>
        <childnode refid="263" relation="include">
        </childnode>
        <childnode refid="264" relation="include">
        </childnode>
        <childnode refid="265" relation="include">
        </childnode>
        <childnode refid="266" relation="include">
        </childnode>
        <childnode refid="267" relation="include">
        </childnode>
        <childnode refid="268" relation="include">
        </childnode>
        <childnode refid="269" relation="include">
        </childnode>
        <childnode refid="270" relation="include">
        </childnode>
        <childnode refid="271" relation="include">
        </childnode>
        <childnode refid="272" relation="include">
        </childnode>
        <childnode refid="273" relation="include">
        </childnode>
        <childnode refid="274" relation="include">
        </childnode>
        <childnode refid="275" relation="include">
        </childnode>
        <childnode refid="276" relation="include">
        </childnode>
        <childnode refid="277" relation="include">
        </childnode>
        <childnode refid="278" relation="include">
        </childnode>
        <childnode refid="279" relation="include">
        </childnode>
        <childnode refid="280" relation="include">
        </childnode>
        <childnode refid="281" relation="include">
        </childnode>
        <childnode refid="282" relation="include">
        </childnode>
        <childnode refid="283" relation="include">
        </childnode>
        <childnode refid="284" relation="include">
        </childnode>
        <childnode refid="285" relation="include">
        </childnode>
        <childnode refid="286" relation="include">
        </childnode>
        <childnode refid="287" relation="include">
        </childnode>
        <childnode refid="288" relation="include">
        </childnode>
        <childnode refid="289" relation="include">
        </childnode>
        <childnode refid="290" relation="include">
        </childnode>
        <childnode refid="291" relation="include">
        </childnode>
        <childnode refid="292" relation="include">
        </childnode>
        <childnode refid="293" relation="include">
        </childnode>
        <childnode refid="294" relation="include">
        </childnode>
        <childnode refid="295" relation="include">
        </childnode>
        <childnode refid="296" relation="include">
        </childnode>
        <childnode refid="234" relation="include">
        </childnode>
        <childnode refid="297" relation="include">
        </childnode>
        <childnode refid="298" relation="include">
        </childnode>
        <childnode refid="299" relation="include">
        </childnode>
        <childnode refid="300" relation="include">
        </childnode>
        <childnode refid="301" relation="include">
        </childnode>
        <childnode refid="302" relation="include">
        </childnode>
        <childnode refid="303" relation="include">
        </childnode>
        <childnode refid="304" relation="include">
        </childnode>
        <childnode refid="305" relation="include">
        </childnode>
        <childnode refid="306" relation="include">
        </childnode>
        <childnode refid="307" relation="include">
        </childnode>
        <childnode refid="308" relation="include">
        </childnode>
        <childnode refid="309" relation="include">
        </childnode>
        <childnode refid="310" relation="include">
        </childnode>
        <childnode refid="311" relation="include">
        </childnode>
        <childnode refid="312" relation="include">
        </childnode>
        <childnode refid="313" relation="include">
        </childnode>
        <childnode refid="314" relation="include">
        </childnode>
        <childnode refid="315" relation="include">
        </childnode>
        <childnode refid="316" relation="include">
        </childnode>
        <childnode refid="317" relation="include">
        </childnode>
        <childnode refid="318" relation="include">
        </childnode>
        <childnode refid="319" relation="include">
        </childnode>
        <childnode refid="320" relation="include">
        </childnode>
        <childnode refid="321" relation="include">
        </childnode>
        <childnode refid="322" relation="include">
        </childnode>
        <childnode refid="323" relation="include">
        </childnode>
        <childnode refid="324" relation="include">
        </childnode>
        <childnode refid="325" relation="include">
        </childnode>
        <childnode refid="326" relation="include">
        </childnode>
        <childnode refid="327" relation="include">
        </childnode>
        <childnode refid="328" relation="include">
        </childnode>
        <childnode refid="329" relation="include">
        </childnode>
        <childnode refid="330" relation="include">
        </childnode>
        <childnode refid="331" relation="include">
        </childnode>
        <childnode refid="332" relation="include">
        </childnode>
        <childnode refid="333" relation="include">
        </childnode>
        <childnode refid="334" relation="include">
        </childnode>
        <childnode refid="335" relation="include">
        </childnode>
        <childnode refid="336" relation="include">
        </childnode>
        <childnode refid="337" relation="include">
        </childnode>
        <childnode refid="338" relation="include">
        </childnode>
        <childnode refid="339" relation="include">
        </childnode>
        <childnode refid="340" relation="include">
        </childnode>
        <childnode refid="341" relation="include">
        </childnode>
        <childnode refid="342" relation="include">
        </childnode>
        <childnode refid="343" relation="include">
        </childnode>
        <childnode refid="344" relation="include">
        </childnode>
        <childnode refid="345" relation="include">
        </childnode>
        <childnode refid="346" relation="include">
        </childnode>
        <childnode refid="347" relation="include">
        </childnode>
        <childnode refid="348" relation="include">
        </childnode>
        <childnode refid="349" relation="include">
        </childnode>
        <childnode refid="350" relation="include">
        </childnode>
        <childnode refid="351" relation="include">
        </childnode>
        <childnode refid="352" relation="include">
        </childnode>
        <childnode refid="353" relation="include">
        </childnode>
        <childnode refid="354" relation="include">
        </childnode>
        <childnode refid="355" relation="include">
        </childnode>
        <childnode refid="356" relation="include">
        </childnode>
        <childnode refid="357" relation="include">
        </childnode>
        <childnode refid="358" relation="include">
        </childnode>
        <childnode refid="359" relation="include">
        </childnode>
        <childnode refid="360" relation="include">
        </childnode>
        <childnode refid="361" relation="include">
        </childnode>
        <childnode refid="362" relation="include">
        </childnode>
        <childnode refid="363" relation="include">
        </childnode>
        <childnode refid="364" relation="include">
        </childnode>
        <childnode refid="365" relation="include">
        </childnode>
        <childnode refid="366" relation="include">
        </childnode>
        <childnode refid="367" relation="include">
        </childnode>
        <childnode refid="368" relation="include">
        </childnode>
        <childnode refid="369" relation="include">
        </childnode>
        <childnode refid="370" relation="include">
        </childnode>
        <childnode refid="371" relation="include">
        </childnode>
        <childnode refid="372" relation="include">
        </childnode>
        <childnode refid="373" relation="include">
        </childnode>
        <childnode refid="375" relation="include">
        </childnode>
        <childnode refid="376" relation="include">
        </childnode>
        <childnode refid="377" relation="include">
        </childnode>
        <childnode refid="378" relation="include">
        </childnode>
        <childnode refid="379" relation="include">
        </childnode>
        <childnode refid="380" relation="include">
        </childnode>
        <childnode refid="381" relation="include">
        </childnode>
        <childnode refid="382" relation="include">
        </childnode>
        <childnode refid="383" relation="include">
        </childnode>
        <childnode refid="384" relation="include">
        </childnode>
        <childnode refid="386" relation="include">
        </childnode>
        <childnode refid="387" relation="include">
        </childnode>
        <childnode refid="388" relation="include">
        </childnode>
        <childnode refid="385" relation="include">
        </childnode>
        <childnode refid="389" relation="include">
        </childnode>
        <childnode refid="390" relation="include">
        </childnode>
        <childnode refid="391" relation="include">
        </childnode>
        <childnode refid="392" relation="include">
        </childnode>
        <childnode refid="393" relation="include">
        </childnode>
        <childnode refid="394" relation="include">
        </childnode>
        <childnode refid="395" relation="include">
        </childnode>
        <childnode refid="396" relation="include">
        </childnode>
        <childnode refid="400" relation="include">
        </childnode>
        <childnode refid="401" relation="include">
        </childnode>
        <childnode refid="402" relation="include">
        </childnode>
        <childnode refid="403" relation="include">
        </childnode>
        <childnode refid="404" relation="include">
        </childnode>
        <childnode refid="398" relation="include">
        </childnode>
        <childnode refid="397" relation="include">
        </childnode>
        <childnode refid="399" relation="include">
        </childnode>
        <childnode refid="405" relation="include">
        </childnode>
        <childnode refid="406" relation="include">
        </childnode>
        <childnode refid="407" relation="include">
        </childnode>
        <childnode refid="408" relation="include">
        </childnode>
        <childnode refid="409" relation="include">
        </childnode>
        <childnode refid="410" relation="include">
        </childnode>
        <childnode refid="411" relation="include">
        </childnode>
        <childnode refid="412" relation="include">
        </childnode>
        <childnode refid="413" relation="include">
        </childnode>
      </node>
      <node id="347">
        <label>/usr/local/include/vtk-9.0/vtkDataArrayRange.h</label>
      </node>
      <node id="268">
        <label>vtk-9.0/vtkTextProperty.h</label>
      </node>
      <node id="315">
        <label>/usr/local/include/vtk-9.0/vtkDataArray.h</label>
      </node>
      <node id="345">
        <label>/usr/local/include/vtk-9.0/vtkCell.h</label>
      </node>
      <node id="314">
        <label>/usr/local/include/vtk-9.0/vtkPoints.h</label>
      </node>
      <node id="282">
        <label>/usr/local/include/vtk-9.0/vtkSystemIncludes.h</label>
      </node>
      <node id="360">
        <label>/usr/local/include/vtk-9.0/vtkTypeList.h</label>
      </node>
      <node id="352">
        <label>/usr/local/include/vtk-9.0/vtkDataArrayAccessor.h</label>
      </node>
      <node id="271">
        <label>vtk-9.0/vtkXMLPolyDataWriter.h</label>
      </node>
      <node id="216">
        <label>fstream</label>
      </node>
      <node id="249">
        <label>vtk-9.0/vtkParametricFunctionSource.h</label>
      </node>
      <node id="329">
        <label>/usr/local/include/vtk-9.0/vtkGenericDataArray.h</label>
      </node>
      <node id="276">
        <label>/usr/local/include/vtk-9.0/vtkHomogeneousTransform.h</label>
      </node>
      <node id="267">
        <label>vtk-9.0/vtkTextMapper.h</label>
      </node>
      <node id="371">
        <label>GL/glu.h</label>
      </node>
      <node id="288">
        <label>/usr/local/include/vtk-9.0/vtkType.h</label>
      </node>
      <node id="375">
        <label>dimension.h</label>
        <link refid="dimension_8h"/>
        <childnode refid="218" relation="include">
        </childnode>
        <childnode refid="226" relation="include">
        </childnode>
        <childnode refid="373" relation="include">
        </childnode>
      </node>
      <node id="406">
        <label>axon.h</label>
        <link refid="axon_8h"/>
        <childnode refid="405" relation="include">
        </childnode>
      </node>
      <node id="308">
        <label>/usr/local/include/vtk-9.0/vtkCommonExecutionModelModule.h</label>
      </node>
      <node id="401">
        <label>synapse.h</label>
        <link refid="synapse_8h"/>
        <childnode refid="374" relation="include">
        </childnode>
        <childnode refid="218" relation="include">
        </childnode>
        <childnode refid="226" relation="include">
        </childnode>
        <childnode refid="391" relation="include">
        </childnode>
      </node>
      <node id="289">
        <label>/usr/local/include/vtk-9.0/vtk_kwiml.h</label>
      </node>
      <node id="412">
        <label>neurotransmitter.h</label>
        <link refid="neurotransmitter_8h"/>
        <childnode refid="374" relation="include">
        </childnode>
        <childnode refid="218" relation="include">
        </childnode>
        <childnode refid="391" relation="include">
        </childnode>
      </node>
      <node id="286">
        <label>/usr/local/include/vtk-9.0/vtkVersionMacros.h</label>
      </node>
      <node id="357">
        <label>/usr/local/include/vtk-9.0/vtkTypeInt32Array.h</label>
      </node>
      <node id="307">
        <label>/usr/local/include/vtk-9.0/vtkAlgorithm.h</label>
      </node>
      <node id="263">
        <label>vtk-9.0/vtkReverseSense.h</label>
      </node>
      <node id="278">
        <label>/usr/local/include/vtk-9.0/vtkObject.h</label>
      </node>
      <node id="393">
        <label>cognitiveoutput.h</label>
        <link refid="cognitiveoutput_8h"/>
        <childnode refid="374" relation="include">
        </childnode>
        <childnode refid="218" relation="include">
        </childnode>
        <childnode refid="391" relation="include">
        </childnode>
      </node>
      <node id="228">
        <label>libcaercpp/libcaer.hpp</label>
      </node>
      <node id="326">
        <label>/usr/local/include/vtk-9.0/vtkObjectFactory.h</label>
      </node>
      <node id="331">
        <label>/usr/local/include/vtk-9.0/vtkIdList.h</label>
      </node>
      <node id="203">
        <label>sys/types.h</label>
      </node>
      <node id="250">
        <label>vtk-9.0/vtkPointData.h</label>
      </node>
      <node id="389">
        <label>node.h</label>
        <link refid="node_8h"/>
        <childnode refid="220" relation="include">
        </childnode>
      </node>
      <node id="246">
        <label>vtk-9.0/vtkCoordinate.h</label>
      </node>
      <node id="348">
        <label>/usr/local/include/vtk-9.0/vtkDataArrayMeta.h</label>
      </node>
      <node id="234">
        <label>string.h</label>
      </node>
      <node id="299">
        <label>typeinfo</label>
      </node>
      <node id="256">
        <label>vtk-9.0/vtkAppendPolyData.h</label>
      </node>
      <node id="364">
        <label>/usr/local/include/vtk-9.0/vtkCellLinks.h</label>
      </node>
      <node id="310">
        <label>/usr/local/include/vtk-9.0/vtkCommonDataModelModule.h</label>
      </node>
      <node id="356">
        <label>tuple</label>
      </node>
      <node id="313">
        <label>/usr/local/include/vtk-9.0/vtkDataObject.h</label>
      </node>
      <node id="232">
        <label>sniffex.h</label>
        <link refid="sniffex_8h"/>
        <childnode refid="233" relation="include">
        </childnode>
        <childnode refid="207" relation="include">
        </childnode>
        <childnode refid="234" relation="include">
        </childnode>
        <childnode refid="208" relation="include">
        </childnode>
        <childnode refid="235" relation="include">
        </childnode>
        <childnode refid="236" relation="include">
        </childnode>
        <childnode refid="203" relation="include">
        </childnode>
        <childnode refid="204" relation="include">
        </childnode>
        <childnode refid="205" relation="include">
        </childnode>
        <childnode refid="206" relation="include">
        </childnode>
      </node>
      <node id="287">
        <label>/usr/local/include/vtk-9.0/vtkIOStream.h</label>
      </node>
      <node id="368">
        <label>Python.h</label>
      </node>
      <node id="402">
        <label>interneuronspace.h</label>
        <link refid="interneuronspace_8h"/>
        <childnode refid="374" relation="include">
        </childnode>
        <childnode refid="218" relation="include">
        </childnode>
        <childnode refid="226" relation="include">
        </childnode>
        <childnode refid="391" relation="include">
        </childnode>
      </node>
      <node id="210">
        <label>unistd.h</label>
      </node>
      <node id="226">
        <label>vector</label>
      </node>
      <node id="334">
        <label>/usr/local/include/vtk-9.0/vtkSmartPointerBase.h</label>
      </node>
      <node id="238">
        <label>vtk-9.0/vtkVersion.h</label>
      </node>
      <node id="373">
        <label>universe.h</label>
        <link refid="universe_8h"/>
        <childnode refid="374" relation="include">
        </childnode>
        <childnode refid="218" relation="include">
        </childnode>
        <childnode refid="220" relation="include">
        </childnode>
        <childnode refid="226" relation="include">
        </childnode>
      </node>
      <node id="337">
        <label>/usr/local/include/vtk-9.0/vtkNew.h</label>
      </node>
      <node id="344">
        <label>/usr/local/include/vtk-9.0/vtkVariantCast.h</label>
      </node>
      <node id="229">
        <label>libcaercpp/events/packetContainer.hpp</label>
      </node>
      <node id="366">
        <label>/usr/local/include/vtk-9.0/vtkPolyDataInternals.h</label>
      </node>
      <node id="266">
        <label>vtk-9.0/vtkTextActor.h</label>
      </node>
      <node id="403">
        <label>membrane.h</label>
        <link refid="membrane_8h"/>
        <childnode refid="218" relation="include">
        </childnode>
        <childnode refid="226" relation="include">
        </childnode>
        <childnode refid="395" relation="include">
        </childnode>
        <childnode refid="384" relation="include">
        </childnode>
      </node>
      <node id="336">
        <label>utility</label>
      </node>
      <node id="380">
        <label>matter.h</label>
        <link refid="matter_8h"/>
        <childnode refid="218" relation="include">
        </childnode>
        <childnode refid="226" relation="include">
        </childnode>
        <childnode refid="373" relation="include">
        </childnode>
      </node>
      <node id="243">
        <label>vtk-9.0/vtkCellData.h</label>
      </node>
      <node id="213">
        <label>array</label>
      </node>
      <node id="245">
        <label>vtk-9.0/vtkContourFilter.h</label>
      </node>
      <node id="223">
        <label>sstream</label>
      </node>
      <node id="305">
        <label>/usr/local/include/vtk-9.0/vtkFiltersGeneralModule.h</label>
      </node>
      <node id="312">
        <label>/usr/local/include/vtk-9.0/vtkDataSet.h</label>
      </node>
      <node id="240">
        <label>vtk-9.0/vtkActor2D.h</label>
      </node>
      <node id="302">
        <label>/usr/local/include/vtk-9.0/vtkMatrix4x4.h</label>
      </node>
      <node id="260">
        <label>vtk-9.0/vtkRenderWindow.h</label>
      </node>
      <node id="269">
        <label>vtk-9.0/vtkUnsignedCharArray.h</label>
      </node>
      <node id="398">
        <label>dendrite.h</label>
        <link refid="dendrite_8h"/>
        <childnode refid="399" relation="include">
        </childnode>
      </node>
      <node id="237">
        <label>vtk-9.0/vtkAutoInit.h</label>
      </node>
      <node id="397">
        <label>dendritebranch.h</label>
        <link refid="dendritebranch_8h"/>
        <childnode refid="398" relation="include">
        </childnode>
      </node>
      <node id="241">
        <label>vtk-9.0/vtkCamera.h</label>
      </node>
      <node id="242">
        <label>vtk-9.0/vtkCellArray.h</label>
      </node>
      <node id="407">
        <label>axonbranch.h</label>
        <link refid="axonbranch_8h"/>
        <childnode refid="406" relation="include">
        </childnode>
      </node>
      <node id="294">
        <label>/usr/local/include/vtk-9.0/vtkWrappingHints.h</label>
      </node>
      <node id="212">
        <label>time.h</label>
      </node>
      <node id="220">
        <label>math.h</label>
      </node>
      <node id="264">
        <label>vtk-9.0/vtkSmartPointer.h</label>
      </node>
      <node id="367">
        <label>cstdlib</label>
      </node>
      <node id="257">
        <label>vtk-9.0/vtkProgrammableSource.h</label>
      </node>
      <node id="400">
        <label>neuroreceptor.h</label>
        <link refid="neuroreceptor_8h"/>
        <childnode refid="396" relation="include">
        </childnode>
      </node>
      <node id="351">
        <label>/usr/local/include/vtk-9.0/vtkDataArrayTupleRange_Generic.h</label>
      </node>
      <node id="300">
        <label>/usr/local/include/vtk-9.0/vtkTimeStamp.h</label>
      </node>
      <node id="395">
        <label>neuron.h</label>
        <link refid="neuron_8h"/>
        <childnode refid="391" relation="include">
        </childnode>
      </node>
      <node id="316">
        <label>/usr/local/include/vtk-9.0/vtkAbstractArray.h</label>
      </node>
      <node id="202">
        <label>sys/time.h</label>
      </node>
      <node id="218">
        <label>iostream</label>
      </node>
      <node id="291">
        <label>/usr/local/include/vtk-9.0/vtkkwiml/int.h</label>
      </node>
      <node id="399">
        <label>soma.h</label>
        <link refid="soma_8h"/>
        <childnode refid="395" relation="include">
        </childnode>
        <childnode refid="384" relation="include">
        </childnode>
      </node>
      <node id="409">
        <label>schwanncell.h</label>
        <link refid="schwanncell_8h"/>
        <childnode refid="218" relation="include">
        </childnode>
        <childnode refid="226" relation="include">
        </childnode>
        <childnode refid="402" relation="include">
        </childnode>
      </node>
      <node id="280">
        <label>/usr/local/include/vtk-9.0/vtkObjectBase.h</label>
      </node>
      <node id="332">
        <label>unordered_map</label>
      </node>
      <node id="235">
        <label>ctype.h</label>
      </node>
      <node id="281">
        <label>/usr/local/include/vtk-9.0/vtkIndent.h</label>
      </node>
      <node id="321">
        <label>climits</label>
      </node>
      <node id="262">
        <label>vtk-9.0/vtkRenderWindowInteractor.h</label>
      </node>
      <node id="258">
        <label>vtk-9.0/vtkProperty.h</label>
      </node>
      <node id="322">
        <label>/usr/local/include/vtk-9.0/vtkVTK_USE_SCALED_SOA_ARRAYS.h</label>
      </node>
      <node id="274">
        <label>/usr/local/include/vtk-9.0/vtkCommonTransformsModule.h</label>
      </node>
      <node id="306">
        <label>/usr/local/include/vtk-9.0/vtkPolyDataAlgorithm.h</label>
      </node>
      <node id="319">
        <label>/usr/local/include/vtk-9.0/vtkUnicodeString.h</label>
      </node>
      <node id="410">
        <label>axonbouton.h</label>
        <link refid="axonbouton_8h"/>
        <childnode refid="407" relation="include">
        </childnode>
      </node>
      <node id="338">
        <label>/usr/local/include/vtk-9.0/vtkTypeTraits.h</label>
      </node>
      <node id="374">
        <label>chrono</label>
      </node>
      <node id="285">
        <label>/usr/local/include/vtk-9.0/vtkConfigure.h</label>
      </node>
      <node id="325">
        <label>/usr/local/include/vtk-9.0/vtkBuffer.h</label>
      </node>
      <node id="283">
        <label>/usr/local/include/vtk-9.0/vtkWin32Header.h</label>
      </node>
      <node id="230">
        <label>csignal</label>
      </node>
      <node id="259">
        <label>vtk-9.0/vtkProperty2D.h</label>
      </node>
      <node id="411">
        <label>synapticvesicle.h</label>
        <link refid="synapticvesicle_8h"/>
        <childnode refid="374" relation="include">
        </childnode>
        <childnode refid="218" relation="include">
        </childnode>
        <childnode refid="410" relation="include">
        </childnode>
      </node>
      <node id="204">
        <label>sys/socket.h</label>
      </node>
      <node id="396">
        <label>dendritecleft.h</label>
        <link refid="dendritecleft_8h"/>
        <childnode refid="397" relation="include">
        </childnode>
      </node>
      <node id="270">
        <label>vtk-9.0/vtkVertexGlyphFilter.h</label>
      </node>
      <node id="377">
        <label>elementaryforce.h</label>
        <link refid="elementaryforce_8h"/>
        <childnode refid="218" relation="include">
        </childnode>
        <childnode refid="226" relation="include">
        </childnode>
        <childnode refid="373" relation="include">
        </childnode>
      </node>
      <node id="225">
        <label>thread</label>
      </node>
      <node id="388">
        <label>line.h</label>
        <link refid="line_8h"/>
        <childnode refid="220" relation="include">
        </childnode>
        <childnode refid="218" relation="include">
        </childnode>
        <childnode refid="373" relation="include">
        </childnode>
      </node>
      <node id="295">
        <label>/usr/local/include/vtk-9.0/vtkOStreamWrapper.h</label>
      </node>
      <node id="255">
        <label>vtk-9.0/vtkPolyDataMapper2D.h</label>
      </node>
      <node id="320">
        <label>/usr/local/include/vtk-9.0/vtkVariantInlineOperators.h</label>
      </node>
      <node id="298">
        <label>type_traits</label>
      </node>
      <node id="248">
        <label>vtk-9.0/vtkMath.h</label>
      </node>
      <node id="361">
        <label>/usr/local/include/vtk-9.0/vtkTypeListMacros.h</label>
      </node>
      <node id="328">
        <label>algorithm</label>
      </node>
      <node id="227">
        <label>libcaercpp/devices/dynapse.hpp</label>
      </node>
      <node id="273">
        <label>/usr/local/include/vtk-9.0/vtkTransform.h</label>
      </node>
      <node id="370">
        <label>GL/gl.h</label>
      </node>
      <node id="207">
        <label>stdio.h</label>
      </node>
      <node id="317">
        <label>/usr/local/include/vtk-9.0/vtkVariant.h</label>
      </node>
      <node id="214">
        <label>cstring</label>
      </node>
      <node id="365">
        <label>/usr/local/include/vtk-9.0/vtkAbstractCellLinks.h</label>
      </node>
      <node id="363">
        <label>initializer_list</label>
      </node>
      <node id="404">
        <label>membranechannel.h</label>
        <link refid="membranechannel_8h"/>
        <childnode refid="374" relation="include">
        </childnode>
        <childnode refid="218" relation="include">
        </childnode>
        <childnode refid="403" relation="include">
        </childnode>
      </node>
      <node id="381">
        <label>monomer.h</label>
        <link refid="monomer_8h"/>
        <childnode refid="218" relation="include">
        </childnode>
        <childnode refid="226" relation="include">
        </childnode>
        <childnode refid="373" relation="include">
        </childnode>
      </node>
      <node id="341">
        <label>/usr/local/include/vtk-9.0/vtkMath.h</label>
      </node>
      <node id="304">
        <label>/usr/local/include/vtk-9.0/vtkTransformPolyDataFilter.h</label>
      </node>
      <node id="292">
        <label>inttypes.h</label>
      </node>
      <node id="323">
        <label>/usr/local/include/vtk-9.0/vtkCellArray.h</label>
      </node>
      <node id="333">
        <label>/usr/local/include/vtk-9.0/vtkSmartPointer.h</label>
      </node>
      <node id="390">
        <label>apptimer.h</label>
        <link refid="apptimer_8h"/>
        <childnode refid="218" relation="include">
        </childnode>
        <childnode refid="373" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="class_update_all_command" prot="public">UpdateAllCommand</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_brain_harmonics_8cc_1a5abc2fe5dd32fab087839bf8b005e6c9" prot="public" static="no">
        <name>DEFAULTBIASES</name>
        <initializer>&quot;data/defaultbiases_values.txt&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>&lt; For array in CRC-32 call &lt; For handling strings &lt; For byte handling in CRC-32 &lt; For reading files &lt; Formatting output to console &lt; For output to console &lt; For open and closed maps in A* &lt; For Sine, Cosine, Power, Fabs &amp; Sqrt functions &lt; For CRC-32 &lt; For assigning priority queue in A* &lt; For stringstream input from console &lt; For handling strings &lt; For thread handling &lt; To use vectors, which automatically handle resizing, as arrays to keep track of instances </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="57" column="9" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_brain_harmonics_8cc_1a0146dd22f0f9d4398188379a2bcb8d32" prot="public" static="no">
        <name>LOWPOWERBIASES</name>
        <initializer>&quot;data/lowpowerbiases_values.txt&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="58" column="9" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_brain_harmonics_8cc_1ad25fb949974c3ffe51bb4a887ea0aedc" prot="public" static="no">
        <name>DEBUG_PROGRAM</name>
        <initializer>true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>&lt; <ref refid="class_neuron" kindref="compound">Neuron</ref> container for other neuron components &lt; <ref refid="class_synapse" kindref="compound">Synapse</ref>, area of stimulus transmission/reception &lt; <ref refid="class_dendrite" kindref="compound">Dendrite</ref>, pre-Soma component of a neuron &lt; <ref refid="class_dendrite" kindref="compound">Dendrite</ref> branch, division/join of dendrites &lt; <ref refid="class_soma" kindref="compound">Soma</ref>, component of a neuron &lt; <ref refid="class_axon" kindref="compound">Axon</ref> Hillock, component of <ref refid="class_soma" kindref="compound">Soma</ref> &lt; <ref refid="class_axon" kindref="compound">Axon</ref>, connected to <ref refid="class_axon" kindref="compound">Axon</ref> Hillock &lt; <ref refid="class_axon" kindref="compound">Axon</ref> branch, division/join of <ref refid="class_axon" kindref="compound">Axon</ref> &lt; <ref refid="class_axon" kindref="compound">Axon</ref> synaptic cleft, output area of neuron &lt; Synaptic vesicle, container of neurotransmitters </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="229" column="9" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_brain_harmonics_8cc_1a26769957ec1a2beaf223f33b66ee64ab" prot="public" static="no">
        <name>INVALID_SOCKET</name>
        <initializer>-1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="233" column="9" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_brain_harmonics_8cc_1a633b0396ff93d336a088412a190a5072" prot="public" static="no">
        <name>SOCKET_ERROR</name>
        <initializer>-1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="237" column="9" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="237" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_brain_harmonics_8cc_1a120b3c12a694462fcedc15e429a53bd6" prot="public" static="no">
        <name>SOCKET_PORT</name>
        <initializer>9876</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="241" column="9" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="241" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_brain_harmonics_8cc_1a8cccdb3b239ce7cf58e9781af267072b" prot="public" static="no">
        <name>SOCKET_ADDRESS</name>
        <initializer>&quot;192.168.42.56&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="245" column="9" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="245" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_brain_harmonics_8cc_1a6801baa546c6112d19eb095111d24720" prot="public" static="no">
        <name>GRAVITY</name>
        <initializer>6.67384e-11;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="262" column="9" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="262" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_brain_harmonics_8cc_1a6ce111e58fd1f4622e6a322cefd19b26" prot="public" static="no" mutable="no">
        <type>vtkSmartPointer&lt; vtkRenderWindow &gt;</type>
        <definition>vtkSmartPointer&lt;vtkRenderWindow&gt; render_window</definition>
        <argsstring></argsstring>
        <name>render_window</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="110" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_brain_harmonics_8cc_1a65b7a900454637a30df23b1044e07e07" prot="public" static="no" mutable="no">
        <type>vtkSmartPointer&lt; vtkRenderWindowInteractor &gt;</type>
        <definition>vtkSmartPointer&lt;vtkRenderWindowInteractor&gt; render_window_interactor</definition>
        <argsstring></argsstring>
        <name>render_window_interactor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="111" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_brain_harmonics_8cc_1a459726c3dbd394d957c5e0e8fad43f71" prot="public" static="no" mutable="no">
        <type>vtkSmartPointer&lt; vtkPoints &gt;</type>
        <definition>vtkSmartPointer&lt;vtkPoints&gt; define_points</definition>
        <argsstring></argsstring>
        <name>define_points</name>
        <initializer>= vtkSmartPointer&lt;vtkPoints&gt;::New()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="113" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="113" bodyend="-1"/>
        <referencedby refid="class_update_all_command_1aa836cd5d538016289656d8118da879c5" compoundref="_brain_harmonics_8cc" startline="943" endline="1159">UpdateAllCommand::Execute</referencedby>
      </memberdef>
      <memberdef kind="variable" id="_brain_harmonics_8cc_1aa97d4b3a68fbfaea550fe20234905b66" prot="public" static="no" mutable="no">
        <type>std::vector&lt; vtkSmartPointer&lt; vtkCellArray &gt; &gt;</type>
        <definition>std::vector&lt;vtkSmartPointer&lt;vtkCellArray&gt; &gt; define_cellarrays</definition>
        <argsstring></argsstring>
        <name>define_cellarrays</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="114" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="114" bodyend="-1"/>
        <referencedby refid="class_update_all_command_1aa836cd5d538016289656d8118da879c5" compoundref="_brain_harmonics_8cc" startline="943" endline="1159">UpdateAllCommand::Execute</referencedby>
      </memberdef>
      <memberdef kind="variable" id="_brain_harmonics_8cc_1a529fb94c7498f38828c4955476e55520" prot="public" static="no" mutable="no">
        <type>std::vector&lt; vtkSmartPointer&lt; vtkPolyData &gt; &gt;</type>
        <definition>std::vector&lt;vtkSmartPointer&lt;vtkPolyData&gt; &gt; define_polydata</definition>
        <argsstring></argsstring>
        <name>define_polydata</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="115" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="115" bodyend="-1"/>
        <referencedby refid="class_update_all_command_1aa836cd5d538016289656d8118da879c5" compoundref="_brain_harmonics_8cc" startline="943" endline="1159">UpdateAllCommand::Execute</referencedby>
      </memberdef>
      <memberdef kind="variable" id="_brain_harmonics_8cc_1aec36b51ac72634d7a58846776cb61d43" prot="public" static="no" mutable="no">
        <type>std::vector&lt; vtkSmartPointer&lt; vtkSurfaceReconstructionFilter &gt; &gt;</type>
        <definition>std::vector&lt;vtkSmartPointer&lt;vtkSurfaceReconstructionFilter&gt; &gt; define_surfaces</definition>
        <argsstring></argsstring>
        <name>define_surfaces</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="117" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="117" bodyend="-1"/>
        <referencedby refid="class_update_all_command_1aa836cd5d538016289656d8118da879c5" compoundref="_brain_harmonics_8cc" startline="943" endline="1159">UpdateAllCommand::Execute</referencedby>
      </memberdef>
      <memberdef kind="variable" id="_brain_harmonics_8cc_1a60b4bc1ad91584494c1f04f858e34513" prot="public" static="no" mutable="no">
        <type>std::vector&lt; vtkSmartPointer&lt; vtkContourFilter &gt; &gt;</type>
        <definition>std::vector&lt;vtkSmartPointer&lt;vtkContourFilter&gt; &gt; define_contourfilters</definition>
        <argsstring></argsstring>
        <name>define_contourfilters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="118" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="118" bodyend="-1"/>
        <referencedby refid="class_update_all_command_1aa836cd5d538016289656d8118da879c5" compoundref="_brain_harmonics_8cc" startline="943" endline="1159">UpdateAllCommand::Execute</referencedby>
      </memberdef>
      <memberdef kind="variable" id="_brain_harmonics_8cc_1a3f46d8452260ed4fbbdadf8ea634d866" prot="public" static="no" mutable="no">
        <type>std::vector&lt; vtkSmartPointer&lt; vtkReverseSense &gt; &gt;</type>
        <definition>std::vector&lt;vtkSmartPointer&lt;vtkReverseSense&gt; &gt; define_reversals</definition>
        <argsstring></argsstring>
        <name>define_reversals</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="119" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="119" bodyend="-1"/>
        <referencedby refid="class_update_all_command_1aa836cd5d538016289656d8118da879c5" compoundref="_brain_harmonics_8cc" startline="943" endline="1159">UpdateAllCommand::Execute</referencedby>
      </memberdef>
      <memberdef kind="variable" id="_brain_harmonics_8cc_1a67ee26302d766e5112a5f935e33a85c6" prot="public" static="no" mutable="no">
        <type>std::vector&lt; vtkSmartPointer&lt; vtkPolyDataMapper &gt; &gt;</type>
        <definition>std::vector&lt;vtkSmartPointer&lt;vtkPolyDataMapper&gt; &gt; define_datamappers</definition>
        <argsstring></argsstring>
        <name>define_datamappers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="120" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_brain_harmonics_8cc_1a804c9adf98d06fdd2f125e84deb75433" prot="public" static="no" mutable="no">
        <type>std::vector&lt; vtkSmartPointer&lt; vtkPolyDataMapper2D &gt; &gt;</type>
        <definition>std::vector&lt;vtkSmartPointer&lt;vtkPolyDataMapper2D&gt; &gt; define_datamappers2D</definition>
        <argsstring></argsstring>
        <name>define_datamappers2D</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="121" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_brain_harmonics_8cc_1a564cb339c12906f6db5995be211dcda2" prot="public" static="no" mutable="no">
        <type>std::vector&lt; vtkSmartPointer&lt; vtkActor &gt; &gt;</type>
        <definition>std::vector&lt;vtkSmartPointer&lt;vtkActor&gt; &gt; define_actors</definition>
        <argsstring></argsstring>
        <name>define_actors</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="122" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_brain_harmonics_8cc_1a06728597be70303b9f19f653a5dc90ee" prot="public" static="no" mutable="no">
        <type>std::vector&lt; vtkSmartPointer&lt; vtkActor2D &gt; &gt;</type>
        <definition>std::vector&lt;vtkSmartPointer&lt;vtkActor2D&gt; &gt; define_actors2D</definition>
        <argsstring></argsstring>
        <name>define_actors2D</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="123" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_brain_harmonics_8cc_1a4929783757e2d051945177d626a74213" prot="public" static="no" mutable="no">
        <type>std::vector&lt; vtkSmartPointer&lt; vtkTextActor &gt; &gt;</type>
        <definition>std::vector&lt;vtkSmartPointer&lt;vtkTextActor&gt; &gt; define_textactors</definition>
        <argsstring></argsstring>
        <name>define_textactors</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="124" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_brain_harmonics_8cc_1aab0f6cfd03b167486b3a0ebbb68922be" prot="public" static="no" mutable="no">
        <type>std::vector&lt; vtkSmartPointer&lt; vtkRenderer &gt; &gt;</type>
        <definition>std::vector&lt;vtkSmartPointer&lt;vtkRenderer&gt; &gt; define_renderers</definition>
        <argsstring></argsstring>
        <name>define_renderers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="126" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_brain_harmonics_8cc_1a81f74579a7b9471085578a377b3c1525" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int static_points_counter</definition>
        <argsstring></argsstring>
        <name>static_points_counter</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="130" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_brain_harmonics_8cc_1a3ef1f27168082fed53b34b6781b7fef1" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int static_polygons_counter</definition>
        <argsstring></argsstring>
        <name>static_polygons_counter</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="131" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_brain_harmonics_8cc_1a0ac21544be2eca2667c5acc784111848" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int static_polydata_counter</definition>
        <argsstring></argsstring>
        <name>static_polydata_counter</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="132" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="132" bodyend="-1"/>
        <referencedby refid="class_update_all_command_1aa836cd5d538016289656d8118da879c5" compoundref="_brain_harmonics_8cc" startline="943" endline="1159">UpdateAllCommand::Execute</referencedby>
      </memberdef>
      <memberdef kind="variable" id="_brain_harmonics_8cc_1a3f51384611b8ff0bcedef8dc6f27bbc8" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int static_cellarrays_counter</definition>
        <argsstring></argsstring>
        <name>static_cellarrays_counter</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="133" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="133" bodyend="-1"/>
        <referencedby refid="class_update_all_command_1aa836cd5d538016289656d8118da879c5" compoundref="_brain_harmonics_8cc" startline="943" endline="1159">UpdateAllCommand::Execute</referencedby>
      </memberdef>
      <memberdef kind="variable" id="_brain_harmonics_8cc_1acdcbc10d39db69593dfc42972b200e46" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int static_surfaces_counter</definition>
        <argsstring></argsstring>
        <name>static_surfaces_counter</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="134" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="134" bodyend="-1"/>
        <referencedby refid="class_update_all_command_1aa836cd5d538016289656d8118da879c5" compoundref="_brain_harmonics_8cc" startline="943" endline="1159">UpdateAllCommand::Execute</referencedby>
      </memberdef>
      <memberdef kind="variable" id="_brain_harmonics_8cc_1af896e11b42f684e4fadc0d4a2826538a" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int static_contourfilter_counter</definition>
        <argsstring></argsstring>
        <name>static_contourfilter_counter</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="135" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="135" bodyend="-1"/>
        <referencedby refid="class_update_all_command_1aa836cd5d538016289656d8118da879c5" compoundref="_brain_harmonics_8cc" startline="943" endline="1159">UpdateAllCommand::Execute</referencedby>
      </memberdef>
      <memberdef kind="variable" id="_brain_harmonics_8cc_1a4062a4c3764de7ed239d33608ca291ae" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int static_reversals_counter</definition>
        <argsstring></argsstring>
        <name>static_reversals_counter</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="136" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="136" bodyend="-1"/>
        <referencedby refid="class_update_all_command_1aa836cd5d538016289656d8118da879c5" compoundref="_brain_harmonics_8cc" startline="943" endline="1159">UpdateAllCommand::Execute</referencedby>
      </memberdef>
      <memberdef kind="variable" id="_brain_harmonics_8cc_1ab96b88b97440e7d703e0ac1774115227" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int static_datamappers_counter</definition>
        <argsstring></argsstring>
        <name>static_datamappers_counter</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="137" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="137" bodyend="-1"/>
        <referencedby refid="class_update_all_command_1aa836cd5d538016289656d8118da879c5" compoundref="_brain_harmonics_8cc" startline="943" endline="1159">UpdateAllCommand::Execute</referencedby>
      </memberdef>
      <memberdef kind="variable" id="_brain_harmonics_8cc_1a3e27beef07882d4684ad6d35239b7a60" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int static_datamappers2D_counter</definition>
        <argsstring></argsstring>
        <name>static_datamappers2D_counter</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="138" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_brain_harmonics_8cc_1ad53e9035f7facd9c99c57107d9f84ac6" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int static_actors_counter</definition>
        <argsstring></argsstring>
        <name>static_actors_counter</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="139" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="139" bodyend="-1"/>
        <referencedby refid="class_update_all_command_1aa836cd5d538016289656d8118da879c5" compoundref="_brain_harmonics_8cc" startline="943" endline="1159">UpdateAllCommand::Execute</referencedby>
      </memberdef>
      <memberdef kind="variable" id="_brain_harmonics_8cc_1a3fe403ad89b282d8d1b8fa92bf05f42e" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int static_actors2D_counter</definition>
        <argsstring></argsstring>
        <name>static_actors2D_counter</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="140" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_brain_harmonics_8cc_1aad3d1808a6ab9363f0430c1e9650324d" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int static_renderers_counter</definition>
        <argsstring></argsstring>
        <name>static_renderers_counter</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="141" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="141" bodyend="-1"/>
        <referencedby refid="class_update_all_command_1aa836cd5d538016289656d8118da879c5" compoundref="_brain_harmonics_8cc" startline="943" endline="1159">UpdateAllCommand::Execute</referencedby>
      </memberdef>
      <memberdef kind="variable" id="_brain_harmonics_8cc_1adf365e8712584a5f83a2ae582e8a9fe3" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int dynamic_points_counter</definition>
        <argsstring></argsstring>
        <name>dynamic_points_counter</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="143" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_brain_harmonics_8cc_1ae699a3513aa90202fa4779bacdf343da" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int dynamic_polygons_counter</definition>
        <argsstring></argsstring>
        <name>dynamic_polygons_counter</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="144" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_brain_harmonics_8cc_1a8a93118d63dacb49915b567fa41319a7" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int dynamic_polydata_counter</definition>
        <argsstring></argsstring>
        <name>dynamic_polydata_counter</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="145" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="145" bodyend="-1"/>
        <referencedby refid="class_update_all_command_1aa836cd5d538016289656d8118da879c5" compoundref="_brain_harmonics_8cc" startline="943" endline="1159">UpdateAllCommand::Execute</referencedby>
      </memberdef>
      <memberdef kind="variable" id="_brain_harmonics_8cc_1ac86282f96c64009746f9517e7f9d613a" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int dynamic_cellarrays_counter</definition>
        <argsstring></argsstring>
        <name>dynamic_cellarrays_counter</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="146" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_brain_harmonics_8cc_1a32fdb8886e50e5a48cb78a26e9cf846d" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int dynamic_surfaces_counter</definition>
        <argsstring></argsstring>
        <name>dynamic_surfaces_counter</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="147" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="147" bodyend="-1"/>
        <referencedby refid="class_update_all_command_1aa836cd5d538016289656d8118da879c5" compoundref="_brain_harmonics_8cc" startline="943" endline="1159">UpdateAllCommand::Execute</referencedby>
      </memberdef>
      <memberdef kind="variable" id="_brain_harmonics_8cc_1a4d42762d2c2ec0fe02455bab8d3cf4c9" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int dynamic_contourfilter_counter</definition>
        <argsstring></argsstring>
        <name>dynamic_contourfilter_counter</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="148" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="148" bodyend="-1"/>
        <referencedby refid="class_update_all_command_1aa836cd5d538016289656d8118da879c5" compoundref="_brain_harmonics_8cc" startline="943" endline="1159">UpdateAllCommand::Execute</referencedby>
      </memberdef>
      <memberdef kind="variable" id="_brain_harmonics_8cc_1a7e0e7dc174f686fe7ec2c1c10c33a5b7" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int dynamic_reversals_counter</definition>
        <argsstring></argsstring>
        <name>dynamic_reversals_counter</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="149" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="149" bodyend="-1"/>
        <referencedby refid="class_update_all_command_1aa836cd5d538016289656d8118da879c5" compoundref="_brain_harmonics_8cc" startline="943" endline="1159">UpdateAllCommand::Execute</referencedby>
      </memberdef>
      <memberdef kind="variable" id="_brain_harmonics_8cc_1ac11e052aaba6bcf48f760388d655dd11" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int dynamic_datamappers_counter</definition>
        <argsstring></argsstring>
        <name>dynamic_datamappers_counter</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="150" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_brain_harmonics_8cc_1aafef3c73d5155f89a18f452d92f4e8a3" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int dynamic_datamappers2D_counter</definition>
        <argsstring></argsstring>
        <name>dynamic_datamappers2D_counter</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="151" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_brain_harmonics_8cc_1a7d304e5a06130656fd9f36a54079bea4" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int dynamic_actors_counter</definition>
        <argsstring></argsstring>
        <name>dynamic_actors_counter</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="152" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_brain_harmonics_8cc_1afabdd4a073eb734b7610de6f1769c050" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int dynamic_actors2D_counter</definition>
        <argsstring></argsstring>
        <name>dynamic_actors2D_counter</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="153" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_brain_harmonics_8cc_1a295208b91ea89b7e23a14a2d431f4b33" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int dynamic_renderers_counter</definition>
        <argsstring></argsstring>
        <name>dynamic_renderers_counter</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="154" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_brain_harmonics_8cc_1a602d3f70549216866d35be56a17fa06e" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_universe" kindref="compound">Universe</ref> * &gt;</type>
        <definition>std::vector&lt;Universe*&gt; universe_list</definition>
        <argsstring></argsstring>
        <name>universe_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>&lt; Python interpreter &lt; Top of the tree, begin with <ref refid="class_universe" kindref="compound">Universe</ref> class &lt; Add Dimensions for spatial identification &lt; Materials are a combination of <ref refid="class_matter" kindref="compound">Matter</ref> &lt; Materials can be formed into multiDimensional shapes &lt; Fundamental spatial description &lt; Interim function describing time before inclusion as <ref refid="class_dimension" kindref="compound">Dimension</ref> Top of the tree, begin with <ref refid="class_universe" kindref="compound">Universe</ref> class </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="200" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="200" bodyend="-1"/>
        <referencedby refid="class_update_all_command_1aa836cd5d538016289656d8118da879c5" compoundref="_brain_harmonics_8cc" startline="943" endline="1159">UpdateAllCommand::Execute</referencedby>
      </memberdef>
      <memberdef kind="variable" id="_brain_harmonics_8cc_1af414029bac33d3b71ad5622dc83149d6" prot="public" static="no" mutable="no">
        <type>struct caer_dynapse_info</type>
        <definition>struct caer_dynapse_info dynapse_info</definition>
        <argsstring></argsstring>
        <name>dynapse_info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="200" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="265" bodyend="-1"/>
        <referencedby refid="_brain_harmonics_8cc_1aefff80cf47ae6c975b4aed196c12d92a" compoundref="_brain_harmonics_8cc" startline="785" endline="833">ClearDynapse</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_brain_harmonics_8cc_1aa072a4b02405a5306cadd819b01e3cee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>VTK_MODULE_INIT</definition>
        <argsstring>(vtkRenderingOpenGL2)</argsstring>
        <name>VTK_MODULE_INIT</name>
        <param>
          <type>vtkRenderingOpenGL2</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_brain_harmonics_8cc_1a0887c3f67ba4e219d084c8d050597655" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>VTK_MODULE_INIT</definition>
        <argsstring>(vtkRenderingFreeType)</argsstring>
        <name>VTK_MODULE_INIT</name>
        <param>
          <type>vtkRenderingFreeType</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_brain_harmonics_8cc_1a80dd3a08d1ff10381e3ef1ca1231f4b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>VTK_MODULE_INIT</definition>
        <argsstring>(vtkInteractionStyle)</argsstring>
        <name>VTK_MODULE_INIT</name>
        <param>
          <type>vtkInteractionStyle</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_brain_harmonics_8cc_1a822a13cf5274e0650ca477e82b16605c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vtkSmartPointer&lt; vtkPolyData &gt;</type>
        <definition>vtkSmartPointer&lt; vtkPolyData &gt; TransformBack</definition>
        <argsstring>(vtkSmartPointer&lt; vtkPoints &gt; pt, vtkSmartPointer&lt; vtkPolyData &gt; pd)</argsstring>
        <name>TransformBack</name>
        <param>
          <type>vtkSmartPointer&lt; vtkPoints &gt;</type>
          <declname>pt</declname>
        </param>
        <param>
          <type>vtkSmartPointer&lt; vtkPolyData &gt;</type>
          <declname>pd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="156" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="3349" bodyend="3399"/>
      </memberdef>
      <memberdef kind="function" id="_brain_harmonics_8cc_1a750b53c1f2b32db320643808acfdd150" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::atomic_bool</type>
        <definition>static std::atomic_bool globalShutdown</definition>
        <argsstring>(false)</argsstring>
        <name>globalShutdown</name>
        <param>
          <type>false</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="268" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_brain_harmonics_8cc_1a36cc519845200149cde840d403609023" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="glad_8h_1a950fc91edb4504f62f1c577bf4727c29" kindref="member">void</ref></type>
        <definition>static void globalShutdownSignalHandler</definition>
        <argsstring>(int signal)</argsstring>
        <name>globalShutdownSignalHandler</name>
        <param>
          <type>int</type>
          <declname>signal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="270" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="270" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="_brain_harmonics_8cc_1ac72744f7bdb5df7bb5088e5260589486" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mshandling</definition>
        <argsstring>(std::vector&lt; std::string &gt; *m_messages, bool m_response, int m_ok, int m_fail)</argsstring>
        <name>mshandling</name>
        <param>
          <type>std::vector&lt; <ref refid="glad_8h_1ae84541b4f3d8e1ea24ec0f466a8c568b" kindref="member">std::string</ref> &gt; *</type>
          <declname>m_messages</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>m_response</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m_ok</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m_fail</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="277" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="277" bodyend="292"/>
        <references refid="_brain_harmonics_8cc_1ad25fb949974c3ffe51bb4a887ea0aedc" compoundref="_brain_harmonics_8cc" startline="229">DEBUG_PROGRAM</references>
      </memberdef>
      <memberdef kind="function" id="_brain_harmonics_8cc_1a5b7bc303552f00bc26a7b5bf962f3376" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_universe" kindref="compound">Universe</ref> * &gt;</type>
        <definition>std::vector&lt;Universe*&gt; CreateUniverse</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, std::vector&lt; Universe *&gt; *toAddto)</argsstring>
        <name>CreateUniverse</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_universe" kindref="compound">Universe</ref> *&gt; *</type>
          <declname>toAddto</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>&lt; Defined energy level of <ref refid="class_universe" kindref="compound">Universe</ref> <linebreak/>
<linebreak/>
 &lt; Create instance of <ref refid="class_universe" kindref="compound">Universe</ref> from <ref refid="class_universe" kindref="compound">Universe</ref> class <linebreak/>
 &lt; Set an energy level and attempt to maintain physics laws by keeping the total in the <ref refid="class_universe" kindref="compound">Universe</ref> the same. Uses the maximum value for double. Levels of abstraction used to cater for environment limitations </para>        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="295" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="295" bodyend="311"/>
        <references refid="class_universe_1a868250e67d0fcb2483aa8bdd73c40a02" compoundref="universe_8cc" startline="35" endline="38">Universe::SetEnergy</references>
        <references refid="class_universe_1a64ee5a2c7e86c56fa426acb750438ce9" compoundref="universe_8cc" startline="481" endline="598">Universe::Update</references>
      </memberdef>
      <memberdef kind="function" id="_brain_harmonics_8cc_1a9b04070a3ed092a2de7fd1496edb94ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CompareSwapElementaryParticle</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, std::vector&lt; ElementaryParticle *&gt; &amp;origin, int l_origin_Swap, int l_origin_Candidate1, int l_origin_Candidate2)</argsstring>
        <name>CompareSwapElementaryParticle</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_elementary_particle" kindref="compound">ElementaryParticle</ref> *&gt; &amp;</type>
          <declname>origin</declname>
        </param>
        <param>
          <type>int</type>
          <declname>l_origin_Swap</declname>
        </param>
        <param>
          <type>int</type>
          <declname>l_origin_Candidate1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>l_origin_Candidate2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="524" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="524" bodyend="544"/>
      </memberdef>
      <memberdef kind="function" id="_brain_harmonics_8cc_1ad9e8231d206ab9486cd74390d97e12fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int DistanceBetweenNodes</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, std::vector&lt; Point &gt; *nodesQuery, std::vector&lt; int &gt; *nodes_list, int nodesDimensions, double desired_distance)</argsstring>
        <name>DistanceBetweenNodes</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_point" kindref="compound">Point</ref> &gt; *</type>
          <declname>nodesQuery</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; *</type>
          <declname>nodes_list</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nodesDimensions</declname>
        </param>
        <param>
          <type>double</type>
          <declname>desired_distance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="546" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="546" bodyend="657"/>
        <references refid="universe_8h_1ac5a945020d3528355cda82d383676736" compoundref="universe_8h" startline="23">RAD2DEG</references>
        <references refid="universe_8h_1af7e8592d0a634bd3642e9fd508ea8022" compoundref="universe_8h" startline="19">DEG2RAD</references>
      </memberdef>
      <memberdef kind="function" id="_brain_harmonics_8cc_1ac0bef70f5c895e9fe4271808d3f87a96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool compare_swapSynapse</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, std::vector&lt; Synapse *&gt; origin, int l_origin_Swap, int l_origin_Candidate1, int l_origin_Candidate2)</argsstring>
        <name>compare_swapSynapse</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_synapse" kindref="compound">Synapse</ref> *&gt;</type>
          <declname>origin</declname>
        </param>
        <param>
          <type>int</type>
          <declname>l_origin_Swap</declname>
        </param>
        <param>
          <type>int</type>
          <declname>l_origin_Candidate1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>l_origin_Candidate2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="660" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="660" bodyend="680"/>
      </memberdef>
      <memberdef kind="function" id="_brain_harmonics_8cc_1a5611d454c4206879b20ed7a094a223b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool analyseStream</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, CognitiveNetwork *cognitive_network, std::vector&lt; Neuron *&gt; neuron_list, std::vector&lt; Point *&gt; aPoint, int start_point, int end_point, int stepPoint, int neural_sequence)</argsstring>
        <name>analyseStream</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
          <declname>cognitive_network</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_neuron" kindref="compound">Neuron</ref> *&gt;</type>
          <declname>neuron_list</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_point" kindref="compound">Point</ref> *&gt;</type>
          <declname>aPoint</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start_point</declname>
        </param>
        <param>
          <type>int</type>
          <declname>end_point</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stepPoint</declname>
        </param>
        <param>
          <type>int</type>
          <declname>neural_sequence</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="683" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="683" bodyend="744"/>
      </memberdef>
      <memberdef kind="function" id="_brain_harmonics_8cc_1ac9572b51d93c224b7db42a9e06854242" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="glad_8h_1a950fc91edb4504f62f1c577bf4727c29" kindref="member">void</ref></type>
        <definition>void ClearDimensionSelection</definition>
        <argsstring>(std::vector&lt; int &gt; *dimension_list)</argsstring>
        <name>ClearDimensionSelection</name>
        <param>
          <type>std::vector&lt; int &gt; *</type>
          <declname>dimension_list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="747" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="747" bodyend="750"/>
      </memberdef>
      <memberdef kind="function" id="_brain_harmonics_8cc_1ab8cdde3a90c31c1e2f30432b507359c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="glad_8h_1a950fc91edb4504f62f1c577bf4727c29" kindref="member">void</ref></type>
        <definition>void SelectDimension</definition>
        <argsstring>(const int PossibleDimensions[10], std::vector&lt; int &gt; *dimension_list, int whichDimension)</argsstring>
        <name>SelectDimension</name>
        <param>
          <type>const int</type>
          <declname>PossibleDimensions</declname>
          <array>[10]</array>
        </param>
        <param>
          <type>std::vector&lt; int &gt; *</type>
          <declname>dimension_list</declname>
        </param>
        <param>
          <type>int</type>
          <declname>whichDimension</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="752" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="752" bodyend="766"/>
        <referencedby refid="_brain_harmonics_8cc_1aeab5d0ce3757048194ec88e39b7fa82b" compoundref="_brain_harmonics_8cc" startline="768" endline="782">SelectMultiDimensions</referencedby>
      </memberdef>
      <memberdef kind="function" id="_brain_harmonics_8cc_1aeab5d0ce3757048194ec88e39b7fa82b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="glad_8h_1a950fc91edb4504f62f1c577bf4727c29" kindref="member">void</ref></type>
        <definition>void SelectMultiDimensions</definition>
        <argsstring>(const int PossibleDimensions[10], std::vector&lt; int &gt; *dimension_list, int how_manyDimensions)</argsstring>
        <name>SelectMultiDimensions</name>
        <param>
          <type>const int</type>
          <declname>PossibleDimensions</declname>
          <array>[10]</array>
        </param>
        <param>
          <type>std::vector&lt; int &gt; *</type>
          <declname>dimension_list</declname>
        </param>
        <param>
          <type>int</type>
          <declname>how_manyDimensions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="768" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="768" bodyend="782"/>
        <references refid="_brain_harmonics_8cc_1ab8cdde3a90c31c1e2f30432b507359c1" compoundref="_brain_harmonics_8cc" startline="752" endline="766">SelectDimension</references>
      </memberdef>
      <memberdef kind="function" id="_brain_harmonics_8cc_1aefff80cf47ae6c975b4aed196c12d92a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ClearDynapse</definition>
        <argsstring>(caerDeviceHandle *usb_handle)</argsstring>
        <name>ClearDynapse</name>
        <param>
          <type>caerDeviceHandle *</type>
          <declname>usb_handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="785" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="785" bodyend="833"/>
        <references refid="_brain_harmonics_8cc_1af414029bac33d3b71ad5622dc83149d6" compoundref="_brain_harmonics_8cc" startline="265">dynapse_info</references>
        <references refid="_brain_harmonics_8cc_1a5abc2fe5dd32fab087839bf8b005e6c9" compoundref="_brain_harmonics_8cc" startline="57">DEFAULTBIASES</references>
      </memberdef>
      <memberdef kind="function" id="_brain_harmonics_8cc_1a8760404347fd84a1ed5b49aae3737647" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="glad_8h_1a950fc91edb4504f62f1c577bf4727c29" kindref="member">void</ref></type>
        <definition>void exitCB</definition>
        <argsstring>()</argsstring>
        <name>exitCB</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="897" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="897" bodyend="908"/>
        <referencedby refid="_brain_harmonics_8cc_1a487a3c399210173e1b3d3a2f275a55b1" compoundref="_brain_harmonics_8cc" startline="910" endline="917">init</referencedby>
      </memberdef>
      <memberdef kind="function" id="_brain_harmonics_8cc_1a487a3c399210173e1b3d3a2f275a55b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int init</definition>
        <argsstring>(int argc, const char *argv[])</argsstring>
        <name>init</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="910" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="910" bodyend="917"/>
        <references refid="_brain_harmonics_8cc_1a8760404347fd84a1ed5b49aae3737647" compoundref="_brain_harmonics_8cc" startline="897" endline="908">exitCB</references>
        <referencedby refid="_brain_harmonics_8cc_1ac0f2228420376f4db7e1274f2b41667c" compoundref="_brain_harmonics_8cc" startline="1162" endline="3347">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="_brain_harmonics_8cc_1a909ced1ec126d134c4c2bf71f5ead148" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="glad_8h_1a950fc91edb4504f62f1c577bf4727c29" kindref="member">void</ref></type>
        <definition>void init_numpy</definition>
        <argsstring>()</argsstring>
        <name>init_numpy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="925" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="925" bodyend="931"/>
      </memberdef>
      <memberdef kind="function" id="_brain_harmonics_8cc_1ac0f2228420376f4db7e1274f2b41667c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, const char *argv[])</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>&lt; Add Dimensions for spatial identification <linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
 &lt; Follow with the creation of quarks/leptons <linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
 &lt; Define Force interaction between fundamentals <linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
 &lt; Define Particle Force interaction between Composites, Protons/Neutrons <linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
 &lt; Specify how Composites interact <linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
 &lt; Composites form elements of periodic table <linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
 &lt; Composites form molecules <linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
 &lt; Composites form complex molecules <linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
 &lt; Materials are a combination of <ref refid="class_matter" kindref="compound">Matter</ref> <linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
 &lt; Materials can be formed into multiDimensional shapes <linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
 &lt; Complex shapes are a combination of simpler forms <linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
 &lt; Reducing high Dimensions to lower <linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
 &lt; Further reduction <linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
 &lt; Fundamental spatial description <linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
 &lt; Interim function describing time before inclusion as <ref refid="class_dimension" kindref="compound">Dimension</ref> <linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
 &lt; Network container for all AI components <linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
 &lt; Example of orbital timing containing neurons <linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
 &lt; <ref refid="class_neuron" kindref="compound">Neuron</ref> container for other neuron components <linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
 &lt; Dendritic synaptic cleft, input to the neuron <linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
 &lt; <ref refid="class_neuroreceptor" kindref="compound">Neuroreceptor</ref>, component of dendritic cleft <linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
 &lt; <ref refid="class_synapse" kindref="compound">Synapse</ref>, area of stimulus transmission/reception <linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
 &lt; Between neurons is an energy pool <linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
 &lt; <ref refid="class_membrane" kindref="compound">Membrane</ref>, outer component of the neuron <linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
 &lt; Potassium/Sodium channel, component of the membrane <linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
 &lt; <ref refid="class_dendrite" kindref="compound">Dendrite</ref>, pre-Soma component of a neuron <linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
 &lt; <ref refid="class_dendrite" kindref="compound">Dendrite</ref> branch, division/join of dendrites <linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
 &lt; <ref refid="class_soma" kindref="compound">Soma</ref>, component of a neuron <linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
 &lt; <ref refid="class_axon" kindref="compound">Axon</ref> Hillock, component of <ref refid="class_soma" kindref="compound">Soma</ref> <linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
 &lt; <ref refid="class_axon" kindref="compound">Axon</ref>, connected to <ref refid="class_axon" kindref="compound">Axon</ref> Hillock <linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
 &lt; <ref refid="class_axon" kindref="compound">Axon</ref> branch, division/join of <ref refid="class_axon" kindref="compound">Axon</ref> <linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
 &lt; Myelin sheath, wraps around <ref refid="class_axon" kindref="compound">Axon</ref> <linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
 &lt; Schwann Cell, component of a Myelin sheath <linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
 &lt; <ref refid="class_axon" kindref="compound">Axon</ref> synaptic cleft, output area of neuron <linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
 &lt; Synaptic vesicle, container of neurotransmitters <linebreak/>
<linebreak/>
<linebreak/>
<linebreak/>
 &lt; <ref refid="class_neurotransmitter" kindref="compound">Neurotransmitter</ref>, transfer component between clefts <linebreak/>
<linebreak/>
<linebreak/>
 &lt; <ref refid="class_spike" kindref="compound">Spike</ref> <linebreak/>
<linebreak/>
 &lt; Define graphics window size, X axis</para><para>&lt; Define graphics window size, Y axis </para>        </inbodydescription>
        <location file="BrainHarmonics/BrainHarmonics.cc" line="1162" column="1" bodyfile="BrainHarmonics/BrainHarmonics.cc" bodystart="1162" bodyend="3347"/>
        <references refid="_brain_harmonics_8cc_1a487a3c399210173e1b3d3a2f275a55b1" compoundref="_brain_harmonics_8cc" startline="910" endline="917">init</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>@file<sp/><sp/><sp/><sp/><sp/><sp/>main.cc<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>@details<sp/><sp/><sp/>Brain<sp/>Harmonics<sp/>-<sp/>using<sp/>harmonics<sp/>to<sp/>store<sp/>and<sp/>process<sp/>neural<sp/>spikes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>@author<sp/><sp/><sp/><sp/>Paul<sp/>Isaac&apos;s<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>@original_date<sp/><sp/><sp/><sp/><sp/><sp/>03.02.2016<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>@original_Copyright<sp/>©<sp/>2016<sp/>Paul<sp/>Isaac&apos;s.<sp/>All<sp/>rights<sp/>reserved.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>@date<sp/><sp/><sp/><sp/><sp/><sp/>08.04.2020<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>@Copyright<sp/>©<sp/>2020<sp/>Linaro<sp/>Limited.<sp/>Open<sp/>Source<sp/>Software.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">/*---------------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Code<sp/>snippets<sp/>used:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Syntax<sp/>comparison<sp/>-<sp/>http://stackoverflow.com<sp/>&amp;<sp/>http://cplusplus.com<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>program<sp/>works<sp/>on<sp/>the<sp/>principle<sp/>of<sp/>clustering<sp/>data<sp/>points<sp/>received<sp/>by<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Using<sp/>the<sp/>hierarchical<sp/>linking<sp/>the<sp/>aim<sp/>is<sp/>to<sp/>develop<sp/>the<sp/>application<sp/>to<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>relate<sp/>to<sp/>real-world<sp/>physics.<sp/>This<sp/>will<sp/>then<sp/>ease<sp/>mapping<sp/>between<sp/>simulation,<sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>emulation<sp/>and<sp/>real-world<sp/>Universes.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/socket.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;netinet/in.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;arpa/inet.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fcntl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Standard<sp/>Template<sp/>Libraries<sp/>(STL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;array&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="36"><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="37"><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="38"><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="39"><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="40"><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="41"><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="42"><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor">#include<sp/>&lt;numeric&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="44"><highlight class="preprocessor">#include<sp/>&lt;queue&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor">#include<sp/>&lt;thread&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>libcaer<sp/>c++<sp/>and<sp/>Dynapse<sp/>links</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;libcaercpp/devices/dynapse.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;libcaercpp/libcaer.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;libcaercpp/events/packetContainer.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;csignal&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;atomic&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="_brain_harmonics_8cc_1a5abc2fe5dd32fab087839bf8b005e6c9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEFAULTBIASES<sp/>&quot;data/defaultbiases_values.txt&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="_brain_harmonics_8cc_1a0146dd22f0f9d4398188379a2bcb8d32" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOWPOWERBIASES<sp/>&quot;data/lowpowerbiases_values.txt&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Port<sp/>sniffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sniffex_8h" kindref="compound">sniffex.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Originally<sp/>designed<sp/>to<sp/>use<sp/>SFML<sp/>but<sp/>switched<sp/>to<sp/>vtk<sp/>to<sp/>handle<sp/>3D<sp/>computation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>VTK_MODULE_INIT<sp/>is<sp/>definitely<sp/>required.<sp/>Without<sp/>it<sp/>NULL<sp/>is<sp/>returned<sp/>to<sp/>::New()<sp/>type<sp/>calls</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Added<sp/>path<sp/>/usr/local/include/vtk-9.0/<sp/>due<sp/>to<sp/>Eclipse<sp/>failure<sp/>to<sp/>successfully<sp/>find<sp/>include<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vtk-9.0/vtkAutoInit.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><ref refid="_brain_harmonics_8cc_1aa072a4b02405a5306cadd819b01e3cee" kindref="member">VTK_MODULE_INIT</ref>(vtkRenderingOpenGL2);<sp/></highlight><highlight class="comment">//<sp/>VTK<sp/>was<sp/>built<sp/>with<sp/>vtkRenderingOpenGL2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><ref refid="_brain_harmonics_8cc_1aa072a4b02405a5306cadd819b01e3cee" kindref="member">VTK_MODULE_INIT</ref>(vtkRenderingFreeType);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><ref refid="_brain_harmonics_8cc_1aa072a4b02405a5306cadd819b01e3cee" kindref="member">VTK_MODULE_INIT</ref>(vtkInteractionStyle);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vtk-9.0/vtkVersion.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vtk-9.0/vtkActor.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vtk-9.0/vtkActor2D.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vtk-9.0/vtkCamera.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vtk-9.0/vtkCellArray.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vtk-9.0/vtkCellData.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vtk-9.0/vtkColorTransferFunction.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vtk-9.0/vtkContourFilter.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vtk-9.0/vtkCoordinate.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vtk-9.0/vtkFloatArray.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vtk-9.0/vtkMath.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vtk-9.0/vtkParametricFunctionSource.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vtk-9.0/vtkPointData.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vtk-9.0/vtkPoints.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vtk-9.0/vtkPolygon.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vtk-9.0/vtkPolyData.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vtk-9.0/vtkPolyDataMapper.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vtk-9.0/vtkPolyDataMapper2D.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vtk-9.0/vtkAppendPolyData.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vtk-9.0/vtkProgrammableSource.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vtk-9.0/vtkProperty.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vtk-9.0/vtkProperty2D.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vtk-9.0/vtkRenderWindow.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vtk-9.0/vtkRenderer.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vtk-9.0/vtkRenderWindowInteractor.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vtk-9.0/vtkReverseSense.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vtk-9.0/vtkSmartPointer.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vtk-9.0/vtkSurfaceReconstructionFilter.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vtk-9.0/vtkTextActor.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vtk-9.0/vtkTextMapper.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vtk-9.0/vtkTextProperty.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vtk-9.0/vtkUnsignedCharArray.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vtk-9.0/vtkVertexGlyphFilter.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vtk-9.0/vtkXMLPolyDataWriter.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;/usr/local/include/vtk-9.0/vtkTransform.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;/usr/local/include/vtk-9.0/vtkTransformPolyDataFilter.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="_brain_harmonics_8cc_1a6ce111e58fd1f4622e6a322cefd19b26" refkind="member"><highlight class="normal">vtkSmartPointer&lt;vtkRenderWindow&gt;<sp/><ref refid="_brain_harmonics_8cc_1a6ce111e58fd1f4622e6a322cefd19b26" kindref="member">render_window</ref>;</highlight></codeline>
<codeline lineno="111" refid="_brain_harmonics_8cc_1a65b7a900454637a30df23b1044e07e07" refkind="member"><highlight class="normal">vtkSmartPointer&lt;vtkRenderWindowInteractor&gt;<sp/><ref refid="_brain_harmonics_8cc_1a65b7a900454637a30df23b1044e07e07" kindref="member">render_window_interactor</ref>;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="_brain_harmonics_8cc_1a459726c3dbd394d957c5e0e8fad43f71" refkind="member"><highlight class="normal">vtkSmartPointer&lt;vtkPoints&gt;<sp/><ref refid="_brain_harmonics_8cc_1a459726c3dbd394d957c5e0e8fad43f71" kindref="member">define_points</ref><sp/>=<sp/>vtkSmartPointer&lt;vtkPoints&gt;::New();</highlight></codeline>
<codeline lineno="114" refid="_brain_harmonics_8cc_1aa97d4b3a68fbfaea550fe20234905b66" refkind="member"><highlight class="normal">std::vector&lt;vtkSmartPointer&lt;vtkCellArray&gt;&gt;<sp/><ref refid="_brain_harmonics_8cc_1aa97d4b3a68fbfaea550fe20234905b66" kindref="member">define_cellarrays</ref>;</highlight></codeline>
<codeline lineno="115" refid="_brain_harmonics_8cc_1a529fb94c7498f38828c4955476e55520" refkind="member"><highlight class="normal">std::vector&lt;vtkSmartPointer&lt;vtkPolyData&gt;&gt;<sp/><ref refid="_brain_harmonics_8cc_1a529fb94c7498f38828c4955476e55520" kindref="member">define_polydata</ref>;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="_brain_harmonics_8cc_1aec36b51ac72634d7a58846776cb61d43" refkind="member"><highlight class="normal">std::vector&lt;vtkSmartPointer&lt;vtkSurfaceReconstructionFilter&gt;&gt;<sp/><ref refid="_brain_harmonics_8cc_1aec36b51ac72634d7a58846776cb61d43" kindref="member">define_surfaces</ref>;</highlight></codeline>
<codeline lineno="118" refid="_brain_harmonics_8cc_1a60b4bc1ad91584494c1f04f858e34513" refkind="member"><highlight class="normal">std::vector&lt;vtkSmartPointer&lt;vtkContourFilter&gt;&gt;<sp/><ref refid="_brain_harmonics_8cc_1a60b4bc1ad91584494c1f04f858e34513" kindref="member">define_contourfilters</ref>;</highlight></codeline>
<codeline lineno="119" refid="_brain_harmonics_8cc_1a3f46d8452260ed4fbbdadf8ea634d866" refkind="member"><highlight class="normal">std::vector&lt;vtkSmartPointer&lt;vtkReverseSense&gt;&gt;<sp/><ref refid="_brain_harmonics_8cc_1a3f46d8452260ed4fbbdadf8ea634d866" kindref="member">define_reversals</ref>;</highlight></codeline>
<codeline lineno="120" refid="_brain_harmonics_8cc_1a67ee26302d766e5112a5f935e33a85c6" refkind="member"><highlight class="normal">std::vector&lt;vtkSmartPointer&lt;vtkPolyDataMapper&gt;&gt;<sp/><ref refid="_brain_harmonics_8cc_1a67ee26302d766e5112a5f935e33a85c6" kindref="member">define_datamappers</ref>;</highlight></codeline>
<codeline lineno="121" refid="_brain_harmonics_8cc_1a804c9adf98d06fdd2f125e84deb75433" refkind="member"><highlight class="normal">std::vector&lt;vtkSmartPointer&lt;vtkPolyDataMapper2D&gt;&gt;<sp/><ref refid="_brain_harmonics_8cc_1a804c9adf98d06fdd2f125e84deb75433" kindref="member">define_datamappers2D</ref>;</highlight></codeline>
<codeline lineno="122" refid="_brain_harmonics_8cc_1a564cb339c12906f6db5995be211dcda2" refkind="member"><highlight class="normal">std::vector&lt;vtkSmartPointer&lt;vtkActor&gt;&gt;<sp/><ref refid="_brain_harmonics_8cc_1a564cb339c12906f6db5995be211dcda2" kindref="member">define_actors</ref>;</highlight></codeline>
<codeline lineno="123" refid="_brain_harmonics_8cc_1a06728597be70303b9f19f653a5dc90ee" refkind="member"><highlight class="normal">std::vector&lt;vtkSmartPointer&lt;vtkActor2D&gt;&gt;<sp/><ref refid="_brain_harmonics_8cc_1a06728597be70303b9f19f653a5dc90ee" kindref="member">define_actors2D</ref>;</highlight></codeline>
<codeline lineno="124" refid="_brain_harmonics_8cc_1a4929783757e2d051945177d626a74213" refkind="member"><highlight class="normal">std::vector&lt;vtkSmartPointer&lt;vtkTextActor&gt;&gt;<sp/><ref refid="_brain_harmonics_8cc_1a4929783757e2d051945177d626a74213" kindref="member">define_textactors</ref>;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="_brain_harmonics_8cc_1aab0f6cfd03b167486b3a0ebbb68922be" refkind="member"><highlight class="normal">std::vector&lt;vtkSmartPointer&lt;vtkRenderer&gt;&gt;<sp/><ref refid="_brain_harmonics_8cc_1aab0f6cfd03b167486b3a0ebbb68922be" kindref="member">define_renderers</ref>;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>=<sp/>vtkSmartPointer&lt;vtkRenderer&gt;::New()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="_brain_harmonics_8cc_1a81f74579a7b9471085578a377b3c1525" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_brain_harmonics_8cc_1a81f74579a7b9471085578a377b3c1525" kindref="member">static_points_counter</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="131" refid="_brain_harmonics_8cc_1a3ef1f27168082fed53b34b6781b7fef1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_brain_harmonics_8cc_1a3ef1f27168082fed53b34b6781b7fef1" kindref="member">static_polygons_counter</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="132" refid="_brain_harmonics_8cc_1a0ac21544be2eca2667c5acc784111848" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_brain_harmonics_8cc_1a0ac21544be2eca2667c5acc784111848" kindref="member">static_polydata_counter</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="133" refid="_brain_harmonics_8cc_1a3f51384611b8ff0bcedef8dc6f27bbc8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_brain_harmonics_8cc_1a3f51384611b8ff0bcedef8dc6f27bbc8" kindref="member">static_cellarrays_counter</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="134" refid="_brain_harmonics_8cc_1acdcbc10d39db69593dfc42972b200e46" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_brain_harmonics_8cc_1acdcbc10d39db69593dfc42972b200e46" kindref="member">static_surfaces_counter</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="135" refid="_brain_harmonics_8cc_1af896e11b42f684e4fadc0d4a2826538a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_brain_harmonics_8cc_1af896e11b42f684e4fadc0d4a2826538a" kindref="member">static_contourfilter_counter</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="136" refid="_brain_harmonics_8cc_1a4062a4c3764de7ed239d33608ca291ae" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_brain_harmonics_8cc_1a4062a4c3764de7ed239d33608ca291ae" kindref="member">static_reversals_counter</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="137" refid="_brain_harmonics_8cc_1ab96b88b97440e7d703e0ac1774115227" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_brain_harmonics_8cc_1ab96b88b97440e7d703e0ac1774115227" kindref="member">static_datamappers_counter</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="138" refid="_brain_harmonics_8cc_1a3e27beef07882d4684ad6d35239b7a60" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_brain_harmonics_8cc_1a3e27beef07882d4684ad6d35239b7a60" kindref="member">static_datamappers2D_counter</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="139" refid="_brain_harmonics_8cc_1ad53e9035f7facd9c99c57107d9f84ac6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_brain_harmonics_8cc_1ad53e9035f7facd9c99c57107d9f84ac6" kindref="member">static_actors_counter</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="140" refid="_brain_harmonics_8cc_1a3fe403ad89b282d8d1b8fa92bf05f42e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_brain_harmonics_8cc_1a3fe403ad89b282d8d1b8fa92bf05f42e" kindref="member">static_actors2D_counter</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="141" refid="_brain_harmonics_8cc_1aad3d1808a6ab9363f0430c1e9650324d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_brain_harmonics_8cc_1aad3d1808a6ab9363f0430c1e9650324d" kindref="member">static_renderers_counter</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143" refid="_brain_harmonics_8cc_1adf365e8712584a5f83a2ae582e8a9fe3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_brain_harmonics_8cc_1adf365e8712584a5f83a2ae582e8a9fe3" kindref="member">dynamic_points_counter</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="144" refid="_brain_harmonics_8cc_1ae699a3513aa90202fa4779bacdf343da" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_brain_harmonics_8cc_1ae699a3513aa90202fa4779bacdf343da" kindref="member">dynamic_polygons_counter</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="145" refid="_brain_harmonics_8cc_1a8a93118d63dacb49915b567fa41319a7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_brain_harmonics_8cc_1a8a93118d63dacb49915b567fa41319a7" kindref="member">dynamic_polydata_counter</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="146" refid="_brain_harmonics_8cc_1ac86282f96c64009746f9517e7f9d613a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_brain_harmonics_8cc_1ac86282f96c64009746f9517e7f9d613a" kindref="member">dynamic_cellarrays_counter</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="147" refid="_brain_harmonics_8cc_1a32fdb8886e50e5a48cb78a26e9cf846d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_brain_harmonics_8cc_1a32fdb8886e50e5a48cb78a26e9cf846d" kindref="member">dynamic_surfaces_counter</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="148" refid="_brain_harmonics_8cc_1a4d42762d2c2ec0fe02455bab8d3cf4c9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_brain_harmonics_8cc_1a4d42762d2c2ec0fe02455bab8d3cf4c9" kindref="member">dynamic_contourfilter_counter</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="149" refid="_brain_harmonics_8cc_1a7e0e7dc174f686fe7ec2c1c10c33a5b7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_brain_harmonics_8cc_1a7e0e7dc174f686fe7ec2c1c10c33a5b7" kindref="member">dynamic_reversals_counter</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="150" refid="_brain_harmonics_8cc_1ac11e052aaba6bcf48f760388d655dd11" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_brain_harmonics_8cc_1ac11e052aaba6bcf48f760388d655dd11" kindref="member">dynamic_datamappers_counter</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="151" refid="_brain_harmonics_8cc_1aafef3c73d5155f89a18f452d92f4e8a3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_brain_harmonics_8cc_1aafef3c73d5155f89a18f452d92f4e8a3" kindref="member">dynamic_datamappers2D_counter</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="152" refid="_brain_harmonics_8cc_1a7d304e5a06130656fd9f36a54079bea4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_brain_harmonics_8cc_1a7d304e5a06130656fd9f36a54079bea4" kindref="member">dynamic_actors_counter</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="153" refid="_brain_harmonics_8cc_1afabdd4a073eb734b7610de6f1769c050" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_brain_harmonics_8cc_1afabdd4a073eb734b7610de6f1769c050" kindref="member">dynamic_actors2D_counter</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="154" refid="_brain_harmonics_8cc_1a295208b91ea89b7e23a14a2d431f4b33" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_brain_harmonics_8cc_1a295208b91ea89b7e23a14a2d431f4b33" kindref="member">dynamic_renderers_counter</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>vtkSmartPointer&lt;vtkPolyData&gt;<sp/>TransformBack(vtkSmartPointer&lt;vtkPoints&gt;<sp/>pt,<sp/>vtkSmartPointer&lt;vtkPolyData&gt;<sp/>pd);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Interim<sp/>calls<sp/>to<sp/>Python<sp/>(2.7)<sp/>to<sp/>use<sp/>existing<sp/>APIs<sp/>to<sp/>Neuromorphic<sp/>hardware<sp/>and/or<sp/>Brain<sp/>simulators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Python.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="160"><highlight class="preprocessor">#include<sp/>&lt;numpy/arrayobject.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>GLUT<sp/>on<sp/>El<sp/>Capitan<sp/>-<sp/>poor<sp/>headers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__APPLE__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;GLUT/glut.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;OpenGL/gl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;OpenGL/glu.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;GL/gl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;GL/glu.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;GL/glut.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>use<sp/>the<sp/>std::<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//#define<sp/>IL_STD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//#include<sp/>&lt;ilcplex/ilocplex.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ILOSTLBEGIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Homegrown<sp/>add-ins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="universe_8h" kindref="compound">universe.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="183"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dimension_8h" kindref="compound">dimension.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="184"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="elementaryparticle_8h" kindref="compound">elementaryparticle.h</ref>&quot;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="185"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="elementaryforce_8h" kindref="compound">elementaryforce.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="186"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="compositeforceparticle_8h" kindref="compound">compositeforceparticle.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="187"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="law_8h" kindref="compound">law.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="188"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="matter_8h" kindref="compound">matter.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="189"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="monomer_8h" kindref="compound">monomer.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="190"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="polymer_8h" kindref="compound">polymer.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="191"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="solid_8h" kindref="compound">solid.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="192"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="polyhedron_8h" kindref="compound">polyhedron.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="193"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="polygon_8h" kindref="compound">polygon.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="194"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="quad_8h" kindref="compound">quad.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="195"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="line_8h" kindref="compound">line.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="196"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="point_8h" kindref="compound">point.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="197"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="node_8h" kindref="compound">node.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="198"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="apptimer_8h" kindref="compound">apptimer.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="200" refid="_brain_harmonics_8cc_1a602d3f70549216866d35be56a17fa06e" refkind="member"><highlight class="normal">std::vector<sp/>&lt;Universe*&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a602d3f70549216866d35be56a17fa06e" kindref="member">universe_list</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Application<sp/>specific<sp/>add-ins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cognitivenetwork_8h" kindref="compound">cognitivenetwork.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cognitiveinput_8h" kindref="compound">cognitiveinput.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cognitiveoutput_8h" kindref="compound">cognitiveoutput.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="orbital_8h" kindref="compound">orbital.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="207"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="neuron_8h" kindref="compound">neuron.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="208"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dendritecleft_8h" kindref="compound">dendritecleft.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="209"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="neuroreceptor_8h" kindref="compound">neuroreceptor.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="210"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="synapse_8h" kindref="compound">synapse.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="211"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="interneuronspace_8h" kindref="compound">interneuronspace.h</ref>&quot;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="212"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="membrane_8h" kindref="compound">membrane.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="213"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="membranechannel_8h" kindref="compound">membranechannel.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="214"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dendrite_8h" kindref="compound">dendrite.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="215"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dendritebranch_8h" kindref="compound">dendritebranch.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="216"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="soma_8h" kindref="compound">soma.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="217"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="axonhillock_8h" kindref="compound">axonhillock.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="218"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="axon_8h" kindref="compound">axon.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="219"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="axonbranch_8h" kindref="compound">axonbranch.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="220"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="myelinsheath_8h" kindref="compound">myelinsheath.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="221"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="schwanncell_8h" kindref="compound">schwanncell.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="222"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="axonbouton_8h" kindref="compound">axonbouton.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="223"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="synapticvesicle_8h" kindref="compound">synapticvesicle.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="224"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="neurotransmitter_8h" kindref="compound">neurotransmitter.h</ref>&quot;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="225"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="spike_8h" kindref="compound">spike.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//#include<sp/>&quot;multiscreen.h&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**&lt;<sp/>Screen<sp/>layouts<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DEBUG_PROGRAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229" refid="_brain_harmonics_8cc_1ad25fb949974c3ffe51bb4a887ea0aedc" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEBUG_PROGRAM<sp/>true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>DEBUG_PROGRAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>INVALID_SOCKET</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233" refid="_brain_harmonics_8cc_1a26769957ec1a2beaf223f33b66ee64ab" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INVALID_SOCKET<sp/>-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>INVALID_SOCKET</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SOCKET_ERROR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237" refid="_brain_harmonics_8cc_1a633b0396ff93d336a088412a190a5072" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SOCKET_ERROR<sp/>-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>SOCKET_ERROR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SOCKET_PORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241" refid="_brain_harmonics_8cc_1a120b3c12a694462fcedc15e429a53bd6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SOCKET_PORT<sp/>9876</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>SOCKET_PORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SOCKET_ADDRESS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245" refid="_brain_harmonics_8cc_1a8cccdb3b239ce7cf58e9781af267072b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SOCKET_ADDRESS<sp/>&quot;192.168.42.56&quot;<sp/><sp/><sp/><sp/>//<sp/>Change<sp/>to<sp/>the<sp/>IP<sp/>address<sp/>of<sp/>the<sp/>computer<sp/>running<sp/>the<sp/>middleware<sp/>portion<sp/>of<sp/>the<sp/>project</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>SOCKET_ADDRESS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handy<sp/>conversions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DEG2RAD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEG2RAD<sp/>0.01745329252f<sp/><sp/></highlight></codeline>
<codeline lineno="251"><highlight class="preprocessor">#endif<sp/>//<sp/>DEG2RAD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>RAD2DEG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RAD2DEG<sp/>57.29577951f<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="255"><highlight class="preprocessor">#endif<sp/>//<sp/>RAD2DEG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ONERAD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ONERAD<sp/>3.14159265f<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="259"><highlight class="preprocessor">#endif<sp/>//<sp/>ONERAD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GRAVITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262" refid="_brain_harmonics_8cc_1a6801baa546c6112d19eb095111d24720" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GRAVITY<sp/>6.67384e-11;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>GRAVITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265" refid="_brain_harmonics_8cc_1af414029bac33d3b71ad5622dc83149d6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">caer_dynapse_info<sp/><ref refid="_brain_harmonics_8cc_1af414029bac33d3b71ad5622dc83149d6" kindref="member">dynapse_info</ref>;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Dynap-se<sp/>shutdown</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::atomic_bool<sp/>globalShutdown(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>globalShutdownSignalHandler(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>signal)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Simply<sp/>set<sp/>the<sp/>running<sp/>flag<sp/>to<sp/>false<sp/>on<sp/>SIGTERM<sp/>and<sp/>SIGINT<sp/>(CTRL+C)<sp/>for<sp/>global<sp/>shutdown.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(signal<sp/>==<sp/>SIGTERM<sp/>||<sp/>signal<sp/>==<sp/>SIGINT)<sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>globalShutdown.store(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277" refid="_brain_harmonics_8cc_1ac72744f7bdb5df7bb5088e5260589486" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_brain_harmonics_8cc_1ac72744f7bdb5df7bb5088e5260589486" kindref="member">mshandling</ref>(std::vector<sp/>&lt;std::string&gt;<sp/>*m_messages,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_response,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_ok,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_fail)</highlight></codeline>
<codeline lineno="278"><highlight class="normal">{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="_brain_harmonics_8cc_1ad25fb949974c3ffe51bb4a887ea0aedc" kindref="member">DEBUG_PROGRAM</ref>)</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m_response)</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(*m_messages)[m_ok]<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(*m_messages)[m_fail]<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sleep(1);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Function<sp/>to<sp/>create<sp/>a<sp/>Universe<sp/>instance.<sp/>Universes<sp/>could<sp/>be<sp/>simulation,<sp/>emulation,<sp/>real<sp/>or<sp/>contemplative<sp/>(What-if)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295" refid="_brain_harmonics_8cc_1a5b7bc303552f00bc26a7b5bf962f3376" refkind="member"><highlight class="normal">std::vector&lt;Universe*&gt;<sp/><ref refid="_brain_harmonics_8cc_1a5b7bc303552f00bc26a7b5bf962f3376" kindref="member">CreateUniverse</ref>(std::chrono::time_point&lt;Clock&gt;<sp/>event_time,<sp/>std::vector&lt;Universe*&gt;<sp/>*toAddto)</highlight></codeline>
<codeline lineno="296"><highlight class="normal">{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>there<sp/>is<sp/>nothing.<sp/>Then<sp/>there<sp/>was<sp/>something...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>UniverseEnergy<sp/>=<sp/>999999999.0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Begin<sp/>with<sp/>singularity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_universe" kindref="compound">Universe</ref>*<sp/>myUniverse;<sp/></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>myUniverse<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_universe" kindref="compound">Universe</ref>();</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>myUniverse-&gt;<ref refid="class_universe_1a868250e67d0fcb2483aa8bdd73c40a02" kindref="member">SetEnergy</ref>(event_time,<sp/>UniverseEnergy);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Cause<sp/>initialisation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>myUniverse-&gt;<ref refid="class_universe_1a64ee5a2c7e86c56fa426acb750438ce9" kindref="member">Update</ref>(event_time);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>move<sp/>not<sp/>push_back<sp/>otherwise<sp/>data<sp/>is<sp/>destroyed<sp/>on<sp/>exiting<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::copy(&amp;myUniverse,<sp/>&amp;myUniverse<sp/>+<sp/>1,<sp/>std::back_inserter(*toAddto));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy(&amp;myUniverse,<sp/>&amp;myUniverse<sp/>+<sp/>1,<sp/>std::back_inserter(*toAddto));</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*toAddto;</highlight></codeline>
<codeline lineno="311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Adding<sp/>Dimensions<sp/>enables<sp/>physical<sp/>and<sp/>spatial<sp/>calculations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Possible<sp/>to<sp/>use<sp/>this<sp/>as<sp/>a<sp/>basis<sp/>for<sp/>higher<sp/>dimensionality<sp/>if<sp/>it<sp/>becomes<sp/>relevant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/>int<sp/>AddDimension(std::vector&lt;Dimension&gt;<sp/>*toAddto,<sp/>std::vector&lt;Universe&gt;<sp/>*aPartof,<sp/>int<sp/>arrayEntry)</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/>Dimension<sp/>myDimension((*aPartof)[arrayEntry]);</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/>//<sp/>Use<sp/>move<sp/>not<sp/>push_back<sp/>otherwise<sp/>data<sp/>is<sp/>destroyed<sp/>on<sp/>exiting<sp/>function</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/>std::copy(&amp;myDimension,<sp/>&amp;myDimension<sp/>+<sp/>1,<sp/>std::back_inserter(*toAddto));</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/>return<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Return<sp/>Success<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/>//<sp/>Each<sp/>Add<sp/>function<sp/>creates<sp/>an<sp/>instance<sp/>of<sp/>the<sp/>respective<sp/>class<sp/>and<sp/>links<sp/>back<sp/>to<sp/>the<sp/>base<sp/>class</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/>//<sp/>For<sp/>definition<sp/>of<sp/>quarks<sp/>and<sp/>leptons<sp/>when<sp/>simulating<sp/>real-world<sp/>environment</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/>int<sp/>AddElementaryParticle(std::vector&lt;ElementaryParticle&gt;<sp/>*toAddto,<sp/>std::vector&lt;Dimension&gt;<sp/>*aPartof,<sp/>int<sp/>arrayEntry)</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/>ElementaryParticle<sp/>myElementaryParticle((*aPartof)[arrayEntry]);</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/>//<sp/>Use<sp/>move<sp/>not<sp/>push_back<sp/>otherwise<sp/>data<sp/>is<sp/>destroyed<sp/>on<sp/>exiting<sp/>function</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/>std::copy(&amp;myElementaryParticle,<sp/>&amp;myElementaryParticle<sp/>+<sp/>1,<sp/>std::back_inserter(*toAddto));</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/>return<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Return<sp/>Success<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/>//<sp/>For<sp/>real-world<sp/>definition<sp/>of<sp/>protons<sp/>&amp;<sp/>neutrons.<sp/>Other<sp/>combinations<sp/>in<sp/>artificial<sp/>environments</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/>int<sp/>AddCompositeParticle(std::vector&lt;CompositeParticle&gt;<sp/>*toAddto,<sp/>std::vector&lt;ElementaryParticle&gt;<sp/>*aPartof,<sp/>int<sp/>arrayEntry)</highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/>CompositeParticle<sp/>myCompositeParticle((*aPartof)[arrayEntry]);</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/>//<sp/>Use<sp/>move<sp/>not<sp/>push_back<sp/>otherwise<sp/>data<sp/>is<sp/>destroyed<sp/>on<sp/>exiting<sp/>function</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/>std::copy(&amp;myCompositeParticle,<sp/>&amp;myCompositeParticle<sp/>+<sp/>1,<sp/>std::back_inserter(*toAddto));</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/>return<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Return<sp/>Success<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="346"><highlight class="comment"><sp/>//<sp/>Methods<sp/>in<sp/>this<sp/>class<sp/>to<sp/>define<sp/>interaction.<sp/>Which<sp/>may<sp/>be<sp/>different<sp/>between<sp/>artificial,<sp/>simulation<sp/>and<sp/>real<sp/>environments</highlight></codeline>
<codeline lineno="347"><highlight class="comment"><sp/>int<sp/>AddElementaryForce(std::vector&lt;ElementaryForce&gt;<sp/>*toAddto,<sp/>std::vector&lt;ElementaryParticle&gt;<sp/>*aPartof,<sp/>int<sp/>arrayEntry)</highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/>ElementaryForce<sp/>myForce((*aPartof)[arrayEntry]);</highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/>//<sp/>Use<sp/>move<sp/>not<sp/>push_back<sp/>otherwise<sp/>data<sp/>is<sp/>destroyed<sp/>on<sp/>exiting<sp/>function</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/>std::copy(&amp;myForce,<sp/>&amp;myForce<sp/>+<sp/>1,<sp/>std::back_inserter(*toAddto));</highlight></codeline>
<codeline lineno="352"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="353"><highlight class="comment"><sp/>return<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Return<sp/>Success<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="354"><highlight class="comment"><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/>int<sp/>AddCompositeForce(std::vector&lt;CompositeForce&gt;<sp/>*toAddto,<sp/>std::vector&lt;CompositeParticle&gt;<sp/>*aPartof,<sp/>int<sp/>arrayEntry)</highlight></codeline>
<codeline lineno="357"><highlight class="comment"><sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="comment"><sp/>CompositeForce<sp/>myForce((*aPartof)[arrayEntry]);</highlight></codeline>
<codeline lineno="359"><highlight class="comment"><sp/>//<sp/>Use<sp/>move<sp/>not<sp/>push_back<sp/>otherwise<sp/>data<sp/>is<sp/>destroyed<sp/>on<sp/>exiting<sp/>function</highlight></codeline>
<codeline lineno="360"><highlight class="comment"><sp/>std::copy(&amp;myForce,<sp/>&amp;myForce<sp/>+<sp/>1,<sp/>std::back_inserter(*toAddto));</highlight></codeline>
<codeline lineno="361"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="362"><highlight class="comment"><sp/>return<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Return<sp/>Success<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/>//<sp/>Add<sp/>methods<sp/>to<sp/>describe<sp/>Force<sp/>interactions<sp/>such<sp/>as<sp/>gravity</highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/>int<sp/>AddLaw(std::vector&lt;CompositeForce&gt;<sp/>*toAddto,<sp/>int<sp/>arrayEntry,<sp/>std::vector&lt;CompositeParticle&gt;<sp/>*toAddto2,<sp/>int<sp/>arrayEntry2)</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/>//<sp/><sp/><sp/><sp/>law<sp/>myLaw(aPartof[arrayEntry],<sp/>toAddto2[arrayEntry2]);</highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/>//<sp/>Use<sp/>move<sp/>not<sp/>push_back<sp/>otherwise<sp/>data<sp/>is<sp/>destroyed<sp/>on<sp/>exiting<sp/>function</highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/>return<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Return<sp/>Success<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="372"><highlight class="comment"><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="374"><highlight class="comment"><sp/>//<sp/>Class<sp/>for<sp/>definition<sp/>of<sp/>periodic<sp/>table<sp/>of<sp/>elements</highlight></codeline>
<codeline lineno="375"><highlight class="comment"><sp/>int<sp/>AddMatter(std::vector&lt;Matter&gt;<sp/>*toAddto,<sp/>std::vector&lt;Dimension&gt;<sp/>*aPartof,<sp/>int<sp/>arrayEntry)</highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/>Matter<sp/>myMatter((*aPartof)[arrayEntry]);</highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/>//<sp/>Use<sp/>move<sp/>not<sp/>push_back<sp/>otherwise<sp/>data<sp/>is<sp/>destroyed<sp/>on<sp/>exiting<sp/>function</highlight></codeline>
<codeline lineno="379"><highlight class="comment"><sp/>std::copy(&amp;myMatter,<sp/>&amp;myMatter<sp/>+<sp/>1,<sp/>std::back_inserter(*toAddto));</highlight></codeline>
<codeline lineno="380"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="381"><highlight class="comment"><sp/>return<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Return<sp/>Success<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="382"><highlight class="comment"><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="384"><highlight class="comment"><sp/>//<sp/>Class<sp/>for<sp/>definition<sp/>of<sp/>simple<sp/>molecules</highlight></codeline>
<codeline lineno="385"><highlight class="comment"><sp/>int<sp/>AddMonomer(std::vector&lt;Monomer&gt;<sp/>*toAddto,<sp/>std::vector&lt;Dimension&gt;<sp/>*aPartof,<sp/>int<sp/>arrayEntry)</highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="comment"><sp/>Monomer<sp/>myMonomer((*aPartof)[arrayEntry]);</highlight></codeline>
<codeline lineno="388"><highlight class="comment"><sp/>//<sp/>Use<sp/>move<sp/>not<sp/>push_back<sp/>otherwise<sp/>data<sp/>is<sp/>destroyed<sp/>on<sp/>exiting<sp/>function</highlight></codeline>
<codeline lineno="389"><highlight class="comment"><sp/>std::copy(&amp;myMonomer,<sp/>&amp;myMonomer<sp/>+<sp/>1,<sp/>std::back_inserter(*toAddto));</highlight></codeline>
<codeline lineno="390"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="391"><highlight class="comment"><sp/>return<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Return<sp/>Success<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="392"><highlight class="comment"><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="394"><highlight class="comment"><sp/>//<sp/>Class<sp/>for<sp/>definition<sp/>of<sp/>complex<sp/>molecules</highlight></codeline>
<codeline lineno="395"><highlight class="comment"><sp/>int<sp/>AddPolymer(std::vector&lt;Polymer&gt;<sp/>*toAddto,<sp/>std::vector&lt;Dimension&gt;<sp/>*aPartof,<sp/>int<sp/>arrayEntry)</highlight></codeline>
<codeline lineno="396"><highlight class="comment"><sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="comment"><sp/>Polymer<sp/>myPolymer((*aPartof)[arrayEntry]);</highlight></codeline>
<codeline lineno="398"><highlight class="comment"><sp/>//<sp/>Use<sp/>move<sp/>not<sp/>push_back<sp/>otherwise<sp/>data<sp/>is<sp/>destroyed<sp/>on<sp/>exiting<sp/>function</highlight></codeline>
<codeline lineno="399"><highlight class="comment"><sp/>std::copy(&amp;myPolymer,<sp/>&amp;myPolymer<sp/>+<sp/>1,<sp/>std::back_inserter(*toAddto));</highlight></codeline>
<codeline lineno="400"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="401"><highlight class="comment"><sp/>return<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Return<sp/>Success<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="402"><highlight class="comment"><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="404"><highlight class="comment"><sp/>//<sp/>Description<sp/>of<sp/>material</highlight></codeline>
<codeline lineno="405"><highlight class="comment"><sp/>int<sp/>AddSolid(std::vector&lt;Solid&gt;<sp/>*toAddto,<sp/>std::vector&lt;Dimension&gt;<sp/>*aPartof,<sp/>int<sp/>arrayEntry)</highlight></codeline>
<codeline lineno="406"><highlight class="comment"><sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="comment"><sp/>Solid<sp/>mySolid((*aPartof)[arrayEntry]);</highlight></codeline>
<codeline lineno="408"><highlight class="comment"><sp/>//<sp/>Use<sp/>move<sp/>not<sp/>push_back<sp/>otherwise<sp/>data<sp/>is<sp/>destroyed<sp/>on<sp/>exiting<sp/>function</highlight></codeline>
<codeline lineno="409"><highlight class="comment"><sp/>std::copy(&amp;mySolid,<sp/>&amp;mySolid<sp/>+<sp/>1,<sp/>std::back_inserter(*toAddto));</highlight></codeline>
<codeline lineno="410"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="411"><highlight class="comment"><sp/>return<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Return<sp/>Success<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="412"><highlight class="comment"><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="414"><highlight class="comment"><sp/>//<sp/>Fundamental<sp/>spatial<sp/>element</highlight></codeline>
<codeline lineno="415"><highlight class="comment"><sp/>int<sp/>AddPoint(std::vector&lt;Point&gt;<sp/>*toAddto,<sp/>std::vector&lt;Dimension&gt;<sp/>*aPartof,<sp/>int<sp/>arrayEntry)</highlight></codeline>
<codeline lineno="416"><highlight class="comment"><sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="comment"><sp/>//<sp/>Begin<sp/>with<sp/>shape<sp/>singularity</highlight></codeline>
<codeline lineno="418"><highlight class="comment"><sp/>Point<sp/>myPoint((*aPartof)[arrayEntry]);</highlight></codeline>
<codeline lineno="419"><highlight class="comment"><sp/>//<sp/>Use<sp/>move<sp/>not<sp/>push_back<sp/>otherwise<sp/>data<sp/>is<sp/>destroyed<sp/>on<sp/>exiting<sp/>function</highlight></codeline>
<codeline lineno="420"><highlight class="comment"><sp/>std::copy(&amp;myPoint,<sp/>&amp;myPoint<sp/>+<sp/>1,<sp/>std::back_inserter(*toAddto));</highlight></codeline>
<codeline lineno="421"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="422"><highlight class="comment"><sp/>return<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Return<sp/>Success<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="423"><highlight class="comment"><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="425"><highlight class="comment"><sp/>//<sp/>Complex<sp/>shapes</highlight></codeline>
<codeline lineno="426"><highlight class="comment"><sp/>int<sp/>AddPolyhedron(std::vector&lt;Polyhedron&gt;<sp/>*toAddto,<sp/>std::vector&lt;Solid&gt;<sp/>*aPartof,<sp/>int<sp/>arrayEntry)</highlight></codeline>
<codeline lineno="427"><highlight class="comment"><sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="comment"><sp/>Polyhedron<sp/>myPolyhedron((*aPartof)[arrayEntry]);</highlight></codeline>
<codeline lineno="429"><highlight class="comment"><sp/>//<sp/>Use<sp/>move<sp/>not<sp/>push_back<sp/>otherwise<sp/>data<sp/>is<sp/>destroyed<sp/>on<sp/>exiting<sp/>function</highlight></codeline>
<codeline lineno="430"><highlight class="comment"><sp/>std::copy(&amp;myPolyhedron,<sp/>&amp;myPolyhedron<sp/>+<sp/>1,<sp/>std::back_inserter(*toAddto));</highlight></codeline>
<codeline lineno="431"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="432"><highlight class="comment"><sp/>return<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Return<sp/>Success<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="433"><highlight class="comment"><sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="435"><highlight class="comment"><sp/>//<sp/>Components<sp/>of<sp/>complex<sp/>shapes</highlight></codeline>
<codeline lineno="436"><highlight class="comment"><sp/>int<sp/>AddPolygon(std::vector&lt;Polygon&gt;<sp/>*toAddto,<sp/>std::vector&lt;Polyhedron&gt;<sp/>*aPartof,<sp/>int<sp/>arrayEntry)</highlight></codeline>
<codeline lineno="437"><highlight class="comment"><sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="comment"><sp/>Polygon<sp/>myPolygon((*aPartof)[arrayEntry]);</highlight></codeline>
<codeline lineno="439"><highlight class="comment"><sp/>//<sp/>Use<sp/>move<sp/>not<sp/>push_back<sp/>otherwise<sp/>data<sp/>is<sp/>destroyed<sp/>on<sp/>exiting<sp/>function</highlight></codeline>
<codeline lineno="440"><highlight class="comment"><sp/>std::copy(&amp;myPolygon,<sp/>&amp;myPolygon<sp/>+<sp/>1,<sp/>std::back_inserter(*toAddto));</highlight></codeline>
<codeline lineno="441"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="442"><highlight class="comment"><sp/>return<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Return<sp/>Success<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="443"><highlight class="comment"><sp/>}</highlight></codeline>
<codeline lineno="444"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="445"><highlight class="comment"><sp/>//<sp/>Base<sp/>2D<sp/>shapes</highlight></codeline>
<codeline lineno="446"><highlight class="comment"><sp/>int<sp/>AddQuad(std::vector&lt;Quad&gt;<sp/>*toAddto,<sp/>std::vector&lt;Polygon&gt;<sp/>*aPartof,<sp/>int<sp/>arrayEntry)</highlight></codeline>
<codeline lineno="447"><highlight class="comment"><sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="comment"><sp/>Quad<sp/>myQuad((*aPartof)[arrayEntry]);</highlight></codeline>
<codeline lineno="449"><highlight class="comment"><sp/>//<sp/>Use<sp/>move<sp/>not<sp/>push_back<sp/>otherwise<sp/>data<sp/>is<sp/>destroyed<sp/>on<sp/>exiting<sp/>function</highlight></codeline>
<codeline lineno="450"><highlight class="comment"><sp/>std::copy(&amp;myQuad,<sp/>&amp;myQuad<sp/>+<sp/>1,<sp/>std::back_inserter(*toAddto));</highlight></codeline>
<codeline lineno="451"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="452"><highlight class="comment"><sp/>return<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Return<sp/>Success<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="453"><highlight class="comment"><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="455"><highlight class="comment"><sp/>//<sp/>Component<sp/>of<sp/>shapes,<sp/>straight,<sp/>curved<sp/>or<sp/>complex</highlight></codeline>
<codeline lineno="456"><highlight class="comment"><sp/>int<sp/>AddLine(std::vector&lt;Line&gt;<sp/>*toAddto,<sp/>std::vector&lt;Polygon&gt;<sp/>*aPartof,<sp/>int<sp/>arrayEntry)</highlight></codeline>
<codeline lineno="457"><highlight class="comment"><sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="comment"><sp/>Line<sp/>myLine((*aPartof)[arrayEntry]);</highlight></codeline>
<codeline lineno="459"><highlight class="comment"><sp/>//<sp/>Use<sp/>move<sp/>not<sp/>push_back<sp/>otherwise<sp/>data<sp/>is<sp/>destroyed<sp/>on<sp/>exiting<sp/>function</highlight></codeline>
<codeline lineno="460"><highlight class="comment"><sp/>std::copy(&amp;myLine,<sp/>&amp;myLine<sp/>+<sp/>1,<sp/>std::back_inserter(*toAddto));</highlight></codeline>
<codeline lineno="461"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="462"><highlight class="comment"><sp/>return<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Return<sp/>Success<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="463"><highlight class="comment"><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="465"><highlight class="comment"><sp/>//<sp/>Component<sp/>of<sp/>the<sp/>brain</highlight></codeline>
<codeline lineno="466"><highlight class="comment"><sp/>int<sp/>AddNeuron(std::vector&lt;Neuron&gt;<sp/>*toAddto,<sp/>std::vector&lt;Dimension&gt;<sp/>*aPartof,<sp/>int<sp/>arrayEntry)</highlight></codeline>
<codeline lineno="467"><highlight class="comment"><sp/>//int<sp/>AddNeuron(std::vector&lt;Neuron&gt;<sp/>*toAddto)</highlight></codeline>
<codeline lineno="468"><highlight class="comment"><sp/>{</highlight></codeline>
<codeline lineno="469"><highlight class="comment"><sp/>Neuron<sp/>myNeuron((*aPartof)[arrayEntry]);</highlight></codeline>
<codeline lineno="470"><highlight class="comment"><sp/>//<sp/>Use<sp/>move<sp/>not<sp/>push_back<sp/>otherwise<sp/>data<sp/>is<sp/>destroyed<sp/>on<sp/>exiting<sp/>function</highlight></codeline>
<codeline lineno="471"><highlight class="comment"><sp/>std::copy(&amp;myNeuron,<sp/>&amp;myNeuron<sp/>+<sp/>1,<sp/>std::back_inserter(*toAddto));</highlight></codeline>
<codeline lineno="472"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="473"><highlight class="comment"><sp/>return<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Return<sp/>Success<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="474"><highlight class="comment"><sp/>}</highlight></codeline>
<codeline lineno="475"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="476"><highlight class="comment"><sp/>int<sp/>AddSpike(std::vector&lt;Spike&gt;<sp/>*toAddto)</highlight></codeline>
<codeline lineno="477"><highlight class="comment"><sp/>{</highlight></codeline>
<codeline lineno="478"><highlight class="comment"><sp/>Spike<sp/>mySpike;</highlight></codeline>
<codeline lineno="479"><highlight class="comment"><sp/>//<sp/>Use<sp/>move<sp/>not<sp/>push_back<sp/>otherwise<sp/>data<sp/>is<sp/>destroyed<sp/>on<sp/>exiting<sp/>function</highlight></codeline>
<codeline lineno="480"><highlight class="comment"><sp/>std::copy(&amp;mySpike,<sp/>&amp;mySpike<sp/>+<sp/>1,<sp/>std::back_inserter(*toAddto));</highlight></codeline>
<codeline lineno="481"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="482"><highlight class="comment"><sp/>return<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Return<sp/>Success<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="483"><highlight class="comment"><sp/>}</highlight></codeline>
<codeline lineno="484"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="485"><highlight class="comment"><sp/>int<sp/>AddDendrite(std::vector&lt;Dendrite&gt;<sp/>*toAddto)</highlight></codeline>
<codeline lineno="486"><highlight class="comment"><sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="comment"><sp/>Dendrite<sp/>myDendrite;</highlight></codeline>
<codeline lineno="488"><highlight class="comment"><sp/>//<sp/>Use<sp/>move<sp/>not<sp/>push_back<sp/>otherwise<sp/>data<sp/>is<sp/>destroyed<sp/>on<sp/>exiting<sp/>function</highlight></codeline>
<codeline lineno="489"><highlight class="comment"><sp/>std::copy(&amp;myDendrite,<sp/>&amp;myDendrite<sp/>+<sp/>1,<sp/>std::back_inserter(*toAddto));</highlight></codeline>
<codeline lineno="490"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="491"><highlight class="comment"><sp/>return<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Return<sp/>Success<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="492"><highlight class="comment"><sp/>}</highlight></codeline>
<codeline lineno="493"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="494"><highlight class="comment"><sp/>int<sp/>AddSynapse(std::vector&lt;Synapse&gt;<sp/>*toAddto,<sp/>std::vector&lt;Dimension&gt;<sp/>*aPartof,<sp/>int<sp/>arrayEntry)</highlight></codeline>
<codeline lineno="495"><highlight class="comment"><sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="comment"><sp/>Synapse<sp/>mySynapse((*aPartof)[arrayEntry]);</highlight></codeline>
<codeline lineno="497"><highlight class="comment"><sp/>//<sp/>Use<sp/>move<sp/>not<sp/>push_back<sp/>otherwise<sp/>data<sp/>is<sp/>destroyed<sp/>on<sp/>exiting<sp/>function</highlight></codeline>
<codeline lineno="498"><highlight class="comment"><sp/>std::copy(&amp;mySynapse,<sp/>&amp;mySynapse<sp/>+<sp/>1,<sp/>std::back_inserter(*toAddto));</highlight></codeline>
<codeline lineno="499"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="500"><highlight class="comment"><sp/>return<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Return<sp/>Success<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="501"><highlight class="comment"><sp/>}</highlight></codeline>
<codeline lineno="502"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="503"><highlight class="comment"><sp/>int<sp/>AddOrbital(std::vector&lt;Orbital&gt;<sp/>*toAddto,<sp/>std::vector&lt;Dimension&gt;<sp/>*aPartof,<sp/>int<sp/>arrayEntry,<sp/>int<sp/>orbType)</highlight></codeline>
<codeline lineno="504"><highlight class="comment"><sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="comment"><sp/>Orbital<sp/>myOrbital((*aPartof)[arrayEntry],<sp/>std::chrono::high_resolution_clock::now(),<sp/>orbType);</highlight></codeline>
<codeline lineno="506"><highlight class="comment"><sp/>//<sp/>Use<sp/>move<sp/>not<sp/>push_back<sp/>otherwise<sp/>data<sp/>is<sp/>destroyed<sp/>on<sp/>exiting<sp/>function</highlight></codeline>
<codeline lineno="507"><highlight class="comment"><sp/>std::copy(&amp;myOrbital,<sp/>&amp;myOrbital<sp/>+<sp/>1,<sp/>std::back_inserter(*toAddto));</highlight></codeline>
<codeline lineno="508"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="509"><highlight class="comment"><sp/>return<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Return<sp/>Success<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="510"><highlight class="comment"><sp/>}</highlight></codeline>
<codeline lineno="511"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="512"><highlight class="comment"><sp/>//<sp/>Adding<sp/>application<sp/>timer<sp/>temporarily<sp/>until<sp/>integrated<sp/>into<sp/>Dimension<sp/>class</highlight></codeline>
<codeline lineno="513"><highlight class="comment"><sp/>int<sp/>AddApptimer(std::vector&lt;AppTimer&gt;<sp/>*toAddto)</highlight></codeline>
<codeline lineno="514"><highlight class="comment"><sp/>{</highlight></codeline>
<codeline lineno="515"><highlight class="comment"><sp/>AppTimer<sp/>myApptimer;</highlight></codeline>
<codeline lineno="516"><highlight class="comment"><sp/>//<sp/>Use<sp/>move<sp/>not<sp/>push_back<sp/>otherwise<sp/>data<sp/>is<sp/>destroyed<sp/>on<sp/>exiting<sp/>function</highlight></codeline>
<codeline lineno="517"><highlight class="comment"><sp/>std::copy(&amp;myApptimer,<sp/>&amp;myApptimer<sp/>+<sp/>1,<sp/>std::back_inserter(*toAddto));</highlight></codeline>
<codeline lineno="518"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="519"><highlight class="comment"><sp/>return<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Return<sp/>Success<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="520"><highlight class="comment"><sp/>}</highlight></codeline>
<codeline lineno="521"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>which<sp/>Candidate<sp/>is<sp/>closest<sp/>to<sp/>being<sp/>3<sp/>away<sp/>in<sp/>the<sp/>charge<sp/>values<sp/>and<sp/>move<sp/>that<sp/>Candidate<sp/>next<sp/>to<sp/>the<sp/>Origin.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524" refid="_brain_harmonics_8cc_1a9b04070a3ed092a2de7fd1496edb94ec" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_brain_harmonics_8cc_1a9b04070a3ed092a2de7fd1496edb94ec" kindref="member">CompareSwapElementaryParticle</ref>(std::chrono::time_point&lt;Clock&gt;<sp/>event_time,<sp/>std::vector&lt;ElementaryParticle*&gt;&amp;<sp/>origin,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l_origin_Swap,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l_origin_Candidate1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l_origin_Candidate2)</highlight></codeline>
<codeline lineno="525"><highlight class="normal">{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>l_switch<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l_origin<sp/>=<sp/>origin[l_origin_Swap]-&gt;GetCharge(event_time);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l_origin_Test1<sp/>=<sp/>origin[l_origin_Candidate1]-&gt;GetCharge(event_time);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l_origin_Test2<sp/>=<sp/>origin[l_origin_Candidate2]-&gt;GetCharge(event_time);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l_origin_Test3<sp/>=<sp/>std::abs(l_origin<sp/>-<sp/>l_origin_Test1);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l_origin_Test4<sp/>=<sp/>std::abs(l_origin<sp/>-<sp/>l_origin_Test2);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l_origin_Test5<sp/>=<sp/>(3.0<sp/>-<sp/>l_origin_Test3);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l_origin_Test6<sp/>=<sp/>(3.0<sp/>-<sp/>l_origin_Test4);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>l_switch<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(l_origin_Test5<sp/>&gt;<sp/>l_origin_Test6<sp/>&amp;&amp;<sp/>l_origin<sp/>!=<sp/>l_origin_Candidate2)</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter_swap(origin.begin()<sp/>+<sp/>l_origin_Candidate1,<sp/>origin.begin()<sp/>+<sp/>l_origin_Candidate2);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_switch<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>l_switch;<sp/></highlight><highlight class="comment">//<sp/>Return<sp/>answering<sp/>whether<sp/>or<sp/>not<sp/>an<sp/>exchange<sp/>occurred</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal">}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546" refid="_brain_harmonics_8cc_1ad9e8231d206ab9486cd74390d97e12fe" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_brain_harmonics_8cc_1ad9e8231d206ab9486cd74390d97e12fe" kindref="member">DistanceBetweenNodes</ref>(std::chrono::time_point&lt;Clock&gt;<sp/>event_time,<sp/>std::vector&lt;Point&gt;<sp/>*nodesQuery,<sp/>std::vector&lt;int&gt;<sp/>*nodes_list,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodesDimensions,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>desired_distance<sp/>)</highlight></codeline>
<codeline lineno="547"><highlight class="normal">{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>firstX;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>firstY;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>firstZ;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>secondX;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>secondY;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>secondZ;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>direction;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>diffX;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>diffY;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>diffZ;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>diffX2;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>diffY2;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>diffZ2;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>slope;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>actualDistance;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angleRAD;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angleDEG;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>node_loop<sp/>=<sp/>0;<sp/>node_loop<sp/>&lt;<sp/>nodes_list-&gt;size();<sp/>node_loop++<sp/>)</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>firstX<sp/>=<sp/>(*nodesQuery)[node_loop].GetPointPosition(event_time)[0];</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>firstY<sp/>=<sp/>(*nodesQuery)[node_loop].GetPointPosition(event_time)[1];</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secondX<sp/>=<sp/>(*nodesQuery)[node_loop].GetPointPosition(event_time)[0];</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secondY<sp/>=<sp/>(*nodesQuery)[node_loop].GetPointPosition(event_time)[1];</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diffX<sp/>=<sp/>firstX<sp/>-<sp/>secondX;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diffX2<sp/>=<sp/>diffX<sp/>*<sp/>diffX;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diffY<sp/>=<sp/>firstY<sp/>-<sp/>secondY;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diffY2<sp/>=<sp/>diffY<sp/>*<sp/>diffY;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slope<sp/>=<sp/>diffY<sp/>/<sp/>diffX;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actualDistance<sp/>=<sp/>fabs(sqrt(diffX2<sp/>+<sp/>diffY2));</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angleRAD<sp/>=<sp/>atan2(diffY,diffX);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angleDEG<sp/>=<sp/>angleRAD<sp/>*<sp/><ref refid="universe_8h_1ac5a945020d3528355cda82d383676736" kindref="member">RAD2DEG</ref>;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(firstX<sp/>&lt;<sp/>secondX<sp/>&amp;&amp;<sp/>firstY<sp/>&gt;<sp/>secondY)</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angleDEG<sp/>=<sp/>angleDEG<sp/>+<sp/>90.0;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(firstX<sp/>&gt;<sp/>secondX<sp/>&amp;&amp;<sp/>firstY<sp/>&gt;<sp/>secondY)</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angleDEG<sp/>=<sp/>angleDEG<sp/>+<sp/>180.0;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(firstX<sp/>&gt;<sp/>secondX<sp/>&amp;&amp;<sp/>firstY<sp/>&lt;<sp/>secondY)</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angleDEG<sp/>=<sp/>angleDEG<sp/>+<sp/>270.0;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angleRAD<sp/>=<sp/>angleDEG<sp/>*<sp/><ref refid="universe_8h_1af7e8592d0a634bd3642e9fd508ea8022" kindref="member">DEG2RAD</ref>;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>direction<sp/>=<sp/>actualDistance<sp/>-<sp/>desired_distance;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(direction<sp/>&gt;<sp/>-1.0<sp/>and<sp/>direction<sp/>&lt;<sp/>1.0)</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diffX<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diffY<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="606"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(desired_distance<sp/>&lt;<sp/>actualDistance)</highlight></codeline>
<codeline lineno="607"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="608"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diffX<sp/>=<sp/>sin(angleRAD);</highlight></codeline>
<codeline lineno="609"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diffY<sp/>=<sp/>cos(angleRAD);</highlight></codeline>
<codeline lineno="610"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="611"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="612"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(desired_distance<sp/>&gt;<sp/>actualDistance)</highlight></codeline>
<codeline lineno="613"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="614"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diffX<sp/>=<sp/>sin(angleRAD<sp/>+<sp/>ONERAD);</highlight></codeline>
<codeline lineno="615"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diffY<sp/>=<sp/>cos(angleRAD<sp/>+<sp/>ONERAD);</highlight></codeline>
<codeline lineno="616"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="617"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diffX<sp/>=<sp/>actualDistance<sp/>*<sp/>cos(diffX<sp/>/<sp/>actualDistance);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diffY<sp/>=<sp/>actualDistance<sp/>*<sp/>sin(diffY<sp/>/<sp/>actualDistance);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="624"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(desired_distance<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="625"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="626"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if((actualDistance<sp/>/<sp/>desired_distance)<sp/>&gt;<sp/>0.95<sp/>&amp;&amp;<sp/>(actualDistance<sp/>/<sp/>desired_distance)<sp/>&lt;<sp/>1.05)</highlight></codeline>
<codeline lineno="627"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="628"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*nodesQuery)[(*nodes_list)[0]]-&gt;SetPointDifferential(0);</highlight></codeline>
<codeline lineno="629"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*nodesQuery)[(*nodes_list)[0]]-&gt;SetPointMove(0);</highlight></codeline>
<codeline lineno="630"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*nodesQuery)[(*nodes_list)[1]]-&gt;SetPointDifferential(0);</highlight></codeline>
<codeline lineno="631"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*nodesQuery)[(*nodes_list)[1]]-&gt;SetPointMove(0);</highlight></codeline>
<codeline lineno="632"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="634"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*nodesQuery)[(*nodes_list)[2]]-&gt;SetPointDifferential(0);</highlight></codeline>
<codeline lineno="635"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*nodesQuery)[(*nodes_list)[2]]-&gt;SetPointMove(0);</highlight></codeline>
<codeline lineno="636"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*nodesQuery)[(*nodes_list)[3]]-&gt;SetPointDifferential(0);</highlight></codeline>
<codeline lineno="637"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*nodesQuery)[(*nodes_list)[3]]-&gt;SetPointMove(0);</highlight></codeline>
<codeline lineno="638"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="640"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="641"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="642"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="643"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nloop<sp/>=<sp/>0;<sp/>nloop<sp/>&lt;<sp/>int((*nodesQuery)[node_loop].GetPointDifferential(event_time).<ref refid="glad_8h_1a3d1e3edfcf61ca2d831883e1afbad89e" kindref="member">size</ref>());<sp/>nloop++)</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*nodesQuery)[node_loop].SetPointDifferential((((*nodesQuery)[node_loop].GetPointDifferential()[nloop]<sp/>+<sp/>diffX)/2.0))[nloop];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*nodesQuery)[node_loop].SetPointDifferential((((*nodesQuery)[node_loop].GetPointDifferential()[nloop]<sp/>+<sp/>diffY)/2.0))[nloop];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*nodesQuery)[(*nodes_list)[2]]-&gt;SetPointDifferential((((*nodesQuery)[(*nodes_list)[2]].getPointDifferential()<sp/>-<sp/>diffX)/2));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*nodesQuery)[(*nodes_list)[3]]-&gt;SetPointDifferential((((*nodesQuery)[(*nodes_list)[3]].getPointDifferential()<sp/>-<sp/>diffY)/2));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_SUCCESS;</highlight></codeline>
<codeline lineno="657"><highlight class="normal">}</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>which<sp/>Candidate<sp/>is<sp/>closest<sp/>to<sp/>being<sp/>3<sp/>away<sp/>in<sp/>the<sp/>charge<sp/>values<sp/>and<sp/>move<sp/>that<sp/>Candidate<sp/>next<sp/>to<sp/>the<sp/>Origin.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660" refid="_brain_harmonics_8cc_1ac0bef70f5c895e9fe4271808d3f87a96" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_brain_harmonics_8cc_1ac0bef70f5c895e9fe4271808d3f87a96" kindref="member">compare_swapSynapse</ref>(std::chrono::time_point&lt;Clock&gt;<sp/>event_time,<sp/>std::vector&lt;Synapse*&gt;<sp/>origin,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l_origin_Swap,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l_origin_Candidate1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l_origin_Candidate2)</highlight></codeline>
<codeline lineno="661"><highlight class="normal">{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>l_switch<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l_origin<sp/>=<sp/>origin[l_origin_Swap]-&gt;GetDemand(event_time);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l_origin_Test1<sp/>=<sp/>origin[l_origin_Candidate1]-&gt;GetDemand(event_time);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l_origin_Test2<sp/>=<sp/>origin[l_origin_Candidate2]-&gt;GetDemand(event_time);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l_origin_Test3<sp/>=<sp/>std::abs(l_origin<sp/>-<sp/>l_origin_Test1);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l_origin_Test4<sp/>=<sp/>std::abs(l_origin<sp/>-<sp/>l_origin_Test2);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l_origin_Test5<sp/>=<sp/>(l_origin_Test3);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l_origin_Test6<sp/>=<sp/>(l_origin_Test4);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>l_switch<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(l_origin_Test5<sp/>&gt;<sp/>l_origin_Test6<sp/>&amp;&amp;<sp/>l_origin<sp/>!=<sp/>l_origin_Candidate2)</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter_swap(origin.begin()<sp/>+<sp/>l_origin_Candidate1,<sp/>origin.begin()<sp/>+<sp/>l_origin_Candidate2);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_switch<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>l_switch;<sp/></highlight><highlight class="comment">//<sp/>Return<sp/>answering<sp/>whether<sp/>or<sp/>not<sp/>an<sp/>exchange<sp/>occurred</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal">}</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683" refid="_brain_harmonics_8cc_1a5611d454c4206879b20ed7a094a223b0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_brain_harmonics_8cc_1a5611d454c4206879b20ed7a094a223b0" kindref="member">analyseStream</ref>(std::chrono::time_point&lt;Clock&gt;<sp/>event_time,<sp/><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref>*<sp/>cognitive_network,<sp/>std::vector&lt;Neuron*&gt;<sp/>neuron_list,<sp/>std::vector&lt;Point*&gt;<sp/>aPoint,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start_point,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end_point,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stepPoint,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>neural_sequence)</highlight></codeline>
<codeline lineno="684"><highlight class="normal">{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>feed;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>neuronStimulated<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="688"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>for(int<sp/>analyse_loop<sp/>=<sp/>start_point;<sp/>analyse_loop<sp/>&lt;<sp/>end_point;<sp/>analyse_loop<sp/>=<sp/>analyse_loop<sp/>+<sp/>stepPoint)</highlight></codeline>
<codeline lineno="689"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="690"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>feed<sp/>=<sp/>aPoint[analyse_loop]-&gt;GetPointPosition(event_time);</highlight></codeline>
<codeline lineno="691"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>neuronStimulated<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="692"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="693"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>for(int<sp/>gate_loop<sp/>=<sp/>0;<sp/>gate_loop<sp/>&lt;<sp/>int(neuron_list.size());<sp/>gate_loop++)</highlight></codeline>
<codeline lineno="694"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="695"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if(int(neuron_list.size())<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="696"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="697"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if(neuron_list[gate_loop]-&gt;GetCounter(event_time)<sp/>==<sp/>neural_sequence)</highlight></codeline>
<codeline lineno="698"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="699"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if(neuron_list[gate_loop]-&gt;OpenGate(feed)<sp/>==<sp/>true)</highlight></codeline>
<codeline lineno="700"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="701"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>neuronStimulated<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="702"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>for(int<sp/>stimulate_loop<sp/>=<sp/>gate_loop<sp/>+<sp/>1;<sp/>stimulate_loop<sp/>&lt;<sp/>gate_loop<sp/>+<sp/>5;<sp/>stimulate_loop++)</highlight></codeline>
<codeline lineno="703"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="704"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if(stimulate_loop<sp/>&lt;<sp/>int(neuron_list.size()))</highlight></codeline>
<codeline lineno="705"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="706"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if(neuron_list[stimulate_loop]-&gt;GetCounter(event_time)<sp/>==<sp/>neural_sequence)</highlight></codeline>
<codeline lineno="707"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="708"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>neuron_list[stimulate_loop]-&gt;OpenGate(feed);</highlight></codeline>
<codeline lineno="709"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="710"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="711"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="712"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="713"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="714"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="715"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="716"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="717"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>cognitive_network-&gt;AddNeuron(event_time,<sp/>1);</highlight></codeline>
<codeline lineno="718"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>cognitive_network-&gt;GetNeurons(event_time).back().setGateKeeper(feed);</highlight></codeline>
<codeline lineno="719"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>cognitive_network-&gt;GetNeurons(event_time).back().setChannelMin(feed<sp/>-<sp/>1.0);</highlight></codeline>
<codeline lineno="720"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>cognitive_network-&gt;GetNeurons(event_time).back().setChannelMax(feed<sp/>+<sp/>1.0);</highlight></codeline>
<codeline lineno="721"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>cognitive_network-&gt;GetNeurons(event_time).back().setCounter(neural_sequence);</highlight></codeline>
<codeline lineno="722"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>neuronStimulated<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="723"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="724"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="725"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="726"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if(neuronStimulated<sp/>==<sp/>false)</highlight></codeline>
<codeline lineno="727"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="728"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>cognitive_network-&gt;AddNeuron(event_time,<sp/>1);</highlight></codeline>
<codeline lineno="729"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>cognitive_network-&gt;GetNeurons(event_time).back().setGateKeeper(feed);</highlight></codeline>
<codeline lineno="730"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>cognitive_network-&gt;GetNeurons(event_time).back().setChannelMin(feed<sp/>-<sp/>1.0);</highlight></codeline>
<codeline lineno="731"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>cognitive_network-&gt;GetNeurons(event_time).back().setChannelMax(feed<sp/>+<sp/>1.0);</highlight></codeline>
<codeline lineno="732"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>cognitive_network-&gt;GetNeurons(event_time).back().setCounter(neural_sequence);</highlight></codeline>
<codeline lineno="733"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="734"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="735"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>for(int<sp/>readoutLoop<sp/>=<sp/>0;<sp/>readoutLoop<sp/>&lt;<sp/>int(neuron_list.size());<sp/>readoutLoop++)</highlight></codeline>
<codeline lineno="736"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="737"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if(neuron_list[readoutLoop]-&gt;GetCounter(event_time)<sp/>==<sp/>neural_sequence)</highlight></codeline>
<codeline lineno="738"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="739"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Sequence:<sp/>&quot;<sp/>&lt;&lt;<sp/>neural_sequence<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>readoutLoop<sp/>&lt;&lt;<sp/>&quot;:<sp/>Value:<sp/>&quot;<sp/>&lt;&lt;<sp/>(*neuron_list)[readoutLoop].GetGateKeeper(event_time)<sp/>&lt;&lt;<sp/>&quot;<sp/>Energy:<sp/>&quot;<sp/>&lt;&lt;<sp/>(*neuron_list)[readoutLoop].getEnergy()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="740"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="741"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="742"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="744"><highlight class="normal">}</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747" refid="_brain_harmonics_8cc_1ac9572b51d93c224b7db42a9e06854242" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_brain_harmonics_8cc_1ac9572b51d93c224b7db42a9e06854242" kindref="member">ClearDimensionSelection</ref>(std::vector&lt;int&gt;<sp/>*dimension_list)</highlight></codeline>
<codeline lineno="748"><highlight class="normal">{</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>dimension_list-&gt;clear();</highlight></codeline>
<codeline lineno="750"><highlight class="normal">}</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752" refid="_brain_harmonics_8cc_1ab8cdde3a90c31c1e2f30432b507359c1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_brain_harmonics_8cc_1ab8cdde3a90c31c1e2f30432b507359c1" kindref="member">SelectDimension</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PossibleDimensions[10],<sp/>std::vector&lt;int&gt;<sp/>*dimension_list,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>whichDimension)</highlight></codeline>
<codeline lineno="753"><highlight class="normal">{</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l_counter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nloop<sp/>=<sp/>0;<sp/>nloop<sp/>&lt;<sp/>10;<sp/>nloop++)</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>zloop<sp/>=<sp/>0;<sp/>zloop<sp/>&lt;<sp/>PossibleDimensions[nloop];<sp/>zloop++)</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_counter++;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(zloop<sp/>==<sp/>whichDimension)</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*dimension_list).push_back(l_counter);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="766"><highlight class="normal">}</highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight></codeline>
<codeline lineno="768" refid="_brain_harmonics_8cc_1aeab5d0ce3757048194ec88e39b7fa82b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_brain_harmonics_8cc_1aeab5d0ce3757048194ec88e39b7fa82b" kindref="member">SelectMultiDimensions</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PossibleDimensions[10],<sp/>std::vector&lt;int&gt;<sp/>*dimension_list,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>how_manyDimensions)</highlight></codeline>
<codeline lineno="769"><highlight class="normal">{</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nloop<sp/>=<sp/>0;<sp/>nloop<sp/>&lt;<sp/>how_manyDimensions;<sp/>nloop++)</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1ab8cdde3a90c31c1e2f30432b507359c1" kindref="member">SelectDimension</ref>(PossibleDimensions,<sp/>&amp;(*dimension_list),<sp/>nloop);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="775"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Dimensions<sp/>selected:<sp/>&quot;;</highlight></codeline>
<codeline lineno="776"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>for(int<sp/>zloop<sp/>=<sp/>0;<sp/>zloop<sp/>&lt;<sp/>dimension_list-&gt;size();<sp/>zloop++)</highlight></codeline>
<codeline lineno="777"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="778"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(*dimension_list)[zloop]<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;;</highlight></codeline>
<codeline lineno="779"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="780"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="781"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal">}</highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="785" refid="_brain_harmonics_8cc_1aefff80cf47ae6c975b4aed196c12d92a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_brain_harmonics_8cc_1aefff80cf47ae6c975b4aed196c12d92a" kindref="member">ClearDynapse</ref>(caerDeviceHandle<sp/>*usb_handle)</highlight></codeline>
<codeline lineno="786"><highlight class="normal">{</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Let&apos;s<sp/>take<sp/>a<sp/>look<sp/>at<sp/>the<sp/>information<sp/>we<sp/>have<sp/>on<sp/>the<sp/>device.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1af414029bac33d3b71ad5622dc83149d6" kindref="member">dynapse_info</ref><sp/>=<sp/>caerDynapseInfoGet(*usb_handle);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s<sp/>---<sp/>ID:<sp/>%d,<sp/>Master:<sp/>%d,<sp/><sp/>Logic:<sp/>%d.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1af414029bac33d3b71ad5622dc83149d6" kindref="member">dynapse_info</ref>.deviceString,<sp/><ref refid="_brain_harmonics_8cc_1af414029bac33d3b71ad5622dc83149d6" kindref="member">dynapse_info</ref>.deviceID,</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1af414029bac33d3b71ad5622dc83149d6" kindref="member">dynapse_info</ref>.deviceIsMaster,<sp/><ref refid="_brain_harmonics_8cc_1af414029bac33d3b71ad5622dc83149d6" kindref="member">dynapse_info</ref>.logicVersion);</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Let&apos;s<sp/>turn<sp/>on<sp/>blocking<sp/>data-get<sp/>mode<sp/>to<sp/>avoid<sp/>wasting<sp/>resources.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/>caerDeviceConfigSet(*usb_handle,<sp/>CAER_HOST_CONFIG_DATAEXCHANGE,<sp/>CAER_HOST_CONFIG_DATAEXCHANGE_BLOCKING,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>caerDeviceConfigSet(*usb_handle,<sp/>DYNAPSE_CONFIG_CHIP,<sp/>DYNAPSE_CONFIG_CHIP_RUN,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>caerDeviceConfigSet(*usb_handle,<sp/>DYNAPSE_CONFIG_AER,<sp/>DYNAPSE_CONFIG_AER_RUN,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>chip<sp/>id<sp/>is<sp/>DYNAPSE_CONFIG_DYNAPSE_U2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>caerDeviceConfigSet(*usb_handle,<sp/>DYNAPSE_CONFIG_CHIP,<sp/>DYNAPSE_CONFIG_CHIP_ID,<sp/>DYNAPSE_CONFIG_DYNAPSE_U2);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/>caerDeviceConfigSet(*usb_handle,<sp/>DYNAPSE_CONFIG_MUX,<sp/>DYNAPSE_CONFIG_MUX_FORCE_CHIP_BIAS_ENABLE,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Configuring<sp/>silent<sp/>biases...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ifstream<sp/><ref refid="glad_8h_1ad3c78daa7d8673f71649d4840c641779" kindref="member">input</ref>(<sp/><ref refid="_brain_harmonics_8cc_1a5abc2fe5dd32fab087839bf8b005e6c9" kindref="member">DEFAULTBIASES</ref>);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="glad_8h_1ae84541b4f3d8e1ea24ec0f466a8c568b" kindref="member">std::string</ref><sp/>line;<sp/>getline(<ref refid="glad_8h_1ad3c78daa7d8673f71649d4840c641779" kindref="member">input</ref>,<sp/>line);)</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i_dec<sp/>=<sp/>atoi(line.c_str());</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>caerDeviceConfigSet(*usb_handle,<sp/>DYNAPSE_CONFIG_CHIP,<sp/>DYNAPSE_CONFIG_CHIP_CONTENT,<sp/>i_dec);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="glad_8h_1ad3c78daa7d8673f71649d4840c641779" kindref="member">input</ref>.close();</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>Done.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Configuring<sp/>sram<sp/>content...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/>caerDeviceConfigSet(*usb_handle,<sp/>DYNAPSE_CONFIG_CHIP,<sp/>DYNAPSE_CONFIG_CHIP_ID,<sp/>DYNAPSE_CONFIG_DYNAPSE_U2);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>caerDeviceConfigSet(*usb_handle,<sp/>DYNAPSE_CONFIG_DEFAULT_SRAM,<sp/>DYNAPSE_CONFIG_DYNAPSE_U2,<sp/>0);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>Done.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Configuring<sp/>cam<sp/>content...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>caerDeviceConfigSet(*usb_handle,<sp/>DYNAPSE_CONFIG_CHIP,<sp/>DYNAPSE_CONFIG_CHIP_ID,<sp/>DYNAPSE_CONFIG_DYNAPSE_U2);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>caerDeviceConfigSet(*usb_handle,<sp/>DYNAPSE_CONFIG_CLEAR_CAM,<sp/>DYNAPSE_CONFIG_DYNAPSE_U2,<sp/>0);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>Done.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>close<sp/>config</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>caerDeviceConfigSet(*usb_handle,<sp/>DYNAPSE_CONFIG_CHIP,<sp/>DYNAPSE_CONFIG_CHIP_RUN,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//close<sp/>aer<sp/>communication</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>caerDeviceConfigSet(*usb_handle,<sp/>DYNAPSE_CONFIG_AER,<sp/>DYNAPSE_CONFIG_AER_RUN,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//caerDeviceDataStop(usb_handle);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="833"><highlight class="normal">}</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="836"><highlight class="comment"><sp/>Menu1.setFont(Font);</highlight></codeline>
<codeline lineno="837"><highlight class="comment"><sp/>Menu1.setCharacterSize(20);</highlight></codeline>
<codeline lineno="838"><highlight class="comment"><sp/>Menu1.setString(&quot;Add<sp/>item&quot;);</highlight></codeline>
<codeline lineno="839"><highlight class="comment"><sp/>Menu1.setPosition(<sp/>280.0,<sp/>160.0<sp/>);</highlight></codeline>
<codeline lineno="840"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="841"><highlight class="comment"><sp/>Menu2.setFont(Font);</highlight></codeline>
<codeline lineno="842"><highlight class="comment"><sp/>Menu2.setCharacterSize(20);</highlight></codeline>
<codeline lineno="843"><highlight class="comment"><sp/>Menu2.setString(&quot;Remove<sp/>item&quot;);</highlight></codeline>
<codeline lineno="844"><highlight class="comment"><sp/>Menu2.setPosition(<sp/>280.0,<sp/>220.0<sp/>);</highlight></codeline>
<codeline lineno="845"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="846"><highlight class="comment"><sp/>Menu3.setFont(Font);</highlight></codeline>
<codeline lineno="847"><highlight class="comment"><sp/>Menu3.setCharacterSize(20);</highlight></codeline>
<codeline lineno="848"><highlight class="comment"><sp/>Menu3.setString(&quot;Up<sp/>level&quot;);</highlight></codeline>
<codeline lineno="849"><highlight class="comment"><sp/>Menu3.setPosition(<sp/>280.0,<sp/>280.0<sp/>);</highlight></codeline>
<codeline lineno="850"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="851"><highlight class="comment"><sp/>Menu4.setFont(Font);</highlight></codeline>
<codeline lineno="852"><highlight class="comment"><sp/>Menu4.setCharacterSize(20);</highlight></codeline>
<codeline lineno="853"><highlight class="comment"><sp/>Menu4.setString(&quot;Down<sp/>level&quot;);</highlight></codeline>
<codeline lineno="854"><highlight class="comment"><sp/>Menu4.setPosition(<sp/>280.0,<sp/>320.0<sp/>);</highlight></codeline>
<codeline lineno="855"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="856"><highlight class="comment"><sp/>while<sp/>(Running)</highlight></codeline>
<codeline lineno="857"><highlight class="comment"><sp/>{</highlight></codeline>
<codeline lineno="858"><highlight class="comment"><sp/>while(app.pollEvent(Event))</highlight></codeline>
<codeline lineno="859"><highlight class="comment"><sp/>{</highlight></codeline>
<codeline lineno="860"><highlight class="comment"><sp/>//<sp/>Window<sp/>closed</highlight></codeline>
<codeline lineno="861"><highlight class="comment"><sp/>if<sp/>(Event.type<sp/>==<sp/>sf::Event::Closed)</highlight></codeline>
<codeline lineno="862"><highlight class="comment"><sp/>{</highlight></codeline>
<codeline lineno="863"><highlight class="comment"><sp/>return<sp/>(-1);</highlight></codeline>
<codeline lineno="864"><highlight class="comment"><sp/>}</highlight></codeline>
<codeline lineno="865"><highlight class="comment"><sp/>}</highlight></codeline>
<codeline lineno="866"><highlight class="comment"><sp/>if<sp/>(menu<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="867"><highlight class="comment"><sp/>{</highlight></codeline>
<codeline lineno="868"><highlight class="comment"><sp/>Menu1.setOutlineColor(sf::Color(255,<sp/>0,<sp/>0,<sp/>255));</highlight></codeline>
<codeline lineno="869"><highlight class="comment"><sp/>Menu1.setFillColor(sf::Color(255,<sp/>0,<sp/>0,<sp/>255));</highlight></codeline>
<codeline lineno="870"><highlight class="comment"><sp/>Menu2.setOutlineColor(sf::Color(255,<sp/>255,<sp/>255,<sp/>255));</highlight></codeline>
<codeline lineno="871"><highlight class="comment"><sp/>Menu2.setFillColor(sf::Color(255,<sp/>255,<sp/>255,<sp/>255));</highlight></codeline>
<codeline lineno="872"><highlight class="comment"><sp/>Menu3.setOutlineColor(sf::Color(255,<sp/>0,<sp/>0,<sp/>255));</highlight></codeline>
<codeline lineno="873"><highlight class="comment"><sp/>Menu3.setFillColor(sf::Color(255,<sp/>0,<sp/>0,<sp/>255));</highlight></codeline>
<codeline lineno="874"><highlight class="comment"><sp/>Menu4.setOutlineColor(sf::Color(255,<sp/>0,<sp/>0,<sp/>255));</highlight></codeline>
<codeline lineno="875"><highlight class="comment"><sp/>Menu4.setFillColor(sf::Color(255,<sp/>0,<sp/>0,<sp/>255));</highlight></codeline>
<codeline lineno="876"><highlight class="comment"><sp/>}</highlight></codeline>
<codeline lineno="877"><highlight class="comment"><sp/>else</highlight></codeline>
<codeline lineno="878"><highlight class="comment"><sp/>{</highlight></codeline>
<codeline lineno="879"><highlight class="comment"><sp/>Menu1.setOutlineColor(sf::Color(255,<sp/>255,<sp/>255,<sp/>255));</highlight></codeline>
<codeline lineno="880"><highlight class="comment"><sp/>Menu1.setFillColor(sf::Color(255,<sp/>255,<sp/>255,<sp/>255));</highlight></codeline>
<codeline lineno="881"><highlight class="comment"><sp/>Menu2.setOutlineColor(sf::Color(255,<sp/>0,<sp/>0,<sp/>255));</highlight></codeline>
<codeline lineno="882"><highlight class="comment"><sp/>Menu2.setFillColor(sf::Color(255,<sp/>0,<sp/>0,<sp/>255));</highlight></codeline>
<codeline lineno="883"><highlight class="comment"><sp/>Menu3.setOutlineColor(sf::Color(255,<sp/>255,<sp/>255,<sp/>255));</highlight></codeline>
<codeline lineno="884"><highlight class="comment"><sp/>Menu3.setFillColor(sf::Color(255,<sp/>255,<sp/>255,<sp/>255));</highlight></codeline>
<codeline lineno="885"><highlight class="comment"><sp/>Menu4.setOutlineColor(sf::Color(255,<sp/>255,<sp/>255,<sp/>255));</highlight></codeline>
<codeline lineno="886"><highlight class="comment"><sp/>Menu4.setFillColor(sf::Color(255,<sp/>255,<sp/>255,<sp/>255));</highlight></codeline>
<codeline lineno="887"><highlight class="comment"><sp/>}</highlight></codeline>
<codeline lineno="888"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="889"><highlight class="comment"><sp/>app.clear();</highlight></codeline>
<codeline lineno="890"><highlight class="comment"><sp/>app.display();</highlight></codeline>
<codeline lineno="891"><highlight class="comment"><sp/>}</highlight></codeline>
<codeline lineno="892"><highlight class="comment"><sp/>return<sp/>(-1);</highlight></codeline>
<codeline lineno="893"><highlight class="comment"><sp/>}</highlight></codeline>
<codeline lineno="894"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="895"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>memory<sp/>to<sp/>cleanly<sp/>exit<sp/>application</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897" refid="_brain_harmonics_8cc_1a8760404347fd84a1ed5b49aae3737647" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_brain_harmonics_8cc_1a8760404347fd84a1ed5b49aae3737647" kindref="member">exitCB</ref>()</highlight></codeline>
<codeline lineno="898"><highlight class="normal">{</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Exiting<sp/>Program.<sp/>Press<sp/>Any<sp/>key<sp/>to<sp/>complete.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>pause<sp/>for<sp/>Any<sp/>key<sp/>to<sp/>be<sp/>pressed,<sp/>only<sp/>needed<sp/>for<sp/>Windows<sp/>to<sp/>stop<sp/>console<sp/>window<sp/>closing*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cin.get();</highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>vectors<sp/>in<sp/>reverse<sp/>order<sp/>to<sp/>free-up<sp/>memory<sp/>before<sp/>exiting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remember<sp/>to<sp/>clear<sp/>vectors<sp/>/<sp/>free<sp/>memory<sp/>before<sp/>returning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal">}</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="910" refid="_brain_harmonics_8cc_1a487a3c399210173e1b3d3a2f275a55b1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_brain_harmonics_8cc_1a487a3c399210173e1b3d3a2f275a55b1" kindref="member">init</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>argv[])</highlight></codeline>
<codeline lineno="911"><highlight class="normal">{</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialise<sp/>random<sp/>seed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/>srand<sp/>(time(NULL));</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/>atexit(<ref refid="_brain_harmonics_8cc_1a8760404347fd84a1ed5b49aae3737647" kindref="member">exitCB</ref>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>application<sp/>exit<sp/>callback<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="917"><highlight class="normal">}</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Macro<sp/>required<sp/>otherwise<sp/>return<sp/>value<sp/>upsets<sp/>calling<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&gt;=<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925" refid="_brain_harmonics_8cc_1a909ced1ec126d134c4c2bf71f5ead148" refkind="member"><highlight class="normal"><ref refid="_brain_harmonics_8cc_1a909ced1ec126d134c4c2bf71f5ead148" kindref="member">init_numpy</ref>()</highlight></codeline>
<codeline lineno="926"><highlight class="normal">{</highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>import_array();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&gt;=<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal">}</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933" refid="class_update_all_command" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_update_all_command" kindref="compound">UpdateAllCommand</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>vtkCommand</highlight></codeline>
<codeline lineno="934"><highlight class="normal">{</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_update_all_command_1a228565b2a2306d425dc7eb3cda4d39a4" kindref="member">vtkTypeMacro</ref>(<ref refid="class_update_all_command" kindref="compound">UpdateAllCommand</ref>,<sp/>vtkCommand);</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="938" refid="class_update_all_command_1a97cd6ef1c68bb473aef27c898b175517" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_update_all_command" kindref="compound">UpdateAllCommand</ref><sp/>*<sp/><ref refid="class_update_all_command_1a97cd6ef1c68bb473aef27c898b175517" kindref="member">New</ref>()</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_update_all_command" kindref="compound">UpdateAllCommand</ref>;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="943" refid="class_update_all_command_1aa836cd5d538016289656d8118da879c5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_update_all_command_1aa836cd5d538016289656d8118da879c5" kindref="member">Execute</ref>(vtkObject<sp/>*<sp/>vtkNotUsed(caller),<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>vtkNotUsed(eventId),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>vtkNotUsed(callData))</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline lineno="944"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>renderer<sp/>=<sp/>vtkSmartPointer&lt;vtkRenderer&gt;::New();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>id_counter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cellarrays_group_counter<sp/>=<sp/><ref refid="_brain_harmonics_8cc_1a3f51384611b8ff0bcedef8dc6f27bbc8" kindref="member">static_cellarrays_counter</ref><sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>polydata_group_counter<sp/>=<sp/><ref refid="_brain_harmonics_8cc_1a0ac21544be2eca2667c5acc784111848" kindref="member">static_polydata_counter</ref><sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>surfaces_group_counter<sp/>=<sp/><ref refid="_brain_harmonics_8cc_1acdcbc10d39db69593dfc42972b200e46" kindref="member">static_surfaces_counter</ref>;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>contourfilter_group_counter<sp/>=<sp/><ref refid="_brain_harmonics_8cc_1af896e11b42f684e4fadc0d4a2826538a" kindref="member">static_contourfilter_counter</ref>;</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reversals_group_counter<sp/>=<sp/><ref refid="_brain_harmonics_8cc_1a4062a4c3764de7ed239d33608ca291ae" kindref="member">static_reversals_counter</ref>;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>datamappers_group_counter<sp/>=<sp/><ref refid="_brain_harmonics_8cc_1ab96b88b97440e7d703e0ac1774115227" kindref="member">static_datamappers_counter</ref>;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>actors_group_counter<sp/>=<sp/><ref refid="_brain_harmonics_8cc_1ad53e9035f7facd9c99c57107d9f84ac6" kindref="member">static_actors_counter</ref>;</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>renderers_group_counter<sp/>=<sp/><ref refid="_brain_harmonics_8cc_1aad3d1808a6ab9363f0430c1e9650324d" kindref="member">static_renderers_counter</ref><sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>event_time<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Universe*&gt;<sp/>set_of_update_pointers;</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Universe*&gt;::iterator<sp/>universe_iter;</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(universe_iter<sp/>=<sp/><ref refid="_brain_harmonics_8cc_1a602d3f70549216866d35be56a17fa06e" kindref="member">universe_list</ref>.begin();<sp/>universe_iter<sp/>!=<sp/><ref refid="_brain_harmonics_8cc_1a602d3f70549216866d35be56a17fa06e" kindref="member">universe_list</ref>.end();<sp/>++universe_iter)</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Call<sp/>universe<sp/>update</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*universe_iter)-&gt;Update(event_time);</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;.&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>each<sp/>Universe<sp/>locate<sp/>solids<sp/>for<sp/>visualisation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>surfaces_found<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>solids_found<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Universe*&gt;<sp/>set_of_solid_pointers<sp/>=<sp/>(*universe_iter)-&gt;GetSolids(event_time);</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Universe*&gt;::iterator<sp/>solid_iter;</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(solid_iter<sp/>=<sp/>set_of_solid_pointers.begin();<sp/>solid_iter<sp/>!=<sp/>set_of_solid_pointers.end();<sp/>++solid_iter)</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>current_solid_pointer<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="class_solid" kindref="compound">Solid</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*solid_iter);</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(current_solid_pointer)</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;S&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Each<sp/>solid<sp/>is<sp/>made<sp/>up<sp/>of<sp/>a<sp/>set<sp/>of<sp/>polyhedrons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>id_counter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//vtkSmartPointer&lt;vtkPoints&gt;<sp/>solid_points<sp/>=<sp/>vtkSmartPointer&lt;vtkPoints&gt;::New();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vtkSmartPointer&lt;vtkAppendPolyData&gt;<sp/>append_polydata<sp/>=<sp/>vtkSmartPointer&lt;vtkAppendPolyData&gt;::New();</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>polyhedrons_found<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Solid*&gt;<sp/>set_of_polyhedron_pointers<sp/>=<sp/>current_solid_pointer-&gt;GetPolyhedrons(event_time);</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Solid*&gt;::iterator<sp/>polyhedron_iter;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>points_found<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(polyhedron_iter<sp/>=<sp/>set_of_polyhedron_pointers.begin();<sp/>polyhedron_iter<sp/>!=<sp/>set_of_polyhedron_pointers.end();<sp/>++polyhedron_iter)</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>current_polyhedron_pointer<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="class_polyhedron" kindref="compound">Polyhedron</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*polyhedron_iter);</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(current_polyhedron_pointer)</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Each<sp/>polyhedron<sp/>is<sp/>made<sp/>up<sp/>of<sp/>a<sp/>set<sp/>of<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Point*&gt;<sp/>set_of_point_pointers<sp/>=<sp/>current_polyhedron_pointer-&gt;<ref refid="class_polyhedron_1a1430429d6c8447e90b8c94ca46496a59" kindref="member">GetPoints</ref>(event_time);</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Point*&gt;::iterator<sp/>point_iter;</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>starting_point<sp/>=<sp/>id_counter;</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(point_iter<sp/>=<sp/>set_of_point_pointers.begin();<sp/>point_iter<sp/>!=<sp/>set_of_point_pointers.end();<sp/>++point_iter)</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>current_point_pointer<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="class_point" kindref="compound">Point</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*point_iter);</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(current_point_pointer)</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>point_values<sp/>=<sp/>current_point_pointer-&gt;<ref refid="class_point_1a521d229550d7f38851f9ffb1933046a6" kindref="member">GetPointPosition</ref>(event_time);</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(point_values.size()<sp/>&gt;<sp/>2)</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a459726c3dbd394d957c5e0e8fad43f71" kindref="member">define_points</ref>-&gt;InsertPoint(id_counter,<sp/>point_values[0],<sp/>point_values[1],<sp/>point_values[2]);</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//solid_points-&gt;InsertPoint(id_counter,<sp/>point_values[0],<sp/>point_values[1],<sp/>point_values[2]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>id_counter++;</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>points_found<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(starting_point<sp/>!=<sp/>id_counter)</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vtkSmartPointer&lt;vtkIdList&gt;<sp/>set_of_ids<sp/>=<sp/>vtkSmartPointer&lt;vtkIdList&gt;::New();</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>id_loop<sp/>=<sp/>starting_point;<sp/>id_loop<sp/>&lt;<sp/>id_counter;<sp/>id_loop++)</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_of_ids-&gt;InsertNextId(id_loop);</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1aa97d4b3a68fbfaea550fe20234905b66" kindref="member">define_cellarrays</ref>[cellarrays_group_counter]-&gt;InsertNextCell(set_of_ids);</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(points_found)</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vtkSmartPointer&lt;vtkPolyData&gt;<sp/>append_points<sp/>=<sp/>vtkSmartPointer&lt;vtkPolyData&gt;::New();</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>append_points-&gt;SetPoints(<ref refid="_brain_harmonics_8cc_1a459726c3dbd394d957c5e0e8fad43f71" kindref="member">define_points</ref>);</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>append_points-&gt;SetVerts(<ref refid="_brain_harmonics_8cc_1aa97d4b3a68fbfaea550fe20234905b66" kindref="member">define_cellarrays</ref>[cellarrays_group_counter]);</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Points:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="_brain_harmonics_8cc_1a459726c3dbd394d957c5e0e8fad43f71" kindref="member">define_points</ref>-&gt;GetNumberOfPoints()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Cells:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="_brain_harmonics_8cc_1aa97d4b3a68fbfaea550fe20234905b66" kindref="member">define_cellarrays</ref>[cellarrays_group_counter]-&gt;GetNumberOfCells()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>append_polydata-&gt;AddInputData(append_points);</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polyhedrons_found<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cellarrays_group_counter++;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>points_found<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(polyhedrons_found)</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>append_polydata-&gt;Update();</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="_brain_harmonics_8cc_1a529fb94c7498f38828c4955476e55520" kindref="member">define_polydata</ref>.size()<sp/>&gt;<sp/>polydata_group_counter)</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a529fb94c7498f38828c4955476e55520" kindref="member">define_polydata</ref>[polydata_group_counter]<sp/>=<sp/>vtkSmartPointer&lt;vtkPolyData&gt;::New();</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a529fb94c7498f38828c4955476e55520" kindref="member">define_polydata</ref>.push_back(vtkSmartPointer&lt;vtkPolyData&gt;::New());</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a8a93118d63dacb49915b567fa41319a7" kindref="member">dynamic_polydata_counter</ref><sp/>=<sp/><ref refid="_brain_harmonics_8cc_1a529fb94c7498f38828c4955476e55520" kindref="member">define_polydata</ref>.size();</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a529fb94c7498f38828c4955476e55520" kindref="member">define_polydata</ref>[polydata_group_counter]<sp/>=<sp/>append_polydata-&gt;GetOutput();</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="_brain_harmonics_8cc_1aec36b51ac72634d7a58846776cb61d43" kindref="member">define_surfaces</ref>.size()<sp/>&gt;<sp/>surfaces_group_counter)</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1aec36b51ac72634d7a58846776cb61d43" kindref="member">define_surfaces</ref>[surfaces_group_counter]<sp/>=<sp/>vtkSmartPointer&lt;vtkSurfaceReconstructionFilter&gt;::New();</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1aec36b51ac72634d7a58846776cb61d43" kindref="member">define_surfaces</ref>.push_back(vtkSmartPointer&lt;vtkSurfaceReconstructionFilter&gt;::New());</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a32fdb8886e50e5a48cb78a26e9cf846d" kindref="member">dynamic_surfaces_counter</ref><sp/>=<sp/><ref refid="_brain_harmonics_8cc_1aec36b51ac72634d7a58846776cb61d43" kindref="member">define_surfaces</ref>.size();</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1aec36b51ac72634d7a58846776cb61d43" kindref="member">define_surfaces</ref>[surfaces_group_counter]-&gt;SetInputData(<ref refid="_brain_harmonics_8cc_1a529fb94c7498f38828c4955476e55520" kindref="member">define_polydata</ref>[polydata_group_counter]);</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="_brain_harmonics_8cc_1a60b4bc1ad91584494c1f04f858e34513" kindref="member">define_contourfilters</ref>.size()<sp/>&gt;<sp/>contourfilter_group_counter)</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a60b4bc1ad91584494c1f04f858e34513" kindref="member">define_contourfilters</ref>[contourfilter_group_counter]<sp/>=<sp/>vtkSmartPointer&lt;vtkContourFilter&gt;::New();</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a60b4bc1ad91584494c1f04f858e34513" kindref="member">define_contourfilters</ref>.push_back(vtkSmartPointer&lt;vtkContourFilter&gt;::New());</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a4d42762d2c2ec0fe02455bab8d3cf4c9" kindref="member">dynamic_contourfilter_counter</ref><sp/>=<sp/><ref refid="_brain_harmonics_8cc_1a60b4bc1ad91584494c1f04f858e34513" kindref="member">define_contourfilters</ref>.size();</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a60b4bc1ad91584494c1f04f858e34513" kindref="member">define_contourfilters</ref>[contourfilter_group_counter]-&gt;SetInputConnection(<ref refid="_brain_harmonics_8cc_1aec36b51ac72634d7a58846776cb61d43" kindref="member">define_surfaces</ref>[surfaces_group_counter]-&gt;GetOutputPort());</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a60b4bc1ad91584494c1f04f858e34513" kindref="member">define_contourfilters</ref>[contourfilter_group_counter]-&gt;SetValue(0,<sp/>0.0);</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sometimes<sp/>the<sp/>contouring<sp/>algorithm<sp/>can<sp/>create<sp/>a<sp/>volume<sp/>whose<sp/>gradient</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>vector<sp/>and<sp/>ordering<sp/>of<sp/>polygon<sp/>(using<sp/>the<sp/>right<sp/>hand<sp/>rule)<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>inconsistent.<sp/>vtkReverseSense<sp/>cures<sp/>this<sp/>problem.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="_brain_harmonics_8cc_1a3f46d8452260ed4fbbdadf8ea634d866" kindref="member">define_reversals</ref>.size()<sp/>&gt;<sp/>reversals_group_counter)</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a3f46d8452260ed4fbbdadf8ea634d866" kindref="member">define_reversals</ref>[reversals_group_counter]<sp/>=<sp/>vtkSmartPointer&lt;vtkReverseSense&gt;::New();</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a3f46d8452260ed4fbbdadf8ea634d866" kindref="member">define_reversals</ref>.push_back(vtkSmartPointer&lt;vtkReverseSense&gt;::New());</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a7e0e7dc174f686fe7ec2c1c10c33a5b7" kindref="member">dynamic_reversals_counter</ref><sp/>=<sp/><ref refid="_brain_harmonics_8cc_1a3f46d8452260ed4fbbdadf8ea634d866" kindref="member">define_reversals</ref>.size();</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a3f46d8452260ed4fbbdadf8ea634d866" kindref="member">define_reversals</ref>[reversals_group_counter]-&gt;SetInputConnection(<ref refid="_brain_harmonics_8cc_1a60b4bc1ad91584494c1f04f858e34513" kindref="member">define_contourfilters</ref>[contourfilter_group_counter]-&gt;GetOutputPort());</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a3f46d8452260ed4fbbdadf8ea634d866" kindref="member">define_reversals</ref>[reversals_group_counter]-&gt;ReverseCellsOn();</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a3f46d8452260ed4fbbdadf8ea634d866" kindref="member">define_reversals</ref>[reversals_group_counter]-&gt;ReverseNormalsOn();</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a3f46d8452260ed4fbbdadf8ea634d866" kindref="member">define_reversals</ref>[reversals_group_counter]-&gt;Update();</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solids_found<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polyhedrons_found<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a529fb94c7498f38828c4955476e55520" kindref="member">define_polydata</ref>[polydata_group_counter]<sp/>=<sp/>vtkSmartPointer&lt;vtkPolyData&gt;::New();</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a529fb94c7498f38828c4955476e55520" kindref="member">define_polydata</ref>[polydata_group_counter]<sp/>=<sp/>TransformBack(<ref refid="_brain_harmonics_8cc_1a459726c3dbd394d957c5e0e8fad43f71" kindref="member">define_points</ref>,<sp/><ref refid="_brain_harmonics_8cc_1a3f46d8452260ed4fbbdadf8ea634d866" kindref="member">define_reversals</ref>[reversals_group_counter]-&gt;GetOutput());</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="_brain_harmonics_8cc_1a67ee26302d766e5112a5f935e33a85c6" kindref="member">define_datamappers</ref>.size()<sp/>&gt;<sp/>datamappers_group_counter)</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a67ee26302d766e5112a5f935e33a85c6" kindref="member">define_datamappers</ref>[datamappers_group_counter]<sp/>=<sp/>vtkSmartPointer&lt;vtkPolyDataMapper&gt;::New();</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a67ee26302d766e5112a5f935e33a85c6" kindref="member">define_datamappers</ref>.push_back(vtkSmartPointer&lt;vtkPolyDataMapper&gt;::New());</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1ac11e052aaba6bcf48f760388d655dd11" kindref="member">dynamic_datamappers_counter</ref><sp/>=<sp/><ref refid="_brain_harmonics_8cc_1a67ee26302d766e5112a5f935e33a85c6" kindref="member">define_datamappers</ref>.size();</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a67ee26302d766e5112a5f935e33a85c6" kindref="member">define_datamappers</ref>[datamappers_group_counter]-&gt;SetInputConnection(<ref refid="_brain_harmonics_8cc_1a3f46d8452260ed4fbbdadf8ea634d866" kindref="member">define_reversals</ref>[reversals_group_counter]-&gt;GetOutputPort());</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a67ee26302d766e5112a5f935e33a85c6" kindref="member">define_datamappers</ref>[datamappers_group_counter]-&gt;ScalarVisibilityOff();</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="_brain_harmonics_8cc_1a564cb339c12906f6db5995be211dcda2" kindref="member">define_actors</ref>.size()<sp/>&gt;<sp/>actors_group_counter)</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a564cb339c12906f6db5995be211dcda2" kindref="member">define_actors</ref>[actors_group_counter]<sp/>=<sp/>vtkSmartPointer&lt;vtkActor&gt;::New();</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a564cb339c12906f6db5995be211dcda2" kindref="member">define_actors</ref>.push_back(vtkSmartPointer&lt;vtkActor&gt;::New());</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a7d304e5a06130656fd9f36a54079bea4" kindref="member">dynamic_actors_counter</ref><sp/>=<sp/><ref refid="_brain_harmonics_8cc_1a564cb339c12906f6db5995be211dcda2" kindref="member">define_actors</ref>.size();</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a564cb339c12906f6db5995be211dcda2" kindref="member">define_actors</ref>[actors_group_counter]-&gt;SetMapper(<ref refid="_brain_harmonics_8cc_1a67ee26302d766e5112a5f935e33a85c6" kindref="member">define_datamappers</ref>[datamappers_group_counter]);</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a564cb339c12906f6db5995be211dcda2" kindref="member">define_actors</ref>[actors_group_counter]-&gt;GetProperty()-&gt;SetDiffuseColor(1.0000,<sp/>0.3882,<sp/>0.2784);</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a564cb339c12906f6db5995be211dcda2" kindref="member">define_actors</ref>[actors_group_counter]-&gt;GetProperty()-&gt;SetSpecularColor(1,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a564cb339c12906f6db5995be211dcda2" kindref="member">define_actors</ref>[actors_group_counter]-&gt;GetProperty()-&gt;SetSpecular(.4);</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a564cb339c12906f6db5995be211dcda2" kindref="member">define_actors</ref>[actors_group_counter]-&gt;GetProperty()-&gt;SetSpecularPower(50);</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>the<sp/>actors<sp/>to<sp/>the<sp/>renderer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="_brain_harmonics_8cc_1aab0f6cfd03b167486b3a0ebbb68922be" kindref="member">define_renderers</ref>.size()<sp/>&gt;<sp/>renderers_group_counter)</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1aab0f6cfd03b167486b3a0ebbb68922be" kindref="member">define_renderers</ref>[renderers_group_counter]-&gt;AddActor(<ref refid="_brain_harmonics_8cc_1a564cb339c12906f6db5995be211dcda2" kindref="member">define_actors</ref>[actors_group_counter]);</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1aab0f6cfd03b167486b3a0ebbb68922be" kindref="member">define_renderers</ref>.push_back(vtkSmartPointer&lt;vtkRenderer&gt;::New());</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a295208b91ea89b7e23a14a2d431f4b33" kindref="member">dynamic_renderers_counter</ref><sp/>=<sp/><ref refid="_brain_harmonics_8cc_1aab0f6cfd03b167486b3a0ebbb68922be" kindref="member">define_renderers</ref>.size();</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1aab0f6cfd03b167486b3a0ebbb68922be" kindref="member">define_renderers</ref>[renderers_group_counter]-&gt;SetBackground(1,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1aab0f6cfd03b167486b3a0ebbb68922be" kindref="member">define_renderers</ref>[renderers_group_counter]-&gt;GetActiveCamera()-&gt;SetFocalPoint(0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1aab0f6cfd03b167486b3a0ebbb68922be" kindref="member">define_renderers</ref>[renderers_group_counter]-&gt;GetActiveCamera()-&gt;SetPosition(1,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1aab0f6cfd03b167486b3a0ebbb68922be" kindref="member">define_renderers</ref>[renderers_group_counter]-&gt;GetActiveCamera()-&gt;SetViewUp(0,<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1aab0f6cfd03b167486b3a0ebbb68922be" kindref="member">define_renderers</ref>[renderers_group_counter]-&gt;ResetCamera();</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1aab0f6cfd03b167486b3a0ebbb68922be" kindref="member">define_renderers</ref>[renderers_group_counter]-&gt;GetActiveCamera()-&gt;Azimuth(20);</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1aab0f6cfd03b167486b3a0ebbb68922be" kindref="member">define_renderers</ref>[renderers_group_counter]-&gt;GetActiveCamera()-&gt;Elevation(30);</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1aab0f6cfd03b167486b3a0ebbb68922be" kindref="member">define_renderers</ref>[renderers_group_counter]-&gt;GetActiveCamera()-&gt;Dolly(1.2);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1aab0f6cfd03b167486b3a0ebbb68922be" kindref="member">define_renderers</ref>[renderers_group_counter]-&gt;ResetCameraClippingRange();</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1aab0f6cfd03b167486b3a0ebbb68922be" kindref="member">define_renderers</ref>[renderers_group_counter]-&gt;ResetCamera();</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1aab0f6cfd03b167486b3a0ebbb68922be" kindref="member">define_renderers</ref>[renderers_group_counter]-&gt;AddActor(<ref refid="_brain_harmonics_8cc_1a564cb339c12906f6db5995be211dcda2" kindref="member">define_actors</ref>[actors_group_counter]);</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polydata_group_counter++;</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surfaces_group_counter++;</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contourfilter_group_counter++;</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reversals_group_counter++;</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>datamappers_group_counter++;</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actors_group_counter++;</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surfaces_found<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surfaces_group_counter++;</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solids_found<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a6ce111e58fd1f4622e6a322cefd19b26" kindref="member">render_window</ref>-&gt;Render();</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1160"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight></codeline>
<codeline lineno="1162" refid="_brain_harmonics_8cc_1ac0f2228420376f4db7e1274f2b41667c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_brain_harmonics_8cc_1ac0f2228420376f4db7e1274f2b41667c" kindref="member">main</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>argv[])</highlight></codeline>
<codeline lineno="1163"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>application<sp/>is<sp/>designed<sp/>to<sp/>create<sp/>an<sp/>AAReNN<sp/>Cognitive<sp/>AI<sp/>network<sp/>constructed<sp/>using<sp/>either<sp/>simulated<sp/>neurons<sp/>or<sp/>emulated<sp/>neuromorphic<sp/>chipsets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>initialiseProgram<sp/>=<sp/><ref refid="_brain_harmonics_8cc_1a487a3c399210173e1b3d3a2f275a55b1" kindref="member">init</ref>(argc,<sp/>argv);</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(initialiseProgram)</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Program<sp/>initialisation<sp/>failed!&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialise<sp/>hardware<sp/>if<sp/>located</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Bool<sp/>flag<sp/>is<sp/>set<sp/>to<sp/>false<sp/>when<sp/>communication<sp/>fails<sp/>to<sp/>discover<sp/>hardware</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>device_attached<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Install<sp/>Dynap-se<sp/>signal<sp/>handler<sp/>for<sp/>global<sp/>shutdown.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_WIN32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(signal(SIGTERM,<sp/>&amp;globalShutdownSignalHandler)<sp/>==<sp/>SIG_ERR)</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>caerLog(CAER_LOG_CRITICAL,<sp/></highlight><highlight class="stringliteral">&quot;ShutdownAction&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>signal<sp/>handler<sp/>for<sp/>SIGTERM.<sp/>Error:<sp/>%d.&quot;</highlight><highlight class="normal">,<sp/>errno);</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(signal(SIGINT,<sp/>&amp;globalShutdownSignalHandler)<sp/>==<sp/>SIG_ERR)</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>caerLog(CAER_LOG_CRITICAL,<sp/></highlight><highlight class="stringliteral">&quot;ShutdownAction&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>signal<sp/>handler<sp/>for<sp/>SIGINT.<sp/>Error:<sp/>%d.&quot;</highlight><highlight class="normal">,<sp/>errno);</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sigaction<sp/>shutdownAction;</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/>shutdownAction.sa_handler<sp/>=<sp/>&amp;globalShutdownSignalHandler;</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/>shutdownAction.sa_flags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/>sigemptyset(&amp;shutdownAction.sa_mask);</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/>sigaddset(&amp;shutdownAction.sa_mask,<sp/>SIGTERM);</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/>sigaddset(&amp;shutdownAction.sa_mask,<sp/>SIGINT);</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sigaction(SIGTERM,<sp/>&amp;shutdownAction,<sp/>NULL)<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>caerLog(CAER_LOG_CRITICAL,<sp/></highlight><highlight class="stringliteral">&quot;ShutdownAction&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>signal<sp/>handler<sp/>for<sp/>SIGTERM.<sp/>Error:<sp/>%d.&quot;</highlight><highlight class="normal">,<sp/>errno);</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sigaction(SIGINT,<sp/>&amp;shutdownAction,<sp/>NULL)<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>caerLog(CAER_LOG_CRITICAL,<sp/></highlight><highlight class="stringliteral">&quot;ShutdownAction&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>signal<sp/>handler<sp/>for<sp/>SIGINT.<sp/>Error:<sp/>%d.&quot;</highlight><highlight class="normal">,<sp/>errno);</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>connection<sp/>to<sp/>all<sp/>Dynap-se<sp/>boards/chips<sp/>and<sp/>then<sp/>ensure<sp/>the<sp/>chips<sp/>are<sp/>set<sp/>to<sp/>a<sp/>basic<sp/>known<sp/>configuration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Open<sp/>the<sp/>communication<sp/>with<sp/>Dynap-se,<sp/>give<sp/>it<sp/>a<sp/>device<sp/>ID<sp/>of<sp/>1,<sp/>and<sp/>don&apos;t<sp/>care<sp/>about<sp/>USB<sp/>bus<sp/>or<sp/>SN<sp/>restrictions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/>caerDeviceHandle<sp/>usb_handle<sp/>=<sp/>caerDeviceOpen(1,<sp/>CAER_DEVICE_DYNAPSE,<sp/>0,<sp/>0,<sp/>NULL);</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(usb_handle<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;No<sp/>devices<sp/>attached.<sp/>Using<sp/>simulation<sp/>system<sp/>only.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device_attached<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(EXIT_FAILURE);<sp/><sp/>//<sp/>Not<sp/>required<sp/>because<sp/>this<sp/>program<sp/>can<sp/>run<sp/>without<sp/>dedicated<sp/>hardware.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(device_attached)</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>or<sp/>amend<sp/>code<sp/>to<sp/>ensure<sp/>all<sp/>chips<sp/>are<sp/>reset<sp/>at<sp/>the<sp/>beginning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1aefff80cf47ae6c975b4aed196c12d92a" kindref="member">ClearDynapse</ref>(&amp;usb_handle);</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>caerDeviceClose(&amp;usb_handle);</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>re-open<sp/>the<sp/>communication<sp/>with<sp/>Dynap-se<sp/>for<sp/>a<sp/>clean<sp/>connection.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usb_handle<sp/>=<sp/>caerDeviceOpen(1,<sp/>CAER_DEVICE_DYNAPSE,<sp/>0,<sp/>0,<sp/>NULL);</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(usb_handle<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Device<sp/>communication<sp/>failed.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device_attached<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(EXIT_FAILURE);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>End<sp/>of<sp/>initial<sp/>hardware<sp/>detection.<sp/>Further<sp/>communications<sp/>errors<sp/>will<sp/>disable<sp/>hardware<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>bit-setting<sp/>variables<sp/>for<sp/>hardware</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>genBits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>dynap_Dx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>dynap_Sx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>dynap_Dy<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>dynap_Sy<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>destinationCoreId;</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string::size_type<sp/>sz;</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Index<sp/>arrays<sp/>for<sp/>instances<sp/>of<sp/>classes<sp/>described<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Early<sp/>versions<sp/>of<sp/>this<sp/>software<sp/>maintained<sp/>direct<sp/>pointers<sp/>to<sp/>all<sp/>objects.<sp/>Now<sp/>it<sp/>is<sp/>recoded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>access<sp/>through<sp/>Get/Set<sp/>class<sp/>methods<sp/>with<sp/>the<sp/>exception<sp/>of<sp/>the<sp/>initial<sp/>Universe<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;Dimension*&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dimension_list;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;ElementaryParticle*&gt;<sp/>elementary_particle_list;<sp/></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;ElementaryForce*&gt;<sp/><sp/><sp/><sp/>elementary_force_list;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;CompositeForceParticle*&gt;<sp/><sp/><sp/><sp/><sp/>composite_forceparticle_list;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;Law*&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>law_list;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;Matter*&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matter_list;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;Monomer*&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>monomer_list;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;Polymer*&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polymer_list;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;Solid*&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solid_list;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;Polyhedron*&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polyhedron_list;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;Polygon*&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polygon_list;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;Quad*&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quad_list;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;Line*&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line_list;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;Point*&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point_list;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::vector<sp/>&lt;Node&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Node;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**&lt;<sp/>Node<sp/>class<sp/>for<sp/>A*<sp/>search<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;AppTimer*&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Apptimer;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Higher<sp/>level<sp/>of<sp/>abstraction.<sp/>Initial<sp/>naming.<sp/>Ideally<sp/>use<sp/>Get/Set<sp/>methods<sp/>rather<sp/>than<sp/>store<sp/>pointers<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;CognitiveNetwork*&gt;<sp/>cognitivenetwork;<sp/><sp/></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;Orbital*&gt;<sp/>orbital;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;Neuron*&gt;<sp/>neuron;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;DendriteCleft*&gt;<sp/>dendritecleft;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;Neuroreceptor*&gt;<sp/>neuroreceptor;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;Synapse*&gt;<sp/>synapse;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;InterneuronSpace*&gt;<sp/>interneuronspace;<sp/><sp/></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;Membrane*&gt;<sp/>membrane;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;MembraneChannel*&gt;<sp/>membranechannel;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;Dendrite*&gt;<sp/><sp/>dendrite;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;DendriteBranch*&gt;<sp/>dendritebranch;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;Soma*&gt;<sp/>soma;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;AxonHillock*&gt;<sp/><ref refid="class_axon_hillock" kindref="compound">AxonHillock</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;Axon*&gt;<sp/>axon;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;AxonBranch*&gt;<sp/>axonbranch;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;MyelinSheath*&gt;<sp/>myelinsheath;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;SchwannCell*&gt;<sp/>schwanncell;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;AxonBouton*&gt;<sp/>axonbouton;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;SynapticVesicle*&gt;<sp/>synapticvesicle;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;Neurotransmitter*&gt;<sp/>neurotransmitter;<sp/><sp/></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;Spike*&gt;<sp/><ref refid="class_spike" kindref="compound">Spike</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>infinite_loop_prevention_threshold<sp/>=<sp/>800;</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//CCP<sp/>Abstraction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;int&gt;<sp/>nodeList;</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;int&gt;<sp/>selectedDimensions;</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>initial<sp/>parameters<sp/>are<sp/>to<sp/>be<sp/>read<sp/>from<sp/>an<sp/>XML<sp/>Parameter<sp/>file<sp/>but<sp/>for<sp/>now<sp/>are<sp/>hard-coded.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_universes<sp/>=<sp/>10;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Internal<sp/>display,<sp/>Physical<sp/>material<sp/>and<sp/>spatial<sp/>references</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;int&gt;<sp/>num_dimensions_in_universe<sp/>=<sp/>{3,<sp/>1,<sp/>4,<sp/>2,<sp/>2,<sp/>3,<sp/>3,<sp/>3,<sp/>3,<sp/>1};</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>U1<sp/>=<sp/>Internal<sp/>Time,<sp/>X,<sp/>Y<sp/>&amp;<sp/>Z</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>U2<sp/>=<sp/>Physical</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>U3<sp/>=<sp/>Spatial<sp/>X,Y,Z<sp/>&amp;<sp/>Time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>U4<sp/>=<sp/>CPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>U5<sp/>=<sp/>Spikes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>U6<sp/>=<sp/>Neurotransmitters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>U7<sp/>=<sp/>Connectome</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>U8<sp/>=<sp/>Synapses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>U9<sp/>=<sp/>Orbital<sp/>example</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initial<sp/>number<sp/>of<sp/>starting<sp/>components<sp/>for<sp/>each<sp/>subproject</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>Physics<sp/>problem</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;int&gt;<sp/>num_elementary_particles_in_universe<sp/>=<sp/>{0,<sp/>10,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0};</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;int&gt;<sp/>num_elementary_forces_in_universe<sp/>=<sp/>{0,<sp/>10,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0};</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;int&gt;<sp/>num_composite_forceparticles_in_universe;</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>build_outer_composite_loop<sp/>=<sp/>0;<sp/>build_outer_composite_loop<sp/>&lt;<sp/>num_elementary_particles_in_universe.size();<sp/>build_outer_composite_loop++)</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>build_inner_composite_loop<sp/>=<sp/>0;<sp/>build_inner_composite_loop<sp/>&lt;<sp/>num_elementary_forces_in_universe.size();<sp/>build_inner_composite_loop++)</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_composite_forceparticles_in_universe.push_back(num_elementary_particles_in_universe[build_outer_composite_loop]<sp/>*<sp/>num_elementary_forces_in_universe[build_inner_composite_loop]);</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Attempt<sp/>to<sp/>stimulate<sp/>particle<sp/>bonding<sp/>by<sp/>moving<sp/>attracted<sp/>objects<sp/>nearer<sp/>to<sp/>each<sp/>other.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>initial_particle_alignment<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>Cognitive<sp/>problem</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;int&gt;<sp/>num_cognitive_networks_in_universe<sp/>=<sp/>{<sp/>0,<sp/>0,<sp/>5,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0};</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;int&gt;<sp/>num_orbitals_in_cognitive_network<sp/>=<sp/>{0,<sp/>0,<sp/>100,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0};</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;int&gt;<sp/>num_neurons_in_cognitive_network<sp/>=<sp/>{0,<sp/>0,<sp/>500,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0};</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;int&gt;<sp/>num_synapses_in_cognitive_network<sp/>=<sp/>{0,<sp/>0,<sp/>2000,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0};</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;int&gt;<sp/>num_neurotransmitters_in_cognitive_network<sp/>=<sp/>{0,<sp/>0,<sp/>2000,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0};</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Attempt<sp/>to<sp/>stimulate<sp/>neuron<sp/>pairing<sp/>by<sp/>moving<sp/>attracted<sp/>objects<sp/>nearer<sp/>to<sp/>each<sp/>other.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>initial_synapse_alignment<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_layers_in_cognitive_network<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>orbital_layers;</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/>orbital_layers.clear();</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>setup<sp/>of<sp/>neurons,<sp/>orbitals<sp/>and<sp/>cognitive<sp/>networks<sp/>are<sp/>initial.<sp/>Changes<sp/>to<sp/>configuration<sp/>occurs<sp/>dynamically<sp/>depending<sp/>on<sp/>stimulation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>build_outer_loop<sp/>=<sp/>0;<sp/>build_outer_loop<sp/>&lt;<sp/>num_cognitive_networks_in_universe.size();<sp/>build_outer_loop++)</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>build_inner_loop<sp/>=<sp/>0;<sp/>build_inner_loop<sp/>&lt;<sp/>num_layers_in_cognitive_network;<sp/>build_inner_loop++)</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>How<sp/>many<sp/>neuron<sp/>groups<sp/>in<sp/>each<sp/>layer.<sp/>May<sp/>want<sp/>to<sp/>add<sp/>some<sp/>random<sp/>variation<sp/>in<sp/>layer<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>orbital_layers.push_back((num_orbitals_in_cognitive_network[build_outer_loop]<sp/>/<sp/>num_layers_in_cognitive_network)<sp/>*<sp/>build_inner_loop);</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>the<sp/>end<sp/>value<sp/>is<sp/>also<sp/>added.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>orbital_layers.push_back(num_orbitals_in_cognitive_network[build_outer_loop]<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Brain<sp/>calculations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>initial_axon_branches<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>initial_dendrites<sp/>=<sp/>64;</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>compareFirst;</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>compareSecond;</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status_of_call_request;</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>patternFound<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>l_screenX<sp/>=<sp/>1000.0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>l_screenY<sp/>=<sp/>800.0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//double<sp/>l_scale<sp/>=<sp/>300;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**&lt;<sp/>Vertices<sp/>are<sp/>multiplied<sp/>by<sp/>this<sp/>factor<sp/>to<sp/>enable<sp/>fitting<sp/>within<sp/>the<sp/>graphics<sp/>window.<sp/>Adjust<sp/>to<sp/>suit<sp/>environment<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="glad_8h_1ae84541b4f3d8e1ea24ec0f466a8c568b" kindref="member">std::string</ref><sp/>l_screenTitle<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Developed<sp/>from<sp/>Project<sp/>NeuralMimicry<sp/>-<sp/>the<sp/>basis<sp/>of<sp/>an<sp/>AARNN<sp/>Cognitive<sp/>AI<sp/>System&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>l_displayString;</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>counter_Charge<sp/>=<sp/>-1;<sp/></highlight><highlight class="comment">//<sp/>Used<sp/>to<sp/>loop<sp/>between<sp/>min<sp/>0<sp/>and<sp/>max<sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>counter_Spin<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>counter_Walk<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>counter_infinite_loop_prevention<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l_spaPointBase<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Base<sp/>of<sp/>data<sp/>points<sp/>(Moves<sp/>because<sp/>of<sp/>use<sp/>by<sp/>internal<sp/>graphics<sp/>for<sp/>points<sp/>control<sp/>too</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>how_many_particles<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>how_many_Synapses<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>how_many_Neurons<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>current_Distance<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_Distance<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l_pointStart<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l_ccpPointStart<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>l_switch<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l_origin<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l_origin_Test1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l_origin_Test3<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l_origin_Test5<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>l_charge<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>l_lastCharge<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pauseLoop<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>distance_to_move;</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>radialDistance;</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="glad_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>;</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="glad_8h_1a7d65d00ca3b0630d9b5c52df855b19f5" kindref="member">t</ref>;</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>point_origin;</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xd;</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yd;</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>zd;</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pointDistance;</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pointDistance2;</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>effect;</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>calcX;</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>calcY;</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>calcZ;</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>calcXoffset;</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>calcYoffset;</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>calcZoffset;</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>calcXscale;</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>calcYscale;</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>calcZscale;</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>colourMax;</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>colourY;</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>l_inputData;</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>l_dir<sp/>=<sp/>getcwd(NULL,<sp/>0);</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/>l_inputData.clear();</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numSynapses;</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//int<sp/>initial_neurons;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>paramCounter;</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="glad_8h_1ae84541b4f3d8e1ea24ec0f466a8c568b" kindref="member">std::string</ref><sp/><ref refid="glad_8h_1a36862d7c6208bc30723fd06f2a0f9bfd" kindref="member">entry</ref>;</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="glad_8h_1ae84541b4f3d8e1ea24ec0f466a8c568b" kindref="member">std::string</ref><sp/><ref refid="glad_8h_1ad8a8baf08bc0399738960c9259571911" kindref="member">buf</ref>;</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/>std::istringstream<sp/>iss(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::string::size_type<sp/>sz;<sp/><sp/><sp/>//<sp/>alias<sp/>of<sp/>size_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l_tabCycle<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>l_synapseX<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>l_synapseY<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>l_neuronX<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>l_neuronY<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>l_desired_distance<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>l_demandCounter<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>l_direction<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>l_diffX<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>l_diffX2<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>l_diffY<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>l_diffY2<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>l_slope<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>l_angleRAD<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>l_angleDEG<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>l_actualDistance<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>l_minimumDistance<sp/>=<sp/>0.1f;</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;double&gt;<sp/>l_transferArray;</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumRows<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumInputs<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/>std::chrono::time_point&lt;Clock&gt;<sp/>event_time;</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/>std::chrono::time_point&lt;Clock&gt;<sp/>clockTime;</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/>std::chrono::time_point&lt;Clock&gt;<sp/>lastClockTime;</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/>std::chrono::time_point&lt;Clock&gt;<sp/>startTime;</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>counter_gravitation<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>counter_weak<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>counter_weak_electroweak<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>counter_electromagnetic<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>counter_electromagnetic_electroweak<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>counter_strong<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>counter_stronfundamental<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>counter_stronresidual<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>CPLEX<sp/>Environment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//IloEnv<sp/>cplexEnv;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Setup<sp/>the<sp/>Python<sp/>environment<sp/>for<sp/>integrating<sp/>K-means<sp/>clustering<sp/>solution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/>setenv(</highlight><highlight class="stringliteral">&quot;PYTHONPATH&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pyArgc<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>const<sp/>char<sp/>pyArgv[]<sp/>=<sp/>{<sp/>&apos;<sp/>&apos;,&apos;p&apos;,&apos;y&apos;,&apos;c&apos;,&apos;o&apos;,&apos;m&apos;,&apos;p&apos;,&apos;u&apos;,&apos;t&apos;,&apos;e&apos;,&apos;<sp/>&apos;,&apos;m&apos;,&apos;u&apos;,&apos;l&apos;,&apos;t&apos;,&apos;i&apos;,&apos;p&apos;,&apos;l&apos;,&apos;y&apos;,&apos;<sp/>&apos;,&apos;3&apos;,&apos;<sp/>&apos;,&apos;4&apos;,&apos;\0&apos;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*pName,<sp/>*pModule,<sp/>*pDict,<sp/>*pFunc;</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*pArgs,<sp/>*pValue;</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*pArrayArgs;</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*pTransferArray;</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1496"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>int<sp/>i;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="glad_8h_1a321ff419cd5252e54cf95e64dc6687ee" kindref="member">result</ref><sp/>=<sp/>EXIT_FAILURE;</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_Initialize();</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!Py_IsInitialized())</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Python<sp/>failed<sp/>to<sp/>initialise.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(PyArray_API<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a909ced1ec126d134c4c2bf71f5ead148" kindref="member">init_numpy</ref>();<sp/></highlight><highlight class="comment">//<sp/>Numpy<sp/>array<sp/>initialisation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/>pName<sp/>=<sp/>PyUnicode_FromString(</highlight><highlight class="stringliteral">&quot;pycompute&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>File<sp/>to<sp/>be<sp/>called.<sp/>Must<sp/>be<sp/>in<sp/>the<sp/>same<sp/>folder<sp/>as<sp/>the<sp/>C++<sp/>executable<sp/>and<sp/>with<sp/>a<sp/>.py<sp/>extension</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/>pModule<sp/>=<sp/>PyImport_Import(pName);</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_DECREF(pName);</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pModule<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pFunc<sp/>=<sp/>PyObject_GetAttrString(pModule,<sp/></highlight><highlight class="stringliteral">&quot;multiply&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pFunc<sp/>or<sp/>!PyCallable_Check(pFunc))</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Occurred();</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Print();</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>find<sp/>Python<sp/>function.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Print();</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>load<sp/>Python<sp/>module.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Prepare<sp/>screens</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>VTK<sp/>Screens</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Setup<sp/>rectangle<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lower_left_x<sp/>=<sp/>900.0;</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lower_right_x<sp/>=<sp/>1000.0;</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>upper_right_x<sp/>=<sp/>1000.0;</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>upper_left_x<sp/>=<sp/>900.0;</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lower_left_y<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lower_right_y<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>upper_right_y<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>upper_left_y<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1aa97d4b3a68fbfaea550fe20234905b66" kindref="member">define_cellarrays</ref>.push_back(vtkSmartPointer&lt;vtkCellArray&gt;::New());</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a3f51384611b8ff0bcedef8dc6f27bbc8" kindref="member">static_cellarrays_counter</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>insert_rectangle_loop<sp/>=<sp/>0;<sp/>insert_rectangle_loop<sp/>&lt;<sp/>8;<sp/>insert_rectangle_loop++)</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lower_left_y<sp/>=<sp/>((((double(insert_rectangle_loop)<sp/>-<sp/>1)<sp/>/<sp/>2)<sp/>+<sp/>1)<sp/>*<sp/>25.0);</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lower_right_y<sp/>=<sp/>lower_left_y;</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>upper_left_y<sp/>=<sp/>((((double(insert_rectangle_loop)<sp/>-<sp/>1)<sp/>/<sp/>2)<sp/>+<sp/>1)<sp/>*<sp/>25.0)<sp/>+<sp/>50.0;</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>upper_right_y<sp/>=<sp/>upper_left_y;</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a459726c3dbd394d957c5e0e8fad43f71" kindref="member">define_points</ref>-&gt;InsertNextPoint(lower_left_x,<sp/>lower_left_y,<sp/>0.0);</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a459726c3dbd394d957c5e0e8fad43f71" kindref="member">define_points</ref>-&gt;InsertNextPoint(lower_right_x,<sp/>lower_right_y,<sp/>0.0);</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a459726c3dbd394d957c5e0e8fad43f71" kindref="member">define_points</ref>-&gt;InsertNextPoint(upper_right_x,<sp/>upper_right_y,<sp/>0.0);</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a459726c3dbd394d957c5e0e8fad43f71" kindref="member">define_points</ref>-&gt;InsertNextPoint(upper_left_x,<sp/>upper_left_y,<sp/>0.0);</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a81f74579a7b9471085578a377b3c1525" kindref="member">static_points_counter</ref>+=4;</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>polygon</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vtkSmartPointer&lt;vtkPolygon&gt;<sp/>define_polygon<sp/>=<sp/>vtkSmartPointer&lt;vtkPolygon&gt;::New();</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>define_polygon-&gt;GetPointIds()-&gt;SetNumberOfIds(4);</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>define_polygon-&gt;GetPointIds()-&gt;SetId(0,<sp/>(0<sp/>+<sp/>(insert_rectangle_loop<sp/>*<sp/>4)));</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>define_polygon-&gt;GetPointIds()-&gt;SetId(1,<sp/>(1<sp/>+<sp/>(insert_rectangle_loop<sp/>*<sp/>4)));</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>define_polygon-&gt;GetPointIds()-&gt;SetId(2,<sp/>(2<sp/>+<sp/>(insert_rectangle_loop<sp/>*<sp/>4)));</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>define_polygon-&gt;GetPointIds()-&gt;SetId(3,<sp/>(3<sp/>+<sp/>(insert_rectangle_loop<sp/>*<sp/>4)));</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a3ef1f27168082fed53b34b6781b7fef1" kindref="member">static_polygons_counter</ref>++;</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>the<sp/>polygon<sp/>to<sp/>a<sp/>cell<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1aa97d4b3a68fbfaea550fe20234905b66" kindref="member">define_cellarrays</ref>[<ref refid="_brain_harmonics_8cc_1a3f51384611b8ff0bcedef8dc6f27bbc8" kindref="member">static_cellarrays_counter</ref>]-&gt;InsertNextCell(define_polygon);</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/>lower_left_y<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/>lower_right_y<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/>upper_right_y<sp/>=<sp/>200.0;</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/>upper_left_y<sp/>=<sp/>200.0;</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>current_num_of_defined_points<sp/>=<sp/><ref refid="_brain_harmonics_8cc_1a459726c3dbd394d957c5e0e8fad43f71" kindref="member">define_points</ref>-&gt;GetNumberOfPoints();</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a459726c3dbd394d957c5e0e8fad43f71" kindref="member">define_points</ref>-&gt;InsertNextPoint(lower_left_x,<sp/>lower_left_y,<sp/>0.0);</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a459726c3dbd394d957c5e0e8fad43f71" kindref="member">define_points</ref>-&gt;InsertNextPoint(lower_right_x,<sp/>lower_right_y,<sp/>0.0);</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a459726c3dbd394d957c5e0e8fad43f71" kindref="member">define_points</ref>-&gt;InsertNextPoint(upper_right_x,<sp/>upper_right_y,<sp/>0.0);</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a459726c3dbd394d957c5e0e8fad43f71" kindref="member">define_points</ref>-&gt;InsertNextPoint(upper_left_x,<sp/>upper_left_y,<sp/>0.0);</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a81f74579a7b9471085578a377b3c1525" kindref="member">static_points_counter</ref>+=4;</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/>vtkSmartPointer&lt;vtkPolygon&gt;<sp/>define_polygon<sp/>=<sp/>vtkSmartPointer&lt;vtkPolygon&gt;::New();</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/>define_polygon-&gt;GetPointIds()-&gt;SetNumberOfIds(4);</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/>define_polygon-&gt;GetPointIds()-&gt;SetId(0,<sp/>(0<sp/>+<sp/>current_num_of_defined_points));</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/>define_polygon-&gt;GetPointIds()-&gt;SetId(1,<sp/>(1<sp/>+<sp/>current_num_of_defined_points));</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/>define_polygon-&gt;GetPointIds()-&gt;SetId(2,<sp/>(2<sp/>+<sp/>current_num_of_defined_points));</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/>define_polygon-&gt;GetPointIds()-&gt;SetId(3,<sp/>(3<sp/>+<sp/>current_num_of_defined_points));</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a3ef1f27168082fed53b34b6781b7fef1" kindref="member">static_polygons_counter</ref>++;</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>the<sp/>polygon<sp/>to<sp/>a<sp/>cell<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1aa97d4b3a68fbfaea550fe20234905b66" kindref="member">define_cellarrays</ref>[<ref refid="_brain_harmonics_8cc_1a3f51384611b8ff0bcedef8dc6f27bbc8" kindref="member">static_cellarrays_counter</ref>]-&gt;InsertNextCell(define_polygon);</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>for<sp/>correct<sp/>polygon<sp/>insertion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/>vtkIdType<sp/>num_cells<sp/>=<sp/><ref refid="_brain_harmonics_8cc_1aa97d4b3a68fbfaea550fe20234905b66" kindref="member">define_cellarrays</ref>[<ref refid="_brain_harmonics_8cc_1a3f51384611b8ff0bcedef8dc6f27bbc8" kindref="member">static_cellarrays_counter</ref>]-&gt;GetNumberOfCells();</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/>vtkIdType<sp/>cell_location<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>the<sp/>index<sp/>inside<sp/>the<sp/>cell<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(vtkIdType<sp/>cellarray_loop<sp/>=<sp/>0;<sp/>cellarray_loop<sp/>&lt;<sp/>num_cells;<sp/>cellarray_loop++)</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vtkIdType<sp/>num_ids;</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vtkIdType<sp/>*point_ids;</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//define_cellarrays[static_cellarrays_counter]-&gt;GetCell(cell_location,<sp/>num_ids,<sp/>point_ids);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell_location<sp/>+=<sp/>1<sp/>+<sp/>num_ids;</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Test<sp/>cell:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cell_location<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Actual<sp/>cells:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>num_cells<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Assign<sp/>Colour</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>red[3]<sp/>=<sp/>{255,<sp/>0,<sp/>0};</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="glad_8h_1ac14cda87cf6c751d53b65a3cd41c35a1" kindref="member">green</ref>[3]<sp/>=<sp/>{0,<sp/>255,<sp/>0};</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="glad_8h_1a1853b32584a90fa75432925f3e26d0e8" kindref="member">blue</ref>[3]<sp/>=<sp/>{0,<sp/>0,<sp/>255};</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/>vtkSmartPointer&lt;vtkUnsignedCharArray&gt;<sp/>colours<sp/>=<sp/>vtkSmartPointer&lt;vtkUnsignedCharArray&gt;::New();</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/>colours-&gt;SetNumberOfComponents(3);</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/>colours-&gt;SetName(</highlight><highlight class="stringliteral">&quot;Colors&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>colour_loop<sp/>=<sp/>0;<sp/>colour_loop<sp/>&lt;<sp/><ref refid="_brain_harmonics_8cc_1a459726c3dbd394d957c5e0e8fad43f71" kindref="member">define_points</ref>-&gt;GetNumberOfPoints();<sp/>colour_loop++)</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colours-&gt;InsertNextTypedTuple(red);</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>PolyData</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="_brain_harmonics_8cc_1a529fb94c7498f38828c4955476e55520" kindref="member">define_polydata</ref>.size()<sp/>&gt;<sp/><ref refid="_brain_harmonics_8cc_1a0ac21544be2eca2667c5acc784111848" kindref="member">static_polydata_counter</ref>)</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a529fb94c7498f38828c4955476e55520" kindref="member">define_polydata</ref>[<ref refid="_brain_harmonics_8cc_1a0ac21544be2eca2667c5acc784111848" kindref="member">static_polydata_counter</ref>]-&gt;Initialize();</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a529fb94c7498f38828c4955476e55520" kindref="member">define_polydata</ref>.push_back(vtkSmartPointer&lt;vtkPolyData&gt;::New());</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a529fb94c7498f38828c4955476e55520" kindref="member">define_polydata</ref>[<ref refid="_brain_harmonics_8cc_1a0ac21544be2eca2667c5acc784111848" kindref="member">static_polydata_counter</ref>]-&gt;Initialize();</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a529fb94c7498f38828c4955476e55520" kindref="member">define_polydata</ref>[<ref refid="_brain_harmonics_8cc_1a0ac21544be2eca2667c5acc784111848" kindref="member">static_polydata_counter</ref>]-&gt;SetPoints(<ref refid="_brain_harmonics_8cc_1a459726c3dbd394d957c5e0e8fad43f71" kindref="member">define_points</ref>);</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a529fb94c7498f38828c4955476e55520" kindref="member">define_polydata</ref>[<ref refid="_brain_harmonics_8cc_1a0ac21544be2eca2667c5acc784111848" kindref="member">static_polydata_counter</ref>]-&gt;SetLines(<ref refid="_brain_harmonics_8cc_1aa97d4b3a68fbfaea550fe20234905b66" kindref="member">define_cellarrays</ref>[<ref refid="_brain_harmonics_8cc_1a3f51384611b8ff0bcedef8dc6f27bbc8" kindref="member">static_cellarrays_counter</ref>]);</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a529fb94c7498f38828c4955476e55520" kindref="member">define_polydata</ref>[<ref refid="_brain_harmonics_8cc_1a0ac21544be2eca2667c5acc784111848" kindref="member">static_polydata_counter</ref>]-&gt;Modified();</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/>vtkSmartPointer&lt;vtkCoordinate&gt;<sp/>coordinate_system<sp/>=<sp/>vtkCoordinate::New();</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/>coordinate_system-&gt;SetCoordinateSystemToDisplay();</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Setup<sp/>the<sp/>text<sp/>and<sp/>add<sp/>it<sp/>to<sp/>the<sp/>renderer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Build<sp/>display<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/>vtkSmartPointer&lt;vtkTextActor&gt;<sp/>text_actor;</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="glad_8h_1ae84541b4f3d8e1ea24ec0f466a8c568b" kindref="member">std::string</ref><sp/>textOptions[11][11];</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/>text_actor<sp/>=<sp/>vtkSmartPointer&lt;vtkTextActor&gt;::New();</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/>text_actor-&gt;SetInput<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;Initialising...&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/>text_actor-&gt;SetDisplayPosition(<sp/>400,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/>text_actor-&gt;GetTextProperty()-&gt;SetFontSize<sp/>(<sp/>24<sp/>);</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/>text_actor-&gt;GetTextProperty()-&gt;SetColor<sp/>(<sp/>1.0,<sp/>0.0,<sp/>0.0<sp/>);</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a4929783757e2d051945177d626a74213" kindref="member">define_textactors</ref>.push_back(text_actor);</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/>textOptions[1][0]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Read<sp/>Only&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/>textOptions[1][1]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Read<sp/>Write&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/>text_actor<sp/>=<sp/>vtkSmartPointer&lt;vtkTextActor&gt;::New();</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/>text_actor-&gt;SetInput(<sp/>textOptions[1][0].c_str()<sp/>);</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a4929783757e2d051945177d626a74213" kindref="member">define_textactors</ref>.push_back(text_actor);</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/>textOptions[2][0]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Level&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/>text_actor<sp/>=<sp/>vtkSmartPointer&lt;vtkTextActor&gt;::New();</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/>text_actor-&gt;SetInput(<sp/>textOptions[2][0].c_str()<sp/>);</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a4929783757e2d051945177d626a74213" kindref="member">define_textactors</ref>.push_back(text_actor);</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/>textOptions[3][0]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;TOP&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/>text_actor<sp/>=<sp/>vtkSmartPointer&lt;vtkTextActor&gt;::New();</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/>text_actor-&gt;SetInput(<sp/>textOptions[3][0].c_str()<sp/>);</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a4929783757e2d051945177d626a74213" kindref="member">define_textactors</ref>.push_back(text_actor);</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/>textOptions[4][0]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&lt;<sp/>^<sp/>v<sp/>&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/>textOptions[4][1]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&lt;<sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/>textOptions[4][2]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>^<sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/>textOptions[4][3]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>v<sp/><sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/>textOptions[4][4]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/>&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/>text_actor<sp/>=<sp/>vtkSmartPointer&lt;vtkTextActor&gt;::New();</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/>text_actor-&gt;SetInput(<sp/>textOptions[4][0].c_str()<sp/>);</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a4929783757e2d051945177d626a74213" kindref="member">define_textactors</ref>.push_back(text_actor);</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/>textOptions[5][0]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Quantity&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/>text_actor<sp/>=<sp/>vtkSmartPointer&lt;vtkTextActor&gt;::New();</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/>text_actor-&gt;SetInput(<sp/>textOptions[5][0].c_str()<sp/>);</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a4929783757e2d051945177d626a74213" kindref="member">define_textactors</ref>.push_back(text_actor);</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/>textOptions[6][0]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;0000&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/>text_actor<sp/>=<sp/>vtkSmartPointer&lt;vtkTextActor&gt;::New();</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/>text_actor-&gt;SetInput(<sp/>textOptions[6][0].c_str()<sp/>);</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a4929783757e2d051945177d626a74213" kindref="member">define_textactors</ref>.push_back(text_actor);</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/>textOptions[7][0]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Patterns&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/>text_actor<sp/>=<sp/>vtkSmartPointer&lt;vtkTextActor&gt;::New();</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/>text_actor-&gt;SetInput(<sp/>textOptions[7][0].c_str()<sp/>);</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a4929783757e2d051945177d626a74213" kindref="member">define_textactors</ref>.push_back(text_actor);</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/>textOptions[8][0]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;0000&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/>text_actor<sp/>=<sp/>vtkSmartPointer&lt;vtkTextActor&gt;::New();</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/>text_actor-&gt;SetInput(<sp/>textOptions[8][0].c_str()<sp/>);</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a4929783757e2d051945177d626a74213" kindref="member">define_textactors</ref>.push_back(text_actor);</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/>textOptions[9][0]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ZOOM&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/>textOptions[9][1]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;PAN&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/>textOptions[9][2]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ROTATE&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/>textOptions[9][3]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;MOVE&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/>textOptions[9][4]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;CHOOSE&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/>textOptions[9][5]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;MODIFY&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/>textOptions[9][6]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;TIME&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/>text_actor<sp/>=<sp/>vtkSmartPointer&lt;vtkTextActor&gt;::New();</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/>text_actor-&gt;SetInput(<sp/>textOptions[9][0].c_str()<sp/>);</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a4929783757e2d051945177d626a74213" kindref="member">define_textactors</ref>.push_back(text_actor);</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/>textOptions[10][0]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;0000&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/>text_actor<sp/>=<sp/>vtkSmartPointer&lt;vtkTextActor&gt;::New();</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/>text_actor-&gt;SetInput(<sp/>textOptions[10][0].c_str()<sp/>);</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a4929783757e2d051945177d626a74213" kindref="member">define_textactors</ref>.push_back(text_actor);</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>text_loop<sp/>=<sp/>1;<sp/>text_loop<sp/>&lt;<sp/><ref refid="_brain_harmonics_8cc_1a4929783757e2d051945177d626a74213" kindref="member">define_textactors</ref>.size();<sp/>text_loop++)</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a4929783757e2d051945177d626a74213" kindref="member">define_textactors</ref>[text_loop]-&gt;SetDisplayPosition(900.0,<sp/>(((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(text_loop)<sp/>-<sp/>1)/2)+1)<sp/>*<sp/>25.0);</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a4929783757e2d051945177d626a74213" kindref="member">define_textactors</ref>[text_loop]-&gt;GetTextProperty()-&gt;SetFontSize<sp/>(<sp/>12<sp/>);</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a4929783757e2d051945177d626a74213" kindref="member">define_textactors</ref>[text_loop]-&gt;GetTextProperty()-&gt;SetColor<sp/>(<sp/>1.0,<sp/>0.0,<sp/>0.0<sp/>);</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>polydata<sp/>mapper<sp/>and<sp/>actor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="_brain_harmonics_8cc_1a804c9adf98d06fdd2f125e84deb75433" kindref="member">define_datamappers2D</ref>.size()<sp/>&gt;<sp/><ref refid="_brain_harmonics_8cc_1a3e27beef07882d4684ad6d35239b7a60" kindref="member">static_datamappers2D_counter</ref>)</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a804c9adf98d06fdd2f125e84deb75433" kindref="member">define_datamappers2D</ref>[<ref refid="_brain_harmonics_8cc_1a3e27beef07882d4684ad6d35239b7a60" kindref="member">static_datamappers2D_counter</ref>]<sp/>=<sp/>vtkSmartPointer&lt;vtkPolyDataMapper2D&gt;::New();</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a804c9adf98d06fdd2f125e84deb75433" kindref="member">define_datamappers2D</ref>.push_back(vtkSmartPointer&lt;vtkPolyDataMapper2D&gt;::New());</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a804c9adf98d06fdd2f125e84deb75433" kindref="member">define_datamappers2D</ref>[<ref refid="_brain_harmonics_8cc_1a3e27beef07882d4684ad6d35239b7a60" kindref="member">static_datamappers2D_counter</ref>]-&gt;SetInputData(<ref refid="_brain_harmonics_8cc_1a529fb94c7498f38828c4955476e55520" kindref="member">define_polydata</ref>[<ref refid="_brain_harmonics_8cc_1a0ac21544be2eca2667c5acc784111848" kindref="member">static_polydata_counter</ref>]);</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a804c9adf98d06fdd2f125e84deb75433" kindref="member">define_datamappers2D</ref>[<ref refid="_brain_harmonics_8cc_1a3e27beef07882d4684ad6d35239b7a60" kindref="member">static_datamappers2D_counter</ref>]-&gt;SetTransformCoordinate(coordinate_system);</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a804c9adf98d06fdd2f125e84deb75433" kindref="member">define_datamappers2D</ref>[<ref refid="_brain_harmonics_8cc_1a3e27beef07882d4684ad6d35239b7a60" kindref="member">static_datamappers2D_counter</ref>]-&gt;ScalarVisibilityOn();</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a804c9adf98d06fdd2f125e84deb75433" kindref="member">define_datamappers2D</ref>[<ref refid="_brain_harmonics_8cc_1a3e27beef07882d4684ad6d35239b7a60" kindref="member">static_datamappers2D_counter</ref>]-&gt;SetScalarModeToUsePointData();</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a804c9adf98d06fdd2f125e84deb75433" kindref="member">define_datamappers2D</ref>[<ref refid="_brain_harmonics_8cc_1a3e27beef07882d4684ad6d35239b7a60" kindref="member">static_datamappers2D_counter</ref>]-&gt;Update();</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="_brain_harmonics_8cc_1a06728597be70303b9f19f653a5dc90ee" kindref="member">define_actors2D</ref>.size()<sp/>&gt;<sp/><ref refid="_brain_harmonics_8cc_1a3fe403ad89b282d8d1b8fa92bf05f42e" kindref="member">static_actors2D_counter</ref>)</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a06728597be70303b9f19f653a5dc90ee" kindref="member">define_actors2D</ref>[<ref refid="_brain_harmonics_8cc_1a3fe403ad89b282d8d1b8fa92bf05f42e" kindref="member">static_actors2D_counter</ref>]<sp/>=<sp/>vtkSmartPointer&lt;vtkActor2D&gt;::New();</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a06728597be70303b9f19f653a5dc90ee" kindref="member">define_actors2D</ref>.push_back(vtkSmartPointer&lt;vtkActor2D&gt;::New());</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a06728597be70303b9f19f653a5dc90ee" kindref="member">define_actors2D</ref>[<ref refid="_brain_harmonics_8cc_1a3fe403ad89b282d8d1b8fa92bf05f42e" kindref="member">static_actors2D_counter</ref>]-&gt;SetMapper(<ref refid="_brain_harmonics_8cc_1a804c9adf98d06fdd2f125e84deb75433" kindref="member">define_datamappers2D</ref>[<ref refid="_brain_harmonics_8cc_1a3e27beef07882d4684ad6d35239b7a60" kindref="member">static_datamappers2D_counter</ref>]);</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a06728597be70303b9f19f653a5dc90ee" kindref="member">define_actors2D</ref>[<ref refid="_brain_harmonics_8cc_1a3fe403ad89b282d8d1b8fa92bf05f42e" kindref="member">static_actors2D_counter</ref>]-&gt;GetProperty()-&gt;SetLineWidth(2);</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>renderer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="_brain_harmonics_8cc_1aab0f6cfd03b167486b3a0ebbb68922be" kindref="member">define_renderers</ref>.size()<sp/>&gt;<sp/><ref refid="_brain_harmonics_8cc_1aad3d1808a6ab9363f0430c1e9650324d" kindref="member">static_renderers_counter</ref>)</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1aab0f6cfd03b167486b3a0ebbb68922be" kindref="member">define_renderers</ref>[<ref refid="_brain_harmonics_8cc_1aad3d1808a6ab9363f0430c1e9650324d" kindref="member">static_renderers_counter</ref>]<sp/>=<sp/>vtkSmartPointer&lt;vtkRenderer&gt;::New();</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1aab0f6cfd03b167486b3a0ebbb68922be" kindref="member">define_renderers</ref>.push_back(vtkSmartPointer&lt;vtkRenderer&gt;::New());</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1aab0f6cfd03b167486b3a0ebbb68922be" kindref="member">define_renderers</ref>[<ref refid="_brain_harmonics_8cc_1aad3d1808a6ab9363f0430c1e9650324d" kindref="member">static_renderers_counter</ref>]-&gt;SetBackground<sp/>(<sp/>0,<sp/>0,<sp/>0<sp/>);<sp/></highlight><highlight class="comment">//<sp/>Set<sp/>background<sp/>colour<sp/>to<sp/>white</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>the<sp/>VTK<sp/>actors<sp/>to<sp/>the<sp/>scene</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1aab0f6cfd03b167486b3a0ebbb68922be" kindref="member">define_renderers</ref>[<ref refid="_brain_harmonics_8cc_1aad3d1808a6ab9363f0430c1e9650324d" kindref="member">static_renderers_counter</ref>]-&gt;AddActor2D(<ref refid="_brain_harmonics_8cc_1a06728597be70303b9f19f653a5dc90ee" kindref="member">define_actors2D</ref>[<ref refid="_brain_harmonics_8cc_1a3fe403ad89b282d8d1b8fa92bf05f42e" kindref="member">static_actors2D_counter</ref>]);</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a06728597be70303b9f19f653a5dc90ee" kindref="member">define_actors2D</ref>[<ref refid="_brain_harmonics_8cc_1a3fe403ad89b282d8d1b8fa92bf05f42e" kindref="member">static_actors2D_counter</ref>]-&gt;GetProperty()-&gt;SetColor(0,1,0);</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a06728597be70303b9f19f653a5dc90ee" kindref="member">define_actors2D</ref>[<ref refid="_brain_harmonics_8cc_1a3fe403ad89b282d8d1b8fa92bf05f42e" kindref="member">static_actors2D_counter</ref>]-&gt;GetProperty()-&gt;SetPointSize(2);</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="_brain_harmonics_8cc_1a4929783757e2d051945177d626a74213" kindref="member">define_textactors</ref>.size();<sp/>i++)</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1aab0f6cfd03b167486b3a0ebbb68922be" kindref="member">define_renderers</ref>[<ref refid="_brain_harmonics_8cc_1aad3d1808a6ab9363f0430c1e9650324d" kindref="member">static_renderers_counter</ref>]-&gt;AddActor2D(<ref refid="_brain_harmonics_8cc_1a4929783757e2d051945177d626a74213" kindref="member">define_textactors</ref>[i]);</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>render<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a6ce111e58fd1f4622e6a322cefd19b26" kindref="member">render_window</ref><sp/>=<sp/>vtkSmartPointer&lt;vtkRenderWindow&gt;::New();</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a6ce111e58fd1f4622e6a322cefd19b26" kindref="member">render_window</ref>-&gt;AddRenderer<sp/>(<sp/><ref refid="_brain_harmonics_8cc_1aab0f6cfd03b167486b3a0ebbb68922be" kindref="member">define_renderers</ref>[<ref refid="_brain_harmonics_8cc_1aad3d1808a6ab9363f0430c1e9650324d" kindref="member">static_renderers_counter</ref>]<sp/>);</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a6ce111e58fd1f4622e6a322cefd19b26" kindref="member">render_window</ref>-&gt;SetSize(l_screenX,<sp/>l_screenY);</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>interactor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a65b7a900454637a30df23b1044e07e07" kindref="member">render_window_interactor</ref><sp/>=<sp/>vtkSmartPointer&lt;vtkRenderWindowInteractor&gt;::New();</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a65b7a900454637a30df23b1044e07e07" kindref="member">render_window_interactor</ref>-&gt;SetRenderWindow<sp/>(<sp/><ref refid="_brain_harmonics_8cc_1a6ce111e58fd1f4622e6a322cefd19b26" kindref="member">render_window</ref><sp/>);</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set-up<sp/>the<sp/>simulation<sp/>environment.<sp/>Currently<sp/>a<sp/>skeletal<sp/>environment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Brain<sp/>Harmonics<sp/>-<sp/>Using<sp/>neuron<sp/>concepts<sp/>to<sp/>solve<sp/>problems&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;First<sp/>we<sp/>need<sp/>to<sp/>create<sp/>the<sp/>environment:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>Big<sp/>Bang...&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Synchronise<sp/>events</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/>event_time<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>universe_list<sp/>is<sp/>a<sp/>vector<sp/>of<sp/>pointers<sp/>to<sp/>the<sp/>Universe<sp/>objects.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Typically<sp/>use<sp/>one<sp/>Universe<sp/>per<sp/>experiment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a602d3f70549216866d35be56a17fa06e" kindref="member">universe_list</ref>.clear();<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>vector<sp/>is<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>universe_loop<sp/>=<sp/>0;<sp/>universe_loop<sp/>&lt;=<sp/>num_universes<sp/>-<sp/>1<sp/>;<sp/>universe_loop++)</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pass<sp/>the<sp/>universe_list<sp/>address<sp/>to<sp/>the<sp/>create<sp/>function<sp/>to<sp/>keep<sp/>all<sp/>Universes<sp/>within<sp/>the<sp/>same<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status_of_call_request<sp/>=<sp/><ref refid="_brain_harmonics_8cc_1a5b7bc303552f00bc26a7b5bf962f3376" kindref="member">CreateUniverse</ref>(event_time,<sp/>&amp;<ref refid="_brain_harmonics_8cc_1a602d3f70549216866d35be56a17fa06e" kindref="member">universe_list</ref>).size();</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status_of_call_request<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Universe<sp/>creation<sp/>failed!&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;No.:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="_brain_harmonics_8cc_1a602d3f70549216866d35be56a17fa06e" kindref="member">universe_list</ref>.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>universe<sp/>address<sp/>created.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>num_dimensions_in_universe[universe_loop]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>dimensions<sp/>addresses<sp/>to<sp/>create.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Cycle<sp/>through<sp/>Universes<sp/>allocating<sp/>n<sp/>Dimensions<sp/>and<sp/>updating<sp/>total<sp/>with<sp/>reported<sp/>back<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_dimensions_in_universe[universe_loop]<sp/>=<sp/>(<ref refid="_brain_harmonics_8cc_1a602d3f70549216866d35be56a17fa06e" kindref="member">universe_list</ref>[universe_loop]-&gt;AddDimensions(event_time,<sp/>num_dimensions_in_universe[universe_loop])).<ref refid="glad_8h_1a3d1e3edfcf61ca2d831883e1afbad89e" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>num_dimensions_in_universe[universe_loop]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>dimension<sp/>addresses<sp/>available<sp/>in<sp/>Universe:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>universe_loop<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>new<sp/>Elementary<sp/>Particles<sp/>-<sp/>Quarks<sp/>etc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>num_elementary_particles_in_universe[universe_loop]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>elementary<sp/>particle<sp/>addresses<sp/>to<sp/>create.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Cycle<sp/>through<sp/>Universes<sp/>allocating<sp/>n<sp/>Elementary<sp/>Particles<sp/>and<sp/>updating<sp/>total<sp/>with<sp/>reported<sp/>back<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_elementary_particles_in_universe[universe_loop]<sp/>=<sp/>(<ref refid="_brain_harmonics_8cc_1a602d3f70549216866d35be56a17fa06e" kindref="member">universe_list</ref>[universe_loop]-&gt;AddElementaryParticles(event_time,<sp/>num_elementary_particles_in_universe[universe_loop])).<ref refid="glad_8h_1a3d1e3edfcf61ca2d831883e1afbad89e" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>num_elementary_particles_in_universe[universe_loop]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>elementary<sp/>particle<sp/>addresses<sp/>available.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter_Charge<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>particle_loop<sp/>=<sp/>0;<sp/>particle_loop<sp/>&lt;<sp/>num_elementary_particles_in_universe[universe_loop];<sp/>particle_loop++)</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter_Charge++;</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(counter_Charge<sp/>&gt;<sp/>6)<sp/>counter_Charge<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter_Spin<sp/>=<sp/>int(1<sp/>-<sp/>counter_Spin);</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Try<sp/>to<sp/>ensure<sp/>we<sp/>get<sp/>variations<sp/>of<sp/>particles.<sp/>Not<sp/>all<sp/>one<sp/>type<sp/>by<sp/>changing<sp/>Charge<sp/>and<sp/>Spin.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="_brain_harmonics_8cc_1a602d3f70549216866d35be56a17fa06e" kindref="member">universe_list</ref>[universe_loop]-&gt;GetElementaryParticles(event_time))[particle_loop]-&gt;SetCharge(event_time,<sp/>counter_Charge);</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="_brain_harmonics_8cc_1a602d3f70549216866d35be56a17fa06e" kindref="member">universe_list</ref>[universe_loop]-&gt;GetElementaryParticles(event_time))[particle_loop]-&gt;SetSpin(event_time,<sp/>counter_Spin);</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>new<sp/>Elementary<sp/>Forces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>num_elementary_forces_in_universe[universe_loop]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>elementary<sp/>force<sp/>addresses<sp/>to<sp/>create.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Cycle<sp/>through<sp/>Universes<sp/>allocating<sp/>n<sp/>Elementary<sp/>Forces<sp/>and<sp/>updating<sp/>total<sp/>with<sp/>reported<sp/>back<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_elementary_forces_in_universe[universe_loop]<sp/>=<sp/>(<ref refid="_brain_harmonics_8cc_1a602d3f70549216866d35be56a17fa06e" kindref="member">universe_list</ref>[universe_loop]-&gt;AddElementaryForces(event_time,<sp/>num_elementary_forces_in_universe[universe_loop])).<ref refid="glad_8h_1a3d1e3edfcf61ca2d831883e1afbad89e" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>num_elementary_forces_in_universe[universe_loop]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>elementary<sp/>force<sp/>addresses<sp/>available.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter_gravitation<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter_weak<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter_weak_electroweak<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter_electromagnetic<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter_electromagnetic_electroweak<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter_strong<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter_stronfundamental<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter_stronresidual<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>force_loop<sp/>=<sp/>0;<sp/>force_loop<sp/>&lt;<sp/>num_elementary_forces_in_universe[universe_loop];<sp/>force_loop++)</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter_gravitation<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(counter_gravitation<sp/>&gt;<sp/>3)</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter_gravitation<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter_weak<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(counter_weak<sp/>&gt;<sp/>2)</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter_weak<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter_weak_electroweak<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(counter_weak_electroweak<sp/>&gt;<sp/>4)</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter_weak_electroweak<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter_electromagnetic<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(counter_electromagnetic<sp/>&gt;<sp/>6)</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter_electromagnetic<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter_electromagnetic_electroweak<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(counter_electromagnetic_electroweak<sp/>&gt;<sp/>3)</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter_electromagnetic_electroweak<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter_strong<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(counter_strong<sp/>&gt;<sp/>3)</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter_strong<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter_stronfundamental<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(counter_stronfundamental<sp/>&gt;<sp/>7)</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter_stronfundamental<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter_stronresidual<sp/>+=<sp/>0;</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(counter_stronresidual<sp/>&gt;3)</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter_stronresidual<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Try<sp/>to<sp/>ensure<sp/>we<sp/>get<sp/>variations<sp/>of<sp/>forces.<sp/>Not<sp/>all<sp/>one<sp/>type<sp/>by<sp/>changing<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="_brain_harmonics_8cc_1a602d3f70549216866d35be56a17fa06e" kindref="member">universe_list</ref>[universe_loop]-&gt;GetElementaryForces(event_time))[force_loop]-&gt;SetGravitation(event_time,<sp/>counter_gravitation);</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="_brain_harmonics_8cc_1a602d3f70549216866d35be56a17fa06e" kindref="member">universe_list</ref>[universe_loop]-&gt;GetElementaryForces(event_time))[force_loop]-&gt;SetWeak(event_time,<sp/>counter_weak);</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="_brain_harmonics_8cc_1a602d3f70549216866d35be56a17fa06e" kindref="member">universe_list</ref>[universe_loop]-&gt;GetElementaryForces(event_time))[force_loop]-&gt;SetWeakElectroweak(event_time,<sp/>counter_weak_electroweak);</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="_brain_harmonics_8cc_1a602d3f70549216866d35be56a17fa06e" kindref="member">universe_list</ref>[universe_loop]-&gt;GetElementaryForces(event_time))[force_loop]-&gt;SetElectromagnetic(event_time,<sp/>counter_electromagnetic);</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="_brain_harmonics_8cc_1a602d3f70549216866d35be56a17fa06e" kindref="member">universe_list</ref>[universe_loop]-&gt;GetElementaryForces(event_time))[force_loop]-&gt;SetElectromagneticElectroweak(event_time,<sp/>counter_electromagnetic_electroweak);</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="_brain_harmonics_8cc_1a602d3f70549216866d35be56a17fa06e" kindref="member">universe_list</ref>[universe_loop]-&gt;GetElementaryForces(event_time))[force_loop]-&gt;SetStrong(event_time,<sp/>counter_strong);</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="_brain_harmonics_8cc_1a602d3f70549216866d35be56a17fa06e" kindref="member">universe_list</ref>[universe_loop]-&gt;GetElementaryForces(event_time))[force_loop]-&gt;SetStrongFundamental(event_time,<sp/>counter_stronfundamental);</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="_brain_harmonics_8cc_1a602d3f70549216866d35be56a17fa06e" kindref="member">universe_list</ref>[universe_loop]-&gt;GetElementaryForces(event_time))[force_loop]-&gt;SetStrongResidual(event_time,<sp/>counter_stronresidual);</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>new<sp/>Composite<sp/>Force<sp/>Particles<sp/>-<sp/>Protons<sp/>/<sp/>Neutrons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>num_composite_forceparticles_in_universe[universe_loop]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>composite<sp/>force<sp/>particle<sp/>addresses<sp/>to<sp/>create.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Cycle<sp/>through<sp/>Universes<sp/>allocating<sp/>n<sp/>Composite<sp/>Force<sp/>Particles<sp/>and<sp/>updating<sp/>total<sp/>with<sp/>reported<sp/>back<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_composite_forceparticles_in_universe[universe_loop]<sp/>=<sp/>(<ref refid="_brain_harmonics_8cc_1a602d3f70549216866d35be56a17fa06e" kindref="member">universe_list</ref>[universe_loop]-&gt;AddCompositeForceParticles(event_time,<sp/>num_composite_forceparticles_in_universe[universe_loop])).<ref refid="glad_8h_1a3d1e3edfcf61ca2d831883e1afbad89e" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>num_composite_forceparticles_in_universe[universe_loop]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>composite<sp/>force<sp/>particle<sp/>addresses<sp/>available.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>how_many_particles<sp/>=<sp/>int(<ref refid="_brain_harmonics_8cc_1a602d3f70549216866d35be56a17fa06e" kindref="member">universe_list</ref>[universe_loop]-&gt;GetElementaryParticles(event_time).<ref refid="glad_8h_1a3d1e3edfcf61ca2d831883e1afbad89e" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1928"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Rearrange<sp/>vector<sp/>of<sp/>new<sp/>Particles<sp/>in<sp/>an<sp/>order<sp/>closer<sp/>to<sp/>how<sp/>they&apos;re<sp/>likely<sp/>to<sp/>interact.</highlight></codeline>
<codeline lineno="1929"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>qloop<sp/>=<sp/>0;<sp/>qloop<sp/>&lt;=<sp/>initial_particle_alignment<sp/>*<sp/>how_many_particles;<sp/>qloop++)</highlight></codeline>
<codeline lineno="1930"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1931"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter_Walk<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1932"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_Distance<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1933"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter_infinite_loop_prevention<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1934"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1935"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do<sp/>{</highlight></codeline>
<codeline lineno="1936"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter_infinite_loop_prevention++;</highlight></codeline>
<codeline lineno="1937"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_Distance<sp/>=<sp/>current_Distance;</highlight></codeline>
<codeline lineno="1938"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_Distance<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1939"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while(counter_Walk<sp/>&lt;=<sp/>(how_many_particles<sp/>-<sp/>3))</highlight></codeline>
<codeline lineno="1940"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1941"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_switch<sp/>=<sp/>CompareSwapElementaryParticle(universe_list[universe_loop]-&gt;GetElementaryParticles(event_time),<sp/>counter_Walk,<sp/>counter_Walk<sp/>+<sp/>1,<sp/>counter_Walk<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="1942"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(l_switch)<sp/>counter_Walk--;<sp/>else<sp/>counter_Walk++;//<sp/>If<sp/>Switch<sp/>occurred<sp/>retest<sp/>previous<sp/>Origin</highlight></codeline>
<codeline lineno="1943"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(counter_Walk<sp/>&lt;<sp/>0)<sp/>counter_Walk<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1944"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1945"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_origin<sp/>=<sp/>elementary_particle_list[counter_Walk]-&gt;GetCharge();</highlight></codeline>
<codeline lineno="1946"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_origin_Test1<sp/>=<sp/>elementary_particle_list[counter_Walk<sp/>+<sp/>1]-&gt;GetCharge();</highlight></codeline>
<codeline lineno="1947"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_origin_Test3<sp/>=<sp/>l_origin_Test1<sp/>-<sp/>l_origin;</highlight></codeline>
<codeline lineno="1948"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_origin_Test5<sp/>=<sp/>l_origin_Test3<sp/>*<sp/>l_origin_Test3;</highlight></codeline>
<codeline lineno="1949"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_Distance<sp/>=<sp/>current_Distance<sp/>+<sp/>l_origin_Test5;</highlight></codeline>
<codeline lineno="1950"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1951"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(<sp/>current_Distance<sp/>&lt;<sp/>max_Distance<sp/>&amp;&amp;<sp/>counter_infinite_loop_prevention<sp/>&lt;<sp/>infinite_loop_prevention_threshold);</highlight></codeline>
<codeline lineno="1952"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1953"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1954"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter_Walk<sp/>=<sp/>(how_many_particles<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1955"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_Distance<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1956"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter_infinite_loop_prevention<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1957"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1958"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do</highlight></codeline>
<codeline lineno="1959"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1960"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter_infinite_loop_prevention++;</highlight></codeline>
<codeline lineno="1961"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_Distance<sp/>=<sp/>current_Distance;</highlight></codeline>
<codeline lineno="1962"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_Distance<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1963"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while(counter_Walk<sp/>&gt;=<sp/>2)</highlight></codeline>
<codeline lineno="1964"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1965"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_switch<sp/>=<sp/>CompareSwapElementaryParticle(elementary_particle_list,<sp/>counter_Walk,<sp/>counter_Walk<sp/>-<sp/>1,<sp/>counter_Walk<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="1966"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(l_switch)<sp/>counter_Walk++;<sp/>else<sp/>counter_Walk--;</highlight></codeline>
<codeline lineno="1967"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(counter_Walk<sp/>&gt;<sp/>(how_many_particles<sp/>-<sp/>1))<sp/>counter_Walk<sp/>=<sp/>(how_many_particles<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1968"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1969"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_origin<sp/>=<sp/>elementary_particle_list[counter_Walk]-&gt;GetCharge();</highlight></codeline>
<codeline lineno="1970"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_origin_Test1<sp/>=<sp/>elementary_particle_list[counter_Walk<sp/>-<sp/>1]-&gt;GetCharge();</highlight></codeline>
<codeline lineno="1971"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_origin_Test3<sp/>=<sp/>l_origin_Test1<sp/>-<sp/>l_origin;</highlight></codeline>
<codeline lineno="1972"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_origin_Test5<sp/>=<sp/>l_origin_Test3<sp/>*<sp/>l_origin_Test3;</highlight></codeline>
<codeline lineno="1973"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_Distance<sp/>=<sp/>current_Distance<sp/>+<sp/>l_origin_Test5;</highlight></codeline>
<codeline lineno="1974"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1975"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1976"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(<sp/>current_Distance<sp/>&lt;<sp/>max_Distance<sp/>&amp;&amp;<sp/>counter_infinite_loop_prevention<sp/>&lt;<sp/>infinite_loop_prevention_threshold);</highlight></codeline>
<codeline lineno="1977"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1978"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>Elements<sp/>-<sp/>Hydrogen,<sp/>Helium,<sp/>Lithium<sp/>etc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matter_list.clear();</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1983"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Matter*&gt;<sp/>matter_for_this_universe<sp/>=<sp/><sp/>universe_list[1].AddMatter(event_time,<sp/>initial_matter);</highlight></codeline>
<codeline lineno="1984"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matter_list<sp/>=<sp/>*matter_for_this_universe;</highlight></codeline>
<codeline lineno="1985"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1987"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status_of_call_request<sp/>=<sp/>AddMatter(&amp;<sp/>matter_list,<sp/>&amp;<sp/>composite_particle_list,<sp/><sp/>int(<sp/>composite_particle_list.size()<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="1988"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(status_of_call_request)</highlight></codeline>
<codeline lineno="1989"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1990"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Matter<sp/>addition<sp/>failed!&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1991"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>EXIT_FAILURE;</highlight></codeline>
<codeline lineno="1992"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1993"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1994"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/><sp/>matter_list.size()<sp/>&lt;&lt;<sp/>&quot;<sp/>matter<sp/>addresses<sp/>created.&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1995"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>Monomers<sp/>-<sp/>Carbohydrates/Sugars<sp/>etc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>monomer_list.clear();</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1999"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Monomer*&gt;<sp/>monomer_for_this_universe<sp/>=<sp/><sp/>universe_list[1].AddMonomer(event_time,<sp/>initial_monomer);</highlight></codeline>
<codeline lineno="2000"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>monomer_list<sp/>=<sp/>*monomer_for_this_universe;</highlight></codeline>
<codeline lineno="2001"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2003"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status_of_call_request<sp/>=<sp/>AddMonomer(&amp;<sp/>monomer_list,<sp/>&amp;<sp/>matter_list,<sp/><sp/>int(<sp/>matter_list.size()<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="2004"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(status_of_call_request)</highlight></codeline>
<codeline lineno="2005"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2006"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Monomer<sp/>addition<sp/>failed!&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2007"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>EXIT_FAILURE;</highlight></codeline>
<codeline lineno="2008"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2009"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2010"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/><sp/>monomer_list.size()<sp/>&lt;&lt;<sp/>&quot;<sp/>monomer<sp/>addresses<sp/>created.&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2011"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polymer_list.clear();</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2014"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Polymer*&gt;<sp/>polymer_for_this_universe<sp/>=<sp/><sp/>universe_list[1].AddPolymer(event_time,<sp/>initial_polymer);</highlight></codeline>
<codeline lineno="2015"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polymer_list<sp/>=<sp/>*polymer_for_this_universe;</highlight></codeline>
<codeline lineno="2016"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2018"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status_of_call_request<sp/>=<sp/>AddPolymer(&amp;<sp/>polymer_list,<sp/>&amp;<sp/>monomer_list,<sp/><sp/>int(<sp/>monomer_list.size()<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="2019"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(status_of_call_request)</highlight></codeline>
<codeline lineno="2020"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2021"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Polymer<sp/>addition<sp/>failed!&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2022"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>EXIT_FAILURE;</highlight></codeline>
<codeline lineno="2023"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2024"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2025"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/><sp/>polymer_list.size()<sp/>&lt;&lt;<sp/>&quot;<sp/>polymer<sp/>addresses<sp/>created.&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2026"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Cycle<sp/>through<sp/>Universes<sp/>allocating<sp/>n<sp/>Cognitive<sp/>Networks<sp/>and<sp/>updating<sp/>total<sp/>with<sp/>reported<sp/>back<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_cognitive_networks_in_universe[universe_loop]<sp/>=<sp/>(<sp/><ref refid="_brain_harmonics_8cc_1a602d3f70549216866d35be56a17fa06e" kindref="member">universe_list</ref>[universe_loop]-&gt;AddCognitiveNetworks(event_time,<sp/>num_cognitive_networks_in_universe[universe_loop])).<ref refid="glad_8h_1a3d1e3edfcf61ca2d831883e1afbad89e" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>num_cognitive_networks_in_universe[universe_loop]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cognitive<sp/>network<sp/>addresses<sp/>available.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>current_universe_pointer<sp/>=<sp/><ref refid="_brain_harmonics_8cc_1a602d3f70549216866d35be56a17fa06e" kindref="member">universe_list</ref>[universe_loop];</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cognitive_network_loop;<sp/>cognitive_network_loop<sp/>&lt;<sp/>num_cognitive_networks_in_universe[universe_loop];<sp/>cognitive_network_loop++)</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>Orbital<sp/>objects<sp/>to<sp/>Cognitive<sp/>Network<sp/>which<sp/>is<sp/>derived<sp/>from<sp/>Universe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>current_cognitivenetwork_pointer<sp/>=<sp/>current_universe_pointer-&gt;GetCognitiveNetwork(event_time,<sp/>cognitive_network_loop);</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cognitive_pointer<sp/>=<sp/>dynamic_cast&lt;CognitiveNetwork*&gt;(current_cognitivenetwork_pointer))</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Cause<sp/>initialisation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cognitive_pointer-&gt;Update(event_time);</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_orbitals_in_cognitive_network[cognitive_network_loop]<sp/>=<sp/>(cognitive_pointer-&gt;CreateOrbitals(event_time,<sp/>num_orbitals_in_cognitive_network[cognitive_network_loop])).<ref refid="glad_8h_1a3d1e3edfcf61ca2d831883e1afbad89e" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>init_loop<sp/>=<sp/>0;<sp/>init_loop<sp/>&lt;<sp/>num_orbitals_in_cognitive_network[cognitive_network_loop];<sp/>init_loop++)</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>init_pointer<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="class_orbital" kindref="compound">Orbital</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(cognitive_pointer-&gt;GetOrbital(event_time,<sp/>init_loop));</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>init_pointer-&gt;<ref refid="class_orbital_1a837289c3b2af844724c381707dee40d0" kindref="member">Update</ref>(event_time);</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>num_orbitals_in_cognitive_network[cognitive_network_loop]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>orbital<sp/>addresses<sp/>available.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>Neuron<sp/>objects<sp/>to<sp/>Cognitive<sp/>Network<sp/>which<sp/>is<sp/>derived<sp/>from<sp/>Universe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_neurons_in_cognitive_network[cognitive_network_loop]<sp/>=<sp/>(cognitive_pointer-&gt;CreateNeurons(event_time,<sp/>num_neurons_in_cognitive_network[cognitive_network_loop])).<ref refid="glad_8h_1a3d1e3edfcf61ca2d831883e1afbad89e" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>init_loop<sp/>=<sp/>0;<sp/>init_loop<sp/>&lt;<sp/>num_neurons_in_cognitive_network[cognitive_network_loop];<sp/>init_loop++)</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Retrieving:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>init_loop<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>init_pointer<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="class_neuron" kindref="compound">Neuron</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(cognitive_pointer-&gt;GetNeuron(event_time,<sp/>init_loop));</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>init_pointer-&gt;<ref refid="class_neuron_1a4d1dc3a9f30196fe2b09dfbfc0a567bb" kindref="member">Update</ref>(event_time);</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>num_neurons_in_cognitive_network[cognitive_network_loop]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>neuron<sp/>addresses<sp/>available.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>Synapse<sp/>objects<sp/>to<sp/>Cognitive<sp/>Network<sp/>which<sp/>is<sp/>derived<sp/>from<sp/>Universe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_synapses_in_cognitive_network[cognitive_network_loop]<sp/>=<sp/>(cognitive_pointer-&gt;CreateSynapses(event_time,<sp/>num_synapses_in_cognitive_network[cognitive_network_loop])).<ref refid="glad_8h_1a3d1e3edfcf61ca2d831883e1afbad89e" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>init_loop<sp/>=<sp/>0;<sp/>init_loop<sp/>&lt;<sp/>num_synapses_in_cognitive_network[cognitive_network_loop];<sp/>init_loop++)</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>init_pointer<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="class_synapse" kindref="compound">Synapse</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(cognitive_pointer-&gt;GetSynapse(event_time,<sp/>init_loop));</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>init_pointer-&gt;<ref refid="class_synapse_1a37c64f579846cf18d09b3b262d566ffe" kindref="member">Update</ref>(event_time);</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>num_synapses_in_cognitive_network[cognitive_network_loop]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>synapse<sp/>addresses<sp/>available.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>Neurotransmitter<sp/>objects<sp/>to<sp/>Cognitive<sp/>Network<sp/>which<sp/>is<sp/>derived<sp/>from<sp/>Universe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_neurotransmitters_in_cognitive_network[cognitive_network_loop]<sp/>=<sp/>(cognitive_pointer-&gt;CreateNeurotransmitters(event_time,<sp/>num_neurotransmitters_in_cognitive_network[cognitive_network_loop]).size());</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>init_loop<sp/>=<sp/>0;<sp/>init_loop<sp/>&lt;<sp/>num_neurotransmitters_in_cognitive_network[cognitive_network_loop];<sp/>init_loop++)</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>init_pointer<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="class_neurotransmitter" kindref="compound">Neurotransmitter</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(cognitive_pointer-&gt;GetNeurotransmitter(event_time,<sp/>init_loop));</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>init_pointer-&gt;<ref refid="class_neurotransmitter_1ac9f7be22ca7242207de76ec5e1b055b1" kindref="member">Update</ref>(event_time);</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>num_neurotransmitters_in_cognitive_network[cognitive_network_loop]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>neurotransmitter<sp/>addresses<sp/>available.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>later<sp/>development<sp/>if<sp/>spikes<sp/>need<sp/>to<sp/>be<sp/>simulated<sp/>per<sp/>CognitiveNetwork</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2087"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Spike.clear();</highlight></codeline>
<codeline lineno="2088"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(int<sp/>nloop<sp/>=<sp/>0;nloop<sp/>&lt;<sp/>initial_spikes;<sp/>nloop++)</highlight></codeline>
<codeline lineno="2089"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2090"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status_of_call_request<sp/>=<sp/>AddSpike(&amp;<sp/>Spike);</highlight></codeline>
<codeline lineno="2091"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(status_of_call_request)</highlight></codeline>
<codeline lineno="2092"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2093"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Spike<sp/>addition<sp/>failed!&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2094"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>EXIT_FAILURE;</highlight></codeline>
<codeline lineno="2095"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2096"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!<sp/>Spike.empty())<sp/><sp/>Spike.back().creation();</highlight></codeline>
<codeline lineno="2097"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2098"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2099"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/><sp/>Spike.size()<sp/>&lt;&lt;<sp/>&quot;<sp/>spike<sp/>addresses<sp/>created.&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2100"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>intDimensionsStart<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Physics<sp/>dimensionality<sp/>-<sp/>calculating<sp/>quark<sp/>interactions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>phyDimensionsStart<sp/>=<sp/>intDimensionsStart<sp/>+<sp/>num_dimensions_in_universe[0];</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Spatial<sp/>dimensionality<sp/>-<sp/>real<sp/>world<sp/>representation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>spaDimensionsStart<sp/>=<sp/>phyDimensionsStart<sp/>+<sp/>num_dimensions_in_universe[1];</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Synapse<sp/>delivery<sp/>problem<sp/>-<sp/>separate<sp/>project</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ccpDimensionsStart<sp/>=<sp/>spaDimensionsStart<sp/>+<sp/>num_dimensions_in_universe[2];</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Focus<sp/>on<sp/>spikes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>spkDimensionsStart<sp/>=<sp/>ccpDimensionsStart<sp/>+<sp/>num_dimensions_in_universe[3];</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Focus<sp/>on<sp/>neurotransmitter<sp/>calculations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ntrDimensionsStart<sp/>=<sp/>spkDimensionsStart<sp/>+<sp/>num_dimensions_in_universe[4];</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Focus<sp/>on<sp/>dendrite<sp/>calculations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>denDimensionsStart<sp/>=<sp/>ntrDimensionsStart<sp/>+<sp/>num_dimensions_in_universe[5];</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Focus<sp/>on<sp/>neuron<sp/>calculations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nrnDimensionsStart<sp/>=<sp/>denDimensionsStart<sp/>+<sp/>num_dimensions_in_universe[6];</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Focus<sp/>on<sp/>synapse<sp/>calculations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>synDimensionsStart<sp/>=<sp/>nrnDimensionsStart<sp/>+<sp/>num_dimensions_in_universe[7];</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Focus<sp/>on<sp/>orbital<sp/>example</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>orbDimensionsStart<sp/>=<sp/>synDimensionsStart<sp/>+<sp/>num_dimensions_in_universe[8];</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>After<sp/>screen<sp/>layout<sp/>the<sp/>second<sp/>set<sp/>of<sp/>points<sp/>is<sp/>for<sp/>the<sp/>quantum<sp/>environment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>point_list.clear();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/>l_spaPointBase<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>universe_loop<sp/>=<sp/>0;<sp/>universe_loop<sp/>&lt;<sp/>num_universes;<sp/>universe_loop++)</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>current_universe_pointer<sp/>=<sp/><ref refid="_brain_harmonics_8cc_1a602d3f70549216866d35be56a17fa06e" kindref="member">universe_list</ref>[universe_loop];</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_spaPointBase<sp/>=<sp/>int(current_universe_pointer-&gt;GetPoints(event_time).size());</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status_of_call_request<sp/>=<sp/>(<sp/>current_universe_pointer-&gt;AddPoints(event_time,<sp/>num_elementary_particles_in_universe[universe_loop])).<ref refid="glad_8h_1a3d1e3edfcf61ca2d831883e1afbad89e" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eloop<sp/>=<sp/>1;<sp/>eloop<sp/>&lt;<sp/>num_elementary_particles_in_universe[universe_loop];<sp/>eloop++)</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>current_elementaryparticle_pointer<sp/>=<sp/>current_universe_pointer-&gt;GetElementaryParticle(event_time,<sp/>eloop);</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>previous_elementaryparticle_pointer<sp/>=<sp/>current_universe_pointer-&gt;GetElementaryParticle(event_time,<sp/>eloop<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_elementary_particle" kindref="compound">ElementaryParticle</ref>*<sp/>elementaryparticle_pointer1<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="class_elementary_particle" kindref="compound">ElementaryParticle</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(current_elementaryparticle_pointer);</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_elementary_particle" kindref="compound">ElementaryParticle</ref>*<sp/>elementaryparticle_pointer2<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="class_elementary_particle" kindref="compound">ElementaryParticle</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(previous_elementaryparticle_pointer);</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Work<sp/>out<sp/>the<sp/>charge<sp/>difference<sp/>between<sp/>neighbouring<sp/>particles<sp/>to<sp/>indicate<sp/>how<sp/>far<sp/>apart<sp/>they<sp/>should<sp/>be.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_lastCharge<sp/>=<sp/>l_charge;</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_charge<sp/>=<sp/>double<sp/>(3<sp/>-<sp/>std::abs(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(<sp/>elementaryparticle_pointer1-&gt;<ref refid="class_elementary_particle_1af3ebb984cfe957b2e76463c22e4b5bb5" kindref="member">GetCharge</ref>(event_time)<sp/>-<sp/><sp/>elementaryparticle_pointer2-&gt;<ref refid="class_elementary_particle_1af3ebb984cfe957b2e76463c22e4b5bb5" kindref="member">GetCharge</ref>(event_time))));</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Charge:<sp/>&quot;<sp/>&lt;&lt;<sp/>l_charge<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>angle<sp/>to<sp/>later<sp/>be<sp/>dynamic<sp/>to<sp/>adjust<sp/>for<sp/>different<sp/>particle<sp/>types<sp/>and<sp/>considering<sp/>placement<sp/>of<sp/>existing<sp/>particles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="glad_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref><sp/>=<sp/>(<ref refid="glad_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref><sp/>+<sp/>(180.0<sp/>-<sp/>((l_charge<sp/>*<sp/>l_lastCharge)<sp/>*<sp/>10.0))<sp/>*<sp/><ref refid="universe_8h_1af7e8592d0a634bd3642e9fd508ea8022" kindref="member">DEG2RAD</ref>)<sp/>/<sp/>2.0;<sp/></highlight><highlight class="comment">//<sp/>in<sp/>Radians</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="glad_8h_1a7d65d00ca3b0630d9b5c52df855b19f5" kindref="member">t</ref><sp/>=<sp/>(<ref refid="glad_8h_1a7d65d00ca3b0630d9b5c52df855b19f5" kindref="member">t</ref><sp/>+<sp/>(180.0<sp/>-<sp/>((l_charge<sp/>*<sp/>l_lastCharge)<sp/>*<sp/>10.0))<sp/>*<sp/><ref refid="universe_8h_1af7e8592d0a634bd3642e9fd508ea8022" kindref="member">DEG2RAD</ref>)<sp/>/<sp/>2.0;<sp/></highlight><highlight class="comment">//<sp/>in<sp/>Radians</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>radialDistance<sp/>=<sp/>l_charge;</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>nloop<sp/>=<sp/>spaDimensionsStart;<sp/>nloop<sp/>&lt;<sp/>spaDimensionsStart<sp/>+<sp/>num_dimensions[2];<sp/>nloop++)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>calculate<sp/>the<sp/>position<sp/>on<sp/>the<sp/>surface<sp/>of<sp/>a<sp/>sphere<sp/>is:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(<sp/>where<sp/>radialDistance<sp/>is<sp/>radius<sp/>and<sp/>s<sp/>&amp;<sp/>t<sp/>are<sp/>angles<sp/>in<sp/>Radians.<sp/>The<sp/>Origin<sp/>is<sp/>0,0,0<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>x<sp/>=<sp/>radialDistance<sp/>*<sp/>cos(s)<sp/>*<sp/>sin(t)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>y<sp/>=<sp/>radialDistance<sp/>*<sp/>sin(s)<sp/>*<sp/>sin(t)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>z<sp/>=<sp/>radialDistance<sp/>*<sp/>cos(t)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>radians<sp/>=<sp/>angleInDegrees<sp/>*<sp/>Math.PI<sp/>/<sp/>180</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>distance_to_move.clear();</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>distance_to_move<sp/>=<sp/>{0.0,0.0,0.0,0.0};</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>current_point_pointer<sp/>=<sp/>current_universe_pointer-&gt;<ref refid="class_universe_1a3774f14a13a55827a1a4eea0a404edcb" kindref="member">GetPoint</ref>(event_time,<sp/>l_spaPointBase<sp/>+<sp/>eloop);</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_point" kindref="compound">Point</ref>*<sp/>point_pointer<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="class_point" kindref="compound">Point</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(current_point_pointer);</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point_origin<sp/>=<sp/><sp/>point_pointer-&gt;<ref refid="class_point_1a521d229550d7f38851f9ffb1933046a6" kindref="member">GetPointPosition</ref>(event_time);</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>position<sp/>on<sp/>the<sp/>surface<sp/>of<sp/>a<sp/>sphere</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>sphere<sp/>takes<sp/>the<sp/>previous<sp/>particle<sp/>as<sp/>it&apos;s<sp/>Origin<sp/>and<sp/>the<sp/>radius<sp/>is<sp/>related<sp/>to<sp/>the<sp/>charge.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>position<sp/>on<sp/>the<sp/>surface<sp/>will<sp/>be<sp/>affected<sp/>by<sp/>proximity<sp/>to<sp/>other<sp/>particles.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>distance_to_move<sp/>=<sp/>{radialDistance<sp/>*<sp/>cos(<ref refid="glad_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>)<sp/>*<sp/>sin(<ref refid="glad_8h_1a7d65d00ca3b0630d9b5c52df855b19f5" kindref="member">t</ref>),<sp/>radialDistance<sp/>*<sp/>sin(<ref refid="glad_8h_1a4af680a6c683f88ed67b76f207f2e6e4" kindref="member">s</ref>)<sp/>*<sp/>sin(<ref refid="glad_8h_1a7d65d00ca3b0630d9b5c52df855b19f5" kindref="member">t</ref>),<sp/>radialDistance<sp/>*<sp/>cos(<ref refid="glad_8h_1a7d65d00ca3b0630d9b5c52df855b19f5" kindref="member">t</ref>),<sp/>0.0};</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point_pointer-&gt;<ref refid="class_point_1a9191f97ece64b8385140d5f800a3a4ca" kindref="member">SetPointPosition</ref>(event_time,<sp/>distance_to_move);</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point_pointer-&gt;<ref refid="class_point_1a29aca71cae82195775f3822740df80ec" kindref="member">SetPointPositionMaxOverflow</ref>(event_time,<sp/>{2});</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point_pointer-&gt;<ref refid="class_point_1ab0c0a837abb8bd52a59f82723a31f61f" kindref="member">SetPointPositionMinOverflow</ref>(event_time,<sp/>{2});</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point_pointer-&gt;<ref refid="class_point_1a2cf44d5cf17ecf2b3385bde963678589" kindref="member">SetPointMove</ref>(event_time,<sp/>{1});</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point_pointer-&gt;<ref refid="class_point_1a7c9776ffca2fde856fa8eaee669d9881" kindref="member">SetPointMoveMaxOverflow</ref>(event_time,<sp/>{2});</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point_pointer-&gt;<ref refid="class_point_1a4a988ff988a3984545cf0c35e764c404" kindref="member">SetPointMoveMinOverflow</ref>(event_time,<sp/>{2});</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point_pointer-&gt;<ref refid="class_point_1adb977a2f01e7a2b549e1bd36fa6f5354" kindref="member">SetPointDifferential</ref>(event_time,<sp/>{0});</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>distance_to_move<sp/>=<sp/>distance_to_move<sp/>+<sp/>point_origin;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;d:&quot;<sp/>&lt;&lt;<sp/>distance_to_move<sp/>&lt;&lt;<sp/>&quot;<sp/>r:&quot;<sp/>&lt;&lt;<sp/>radialDistance<sp/>&lt;&lt;<sp/>&quot;<sp/>s:&quot;<sp/>&lt;&lt;<sp/>s<sp/>&lt;&lt;<sp/>&quot;<sp/>t:&quot;<sp/>&lt;&lt;<sp/>t<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/><sp/>current_universe_pointer-&gt;GetPoints(event_time).back().getPointPosition()<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/><sp/>current_universe_pointer-&gt;GetPoints(event_time).size()<sp/>&lt;&lt;<sp/>&quot;<sp/>point<sp/>addresses<sp/>created.&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2198"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//<sp/>Add<sp/>lines<sp/>to<sp/>points</highlight></codeline>
<codeline lineno="2199"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>eloop<sp/>=<sp/>1;<sp/>eloop<sp/>&lt;<sp/>int(<sp/>elementary_particle_list.size());<sp/>eloop++)</highlight></codeline>
<codeline lineno="2200"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2201"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>nloop<sp/>=<sp/>spaDimensionsStart;<sp/>nloop<sp/>&lt;<sp/>spaDimensionsStart<sp/>+<sp/>num_dimensions[2];<sp/>nloop++)</highlight></codeline>
<codeline lineno="2202"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2203"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>status_of_call_request<sp/>=<sp/>AddLine(&amp;<sp/>line_list,<sp/>&amp;<sp/>polygon_list,<sp/>nloop);</highlight></codeline>
<codeline lineno="2204"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if<sp/>(status_of_call_request)</highlight></codeline>
<codeline lineno="2205"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2206"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Line<sp/>addition<sp/>failed!&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2207"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>return<sp/>EXIT_FAILURE;</highlight></codeline>
<codeline lineno="2208"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2209"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if<sp/>(!<sp/>line_list.empty())<sp/><sp/>line_list.back().creation();</highlight></codeline>
<codeline lineno="2210"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if<sp/>(!<sp/>line_list.empty())<sp/><sp/>line_list.back().resetLine();</highlight></codeline>
<codeline lineno="2211"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2212"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2213"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Capacitated<sp/>Clustering<sp/>Problem&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>universe_loop<sp/>=<sp/>0;<sp/>universe_loop<sp/>&lt;<sp/>num_universes;<sp/>universe_loop++)</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>current_universe_pointer<sp/>=<sp/><ref refid="_brain_harmonics_8cc_1a602d3f70549216866d35be56a17fa06e" kindref="member">universe_list</ref>[universe_loop];</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cognitivenetwork_loop<sp/>=<sp/>0;<sp/>cognitivenetwork_loop<sp/>&lt;<sp/>num_cognitive_networks_in_universe[universe_loop];<sp/>cognitivenetwork_loop++)</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>Orbital<sp/>objects<sp/>to<sp/>Cognitive<sp/>Network<sp/>which<sp/>is<sp/>derived<sp/>from<sp/>Universe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>current_cognitivenetwork_pointer<sp/>=<sp/>current_universe_pointer-&gt;GetCognitiveNetwork(event_time,<sp/>cognitivenetwork_loop);</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref>*<sp/>cognitive_pointer<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(current_cognitivenetwork_pointer);</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="glad_8h_1ae84541b4f3d8e1ea24ec0f466a8c568b" kindref="member">std::string</ref><sp/>build_filename<sp/>=<sp/>l_dir;</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>build_filename<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;/ccp&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(universe_loop)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(cognitivenetwork_loop)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.in&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ifstream<sp/>dataFile(build_filename);</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!dataFile)</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Skipped:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>build_filename<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>number<sp/>of<sp/>synapses<sp/>and<sp/>initial<sp/>number<sp/>of<sp/>neurons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Reading:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>build_filename<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="glad_8h_1a36862d7c6208bc30723fd06f2a0f9bfd" kindref="member">entry</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::getline(dataFile,<sp/><ref refid="glad_8h_1a36862d7c6208bc30723fd06f2a0f9bfd" kindref="member">entry</ref>);</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iss.clear();</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iss.str(<ref refid="glad_8h_1a36862d7c6208bc30723fd06f2a0f9bfd" kindref="member">entry</ref>);</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="glad_8h_1ad8a8baf08bc0399738960c9259571911" kindref="member">buf</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Walks<sp/>through<sp/>1<sp/>row<sp/>of<sp/>2<sp/>numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paramCounter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(iss<sp/>&gt;&gt;<sp/><ref refid="glad_8h_1ad8a8baf08bc0399738960c9259571911" kindref="member">buf</ref>)</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="glad_8h_1ad8a8baf08bc0399738960c9259571911" kindref="member">buf</ref><sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/><ref refid="glad_8h_1ad8a8baf08bc0399738960c9259571911" kindref="member">buf</ref><sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>paramCounter<sp/>&lt;<sp/>10)</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paramCounter++;</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::copy(&amp;buf,<sp/>&amp;buf<sp/>+<sp/>1,<sp/>std::back_inserter(l_inputData));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_inputData.push_back(<ref refid="glad_8h_1ad8a8baf08bc0399738960c9259571911" kindref="member">buf</ref>);</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numSynapses<sp/>=<sp/>std::stoi(l_inputData[0],&amp;sz);</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>initial_neurons<sp/>=<sp/>std::stoi(l_inputData[1],&amp;sz);</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//neuron.clear();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>initial<sp/>50<sp/>neurons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2264"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(int<sp/>nloop<sp/>=<sp/>0;<sp/>nloop<sp/>&lt;<sp/>50;<sp/>nloop++)</highlight></codeline>
<codeline lineno="2265"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2266"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status_of_call_request<sp/>=<sp/>CreateNeuron(&amp;<sp/>neuron,<sp/>&amp;<sp/>dimension_list,<sp/><sp/>int(<sp/>dimension_list.size()<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="2267"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(status_of_call_request)</highlight></codeline>
<codeline lineno="2268"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2269"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Neuron<sp/>addition<sp/>failed!&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2270"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>EXIT_FAILURE;</highlight></codeline>
<codeline lineno="2271"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2272"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2273"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_neurons_in_cognitive_network[2]<sp/>=<sp/>(cognitive_pointer-&gt;<ref refid="class_cognitive_network_1af9b2a136584c962e44114a7ee3d2804a" kindref="member">CreateNeurons</ref>(event_time,<sp/>50)).<ref refid="glad_8h_1a3d1e3edfcf61ca2d831883e1afbad89e" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>in<sp/>synapse<sp/>demand<sp/>data<sp/>from<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_inputData.clear();</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nloop<sp/>=<sp/>0;<sp/>nloop<sp/>&lt;<sp/>5;<sp/>nloop++)</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="glad_8h_1a36862d7c6208bc30723fd06f2a0f9bfd" kindref="member">entry</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::getline(dataFile,<sp/><ref refid="glad_8h_1a36862d7c6208bc30723fd06f2a0f9bfd" kindref="member">entry</ref>);</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="glad_8h_1a36862d7c6208bc30723fd06f2a0f9bfd" kindref="member">entry</ref><sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>and<sp/><ref refid="glad_8h_1a36862d7c6208bc30723fd06f2a0f9bfd" kindref="member">entry</ref>.length()<sp/>&gt;<sp/>10)</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iss.clear();</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iss.str(<ref refid="glad_8h_1a36862d7c6208bc30723fd06f2a0f9bfd" kindref="member">entry</ref>);</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="glad_8h_1ad8a8baf08bc0399738960c9259571911" kindref="member">buf</ref>=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Walks<sp/>through<sp/>5<sp/>rows<sp/>of<sp/>10<sp/>numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paramCounter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(iss<sp/>&gt;&gt;<sp/><ref refid="glad_8h_1ad8a8baf08bc0399738960c9259571911" kindref="member">buf</ref>)</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="glad_8h_1ad8a8baf08bc0399738960c9259571911" kindref="member">buf</ref><sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/><ref refid="glad_8h_1ad8a8baf08bc0399738960c9259571911" kindref="member">buf</ref><sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>paramCounter<sp/>&lt;<sp/>10)</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paramCounter++;</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::copy(&amp;buf,<sp/>&amp;buf<sp/>+<sp/>1,<sp/>std::back_inserter(l_inputData));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_inputData.push_back(<ref refid="glad_8h_1ad8a8baf08bc0399738960c9259571911" kindref="member">buf</ref>);</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nloop--;</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2308"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>synapse.clear();</highlight></codeline>
<codeline lineno="2309"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(int<sp/>nloop<sp/>=<sp/>0;<sp/>nloop<sp/>&lt;<sp/>50;<sp/>nloop++)</highlight></codeline>
<codeline lineno="2310"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2311"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Add<sp/>synapse<sp/>demands</highlight></codeline>
<codeline lineno="2312"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status_of_call_request<sp/>=<sp/>AddSynapse(&amp;<sp/>synapse,<sp/>&amp;<sp/>neuron,<sp/><sp/>int(<sp/>neuron.size()<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="2313"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(status_of_call_request)</highlight></codeline>
<codeline lineno="2314"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2315"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Synapse<sp/>addition<sp/>failed!&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2316"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>EXIT_FAILURE;</highlight></codeline>
<codeline lineno="2317"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2318"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!<sp/>synapse.empty()<sp/>&amp;&amp;<sp/>!l_inputData[nloop].empty())</highlight></codeline>
<codeline lineno="2319"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2320"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>synapse.back()-&gt;SetDemand(std::stoi(l_inputData[nloop],&amp;sz));</highlight></codeline>
<codeline lineno="2321"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Synapse:<sp/>&quot;<sp/>&lt;&lt;<sp/>nloop<sp/>&lt;&lt;<sp/>&quot;<sp/>Demand:<sp/>&quot;<sp/>&lt;&lt;<sp/><sp/>synapse.back().getDemand()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2322"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2323"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2324"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_synapses_in_cognitive_network[1]<sp/>=<sp/>(cognitive_pointer-&gt;<ref refid="class_cognitive_network_1ae6ae16f401e7699032ac9459132763c0" kindref="member">CreateSynapses</ref>(event_time,<sp/>50)).<ref refid="glad_8h_1a3d1e3edfcf61ca2d831883e1afbad89e" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Load<sp/>capacity<sp/>data<sp/>to<sp/>each<sp/>neuron</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_inputData.clear();</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nloop<sp/>=<sp/>0;<sp/>nloop<sp/>&lt;<sp/>5;<sp/>nloop++)</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="glad_8h_1a36862d7c6208bc30723fd06f2a0f9bfd" kindref="member">entry</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::getline(dataFile,<sp/><ref refid="glad_8h_1a36862d7c6208bc30723fd06f2a0f9bfd" kindref="member">entry</ref>);</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="glad_8h_1a36862d7c6208bc30723fd06f2a0f9bfd" kindref="member">entry</ref><sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>and<sp/><ref refid="glad_8h_1a36862d7c6208bc30723fd06f2a0f9bfd" kindref="member">entry</ref>.length()<sp/>&gt;<sp/>10)</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iss.clear();</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iss.str(<ref refid="glad_8h_1a36862d7c6208bc30723fd06f2a0f9bfd" kindref="member">entry</ref>);</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="glad_8h_1ad8a8baf08bc0399738960c9259571911" kindref="member">buf</ref>=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Walks<sp/>through<sp/>5<sp/>rows<sp/>of<sp/>10<sp/>numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paramCounter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(iss<sp/>&gt;&gt;<sp/><ref refid="glad_8h_1ad8a8baf08bc0399738960c9259571911" kindref="member">buf</ref>)</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="glad_8h_1ad8a8baf08bc0399738960c9259571911" kindref="member">buf</ref><sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/><ref refid="glad_8h_1ad8a8baf08bc0399738960c9259571911" kindref="member">buf</ref><sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>paramCounter<sp/>&lt;<sp/>10)</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paramCounter++;</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::copy(&amp;buf,<sp/>&amp;buf<sp/>+<sp/>1,<sp/>std::back_inserter(l_inputData));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_inputData.push_back(<ref refid="glad_8h_1ad8a8baf08bc0399738960c9259571911" kindref="member">buf</ref>);</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nloop--;</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nloop<sp/>=<sp/>0;<sp/>nloop<sp/>&lt;<sp/>(cognitive_pointer-&gt;<ref refid="class_cognitive_network_1a0e9e37e976a7ca5ee625e2d7b36fd7ea" kindref="member">GetNeurons</ref>(event_time)).<ref refid="glad_8h_1a3d1e3edfcf61ca2d831883e1afbad89e" kindref="member">size</ref>();<sp/>nloop++)</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>current_neuron_pointer<sp/>=<sp/>cognitive_pointer-&gt;<ref refid="class_cognitive_network_1ac12f0af92d878d45dca7303dc065c383" kindref="member">GetNeuron</ref>(event_time,<sp/>nloop);</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_neuron" kindref="compound">Neuron</ref>*<sp/>neuron_pointer<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="class_neuron" kindref="compound">Neuron</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(current_neuron_pointer);</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(neuron_pointer<sp/>&amp;&amp;<sp/>!l_inputData[nloop].empty())<sp/>neuron_pointer-&gt;<ref refid="class_neuron_1a8f5766ea61dc46b7a25361df540755ec" kindref="member">SetCapacity</ref>(event_time,<sp/>std::stoi(l_inputData[nloop],&amp;sz));</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Load<sp/>distance<sp/>data<sp/>from<sp/>50<sp/>synapses<sp/>to<sp/>each<sp/>neuron</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_inputData.clear();</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xloop<sp/>=<sp/>0;<sp/>xloop<sp/>&lt;<sp/>50;<sp/>xloop++)</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nloop<sp/>=<sp/>0;<sp/>nloop<sp/>&lt;<sp/>5;<sp/>nloop++)</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="glad_8h_1a36862d7c6208bc30723fd06f2a0f9bfd" kindref="member">entry</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::getline(dataFile,<sp/><ref refid="glad_8h_1a36862d7c6208bc30723fd06f2a0f9bfd" kindref="member">entry</ref>);</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="glad_8h_1a36862d7c6208bc30723fd06f2a0f9bfd" kindref="member">entry</ref><sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>and<sp/><ref refid="glad_8h_1a36862d7c6208bc30723fd06f2a0f9bfd" kindref="member">entry</ref>.length()<sp/>&gt;<sp/>10)</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iss.clear();</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iss.str(<ref refid="glad_8h_1a36862d7c6208bc30723fd06f2a0f9bfd" kindref="member">entry</ref>);</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="glad_8h_1ad8a8baf08bc0399738960c9259571911" kindref="member">buf</ref>=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Walks<sp/>through<sp/>5<sp/>rows<sp/>of<sp/>10<sp/>numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paramCounter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(iss<sp/>&gt;&gt;<sp/><ref refid="glad_8h_1ad8a8baf08bc0399738960c9259571911" kindref="member">buf</ref>)</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="glad_8h_1ad8a8baf08bc0399738960c9259571911" kindref="member">buf</ref><sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/><ref refid="glad_8h_1ad8a8baf08bc0399738960c9259571911" kindref="member">buf</ref><sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>paramCounter<sp/>&lt;<sp/>10)</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>buf<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paramCounter++;</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::copy(&amp;buf,<sp/>&amp;buf<sp/>+<sp/>1,<sp/>std::back_inserter(l_inputData));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_inputData.push_back(<ref refid="glad_8h_1ad8a8baf08bc0399738960c9259571911" kindref="member">buf</ref>);</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nloop--;</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Close<sp/>data<sp/>file<sp/>-<sp/>all<sp/>data<sp/>read<sp/>in.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iss.clear();</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataFile.close();</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Transfer<sp/>distance<sp/>data<sp/>to<sp/>synapse<sp/>instances</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xloop<sp/>=<sp/>0;<sp/>xloop<sp/>&lt;<sp/>50;<sp/>xloop++)</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nloop<sp/>=<sp/>0;<sp/>nloop<sp/>&lt;<sp/>(cognitive_pointer-&gt;<ref refid="class_cognitive_network_1aa3376f2e7aed9639c2b5ba27aa6fb314" kindref="member">GetSynapses</ref>(event_time).size());<sp/>nloop++)</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>current_synapse_pointer<sp/>=<sp/>cognitive_pointer-&gt;<ref refid="class_cognitive_network_1a1944aaa13667bc267e6ef44892da969d" kindref="member">GetSynapse</ref>(event_time,<sp/>nloop);</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>l_inputData[(xloop<sp/>*<sp/>50)<sp/>+<sp/>nloop]<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current_synapse_pointer<sp/>&amp;&amp;<sp/>!l_inputData[(xloop<sp/>*<sp/>50)<sp/>+<sp/>nloop].empty())</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_synapse_pointer-&gt;AddDistance(&amp;<sp/>neuron[nloop],<sp/>std::stod(l_inputData[(xloop<sp/>*<sp/>50)<sp/>+<sp/>nloop],&amp;sz));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2423"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(int<sp/>nloop<sp/>=<sp/>0;<sp/>nloop<sp/>&lt;<sp/>50;<sp/>nloop++)</highlight></codeline>
<codeline lineno="2424"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2425"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>synapse[nloop].GetNeuronList(event_time);</highlight></codeline>
<codeline lineno="2426"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2427"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>how_many_Synapses<sp/>=<sp/>int((cognitive_pointer-&gt;<ref refid="class_cognitive_network_1aa3376f2e7aed9639c2b5ba27aa6fb314" kindref="member">GetSynapses</ref>(event_time)).<ref refid="glad_8h_1a3d1e3edfcf61ca2d831883e1afbad89e" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>how_many_Synapses<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>synapses<sp/>to<sp/>consider.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Rearrange<sp/>new<sp/>Synapses<sp/>in<sp/>an<sp/>order<sp/>closer<sp/>to<sp/>how<sp/>they&apos;re<sp/>likely<sp/>to<sp/>group<sp/>with<sp/>neurons.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2436"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>qloop<sp/>=<sp/>0;<sp/>qloop<sp/>&lt;=<sp/>initial_synapse_alignment<sp/>*<sp/>how_many_Synapses;<sp/>qloop++)</highlight></codeline>
<codeline lineno="2437"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2438"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2439"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter_Walk<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2440"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_Distance<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2441"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter_infinite_loop_prevention<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2442"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2443"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do<sp/>{</highlight></codeline>
<codeline lineno="2444"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter_infinite_loop_prevention++;</highlight></codeline>
<codeline lineno="2445"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_Distance<sp/>=<sp/>current_Distance;</highlight></codeline>
<codeline lineno="2446"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_Distance<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2447"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while(counter_Walk<sp/>&lt;=<sp/>(how_many_Synapses<sp/>-<sp/>3))</highlight></codeline>
<codeline lineno="2448"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2449"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_switch<sp/>=<sp/>compare_swapSynapse(&amp;<sp/>synapse,<sp/>counter_Walk,<sp/>counter_Walk<sp/>+<sp/>1,<sp/>counter_Walk<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="2450"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(l_switch)<sp/>counter_Walk--;<sp/>else<sp/>counter_Walk++;//<sp/>If<sp/>Switch<sp/>occurred<sp/>retest<sp/>previous<sp/>Origin</highlight></codeline>
<codeline lineno="2451"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(counter_Walk<sp/>&lt;<sp/>0)<sp/>counter_Walk<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2452"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2453"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_origin<sp/>=<sp/><sp/>synapse[counter_Walk].GetDemand(event_time);</highlight></codeline>
<codeline lineno="2454"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_origin_Test1<sp/>=<sp/><sp/>synapse[counter_Walk<sp/>+<sp/>1].GetDemand(event_time);</highlight></codeline>
<codeline lineno="2455"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_origin_Test3<sp/>=<sp/>l_origin_Test1<sp/>-<sp/>l_origin;</highlight></codeline>
<codeline lineno="2456"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_origin_Test5<sp/>=<sp/>l_origin_Test3<sp/>*<sp/>l_origin_Test3;</highlight></codeline>
<codeline lineno="2457"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_Distance<sp/>=<sp/>current_Distance<sp/>+<sp/>l_origin_Test5;</highlight></codeline>
<codeline lineno="2458"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2459"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(<sp/>current_Distance<sp/>&lt;<sp/>max_Distance<sp/>&amp;&amp;<sp/>counter_infinite_loop_prevention<sp/>&lt;<sp/>infinite_loop_prevention_threshold);</highlight></codeline>
<codeline lineno="2460"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2461"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2462"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter_Walk<sp/>=<sp/>(how_many_Synapses<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="2463"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_Distance<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2464"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter_infinite_loop_prevention<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2465"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2466"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do<sp/>{</highlight></codeline>
<codeline lineno="2467"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter_infinite_loop_prevention++;</highlight></codeline>
<codeline lineno="2468"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_Distance<sp/>=<sp/>current_Distance;</highlight></codeline>
<codeline lineno="2469"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_Distance<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2470"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while(counter_Walk<sp/>&gt;=<sp/>2)</highlight></codeline>
<codeline lineno="2471"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2472"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_switch<sp/>=<sp/>compare_swapSynapse(&amp;<sp/>synapse,<sp/>counter_Walk,<sp/>counter_Walk<sp/>-<sp/>1,<sp/>counter_Walk<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="2473"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(l_switch)<sp/>counter_Walk++;<sp/>else<sp/>counter_Walk--;</highlight></codeline>
<codeline lineno="2474"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(counter_Walk<sp/>&gt;<sp/>(how_many_Synapses<sp/>-<sp/>1))<sp/>counter_Walk<sp/>=<sp/>(how_many_Synapses<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="2475"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2476"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_origin<sp/>=<sp/><sp/>synapse[counter_Walk].GetDemand(event_time);</highlight></codeline>
<codeline lineno="2477"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_origin_Test1<sp/>=<sp/><sp/>synapse[counter_Walk<sp/>-<sp/>1].GetDemand(event_time);</highlight></codeline>
<codeline lineno="2478"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_origin_Test3<sp/>=<sp/>l_origin_Test1<sp/>-<sp/>l_origin;</highlight></codeline>
<codeline lineno="2479"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_origin_Test5<sp/>=<sp/>l_origin_Test3<sp/>*<sp/>l_origin_Test3;</highlight></codeline>
<codeline lineno="2480"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_Distance<sp/>=<sp/>current_Distance<sp/>+<sp/>l_origin_Test5;</highlight></codeline>
<codeline lineno="2481"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2482"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(<sp/>current_Distance<sp/>&lt;<sp/>max_Distance<sp/>&amp;&amp;<sp/>counter_infinite_loop_prevention<sp/>&lt;<sp/>infinite_loop_prevention_threshold);</highlight></codeline>
<codeline lineno="2483"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2484"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxCapacity<sp/>=<sp/>120;</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currentCapacity<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nloop<sp/>=<sp/>0;<sp/>nloop<sp/>&lt;<sp/>(cognitive_pointer-&gt;<ref refid="class_cognitive_network_1aa3376f2e7aed9639c2b5ba27aa6fb314" kindref="member">GetSynapses</ref>(event_time).size());<sp/>nloop++)</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>current_synapse_pointer<sp/>=<sp/>cognitive_pointer-&gt;<ref refid="class_cognitive_network_1a1944aaa13667bc267e6ef44892da969d" kindref="member">GetSynapse</ref>(event_time,<sp/>nloop);</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_synapse" kindref="compound">Synapse</ref>*<sp/>synapse_pointer<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="class_synapse" kindref="compound">Synapse</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(current_synapse_pointer);</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(currentCapacity<sp/>+<sp/><sp/>synapse_pointer-&gt;<ref refid="class_synapse_1a6d4d63e445961c62f71eaf0da1c2848b" kindref="member">GetDemand</ref>(event_time)<sp/>&lt;=<sp/>maxCapacity)</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentCapacity<sp/>+=<sp/><sp/>synapse_pointer-&gt;<ref refid="class_synapse_1a6d4d63e445961c62f71eaf0da1c2848b" kindref="member">GetDemand</ref>(event_time);</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>orbital.clear();</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pollCapture<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Orbital<sp/>function<sp/>for<sp/>interaction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2505"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>zloop<sp/>=<sp/>0;<sp/>zloop<sp/>&lt;<sp/>num_orbitals_in_cognitive_network[current_cognitive_network];<sp/>zloop++)</highlight></codeline>
<codeline lineno="2506"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2507"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>nloop<sp/>=<sp/>orbDimensionsStart;<sp/>nloop<sp/>&lt;<sp/>orbDimensionsStart<sp/>+<sp/>num_dimensions[9];<sp/>nloop++)</highlight></codeline>
<codeline lineno="2508"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2509"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status_of_call_request<sp/>=<sp/>AddOrbital(&amp;<sp/>orbital,<sp/>&amp;<sp/>dimension_list,<sp/>nloop,<sp/>0);</highlight></codeline>
<codeline lineno="2510"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(status_of_call_request)</highlight></codeline>
<codeline lineno="2511"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2512"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Orbital<sp/>addition<sp/>failed!&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2513"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>EXIT_FAILURE;</highlight></codeline>
<codeline lineno="2514"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2515"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!<sp/>orbital.empty())<sp/><sp/>orbital.back()-&gt;SetPhase(TWORAD<sp/>/<sp/>zloop);</highlight></codeline>
<codeline lineno="2516"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2517"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2518"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_pointStart<sp/>=<sp/>int(l_spaPointBase);</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_ccpPointStart<sp/>=<sp/>int(<sp/>current_universe_pointer-&gt;GetPoints(event_time).size());</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2523"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>50<sp/>synapses<sp/>and<sp/>50<sp/>possible<sp/>neurons</highlight></codeline>
<codeline lineno="2524"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(int<sp/>xloop<sp/>=<sp/>0;<sp/>xloop<sp/>&lt;<sp/>100;<sp/>xloop++)</highlight></codeline>
<codeline lineno="2525"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2526"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>nloop<sp/>=<sp/>ccpDimensionsStart;<sp/>nloop<sp/>&lt;<sp/>ccpDimensionsStart<sp/>+<sp/>num_dimensions[3];<sp/>nloop++)</highlight></codeline>
<codeline lineno="2527"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2528"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Dimension<sp/>Loop:<sp/>&quot;<sp/>&lt;&lt;<sp/>nloop<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;;</highlight></codeline>
<codeline lineno="2529"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status_of_call_request<sp/>=<sp/>AddPoint(&amp;<sp/>current_universe_pointer-&gt;GetPoints(event_time),<sp/>&amp;<sp/>dimension_list,<sp/>nloop);</highlight></codeline>
<codeline lineno="2530"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(status_of_call_request)</highlight></codeline>
<codeline lineno="2531"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2532"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Point<sp/>addition<sp/>failed!&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2533"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>EXIT_FAILURE;</highlight></codeline>
<codeline lineno="2534"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2535"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!<sp/>current_universe_pointer-&gt;GetPoints(event_time).empty())<sp/><sp/>current_universe_pointer-&gt;GetPoints(event_time).back()-&gt;resetPoint();<sp/><sp/>//<sp/>Initialise<sp/>first<sp/>point<sp/>to<sp/>location<sp/>zero.</highlight></codeline>
<codeline lineno="2536"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Synapse<sp/>points<sp/>first</highlight></codeline>
<codeline lineno="2537"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(xloop<sp/>&lt;<sp/>50)</highlight></codeline>
<codeline lineno="2538"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2539"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!<sp/>current_universe_pointer-&gt;GetPoints(event_time).empty())<sp/><sp/>current_universe_pointer-&gt;GetPoints(event_time).back()-&gt;SetPointPosition(rand()<sp/>%<sp/>2<sp/>-<sp/>1.0);<sp/><sp/>//<sp/>Initialise<sp/>to<sp/>ne<sp/>coordinate.</highlight></codeline>
<codeline lineno="2540"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!<sp/>current_universe_pointer-&gt;GetPoints(event_time).empty())<sp/><sp/>current_universe_pointer-&gt;GetPoints(event_time).back()-&gt;SetPointPositionMin(-1.0);<sp/><sp/>//<sp/>Initialise<sp/>to<sp/>ne<sp/>coordinate.</highlight></codeline>
<codeline lineno="2541"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!<sp/>current_universe_pointer-&gt;GetPoints(event_time).empty())<sp/><sp/>current_universe_pointer-&gt;GetPoints(event_time).back()-&gt;SetPointPositionMinOverflow(2.0);<sp/><sp/>//<sp/>Initialise<sp/>to<sp/>ne<sp/>coordinate.</highlight></codeline>
<codeline lineno="2542"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!<sp/>current_universe_pointer-&gt;GetPoints(event_time).empty())<sp/><sp/>current_universe_pointer-&gt;GetPoints(event_time).back()-&gt;SetPointPositionMax(1.0);<sp/><sp/>//<sp/>Initialise<sp/>to<sp/>ne<sp/>coordinate.</highlight></codeline>
<codeline lineno="2543"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!<sp/>current_universe_pointer-&gt;GetPoints(event_time).empty())<sp/><sp/>current_universe_pointer-&gt;GetPoints(event_time).back()-&gt;SetPointPositionMaxOverflow(2.0);<sp/><sp/>//<sp/>Initialise<sp/>to<sp/>ne<sp/>coordinate.</highlight></codeline>
<codeline lineno="2544"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2545"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="2546"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2547"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Neuron<sp/>points<sp/>second</highlight></codeline>
<codeline lineno="2548"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!<sp/>current_universe_pointer-&gt;GetPoints(event_time).empty())<sp/><sp/>current_universe_pointer-&gt;GetPoints(event_time).back()-&gt;SetPointPosition(rand()<sp/>%<sp/>2<sp/>-<sp/>1.0);<sp/><sp/>//<sp/>Initialise<sp/>to<sp/>ne<sp/>coordinate.</highlight></codeline>
<codeline lineno="2549"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!<sp/>current_universe_pointer-&gt;GetPoints(event_time).empty())<sp/><sp/>current_universe_pointer-&gt;GetPoints(event_time).back()-&gt;SetPointPositionMin(-1.0);<sp/><sp/>//<sp/>Initialise<sp/>to<sp/>ne<sp/>coordinate.</highlight></codeline>
<codeline lineno="2550"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!<sp/>current_universe_pointer-&gt;GetPoints(event_time).empty())<sp/><sp/>current_universe_pointer-&gt;GetPoints(event_time).back()-&gt;SetPointPositionMinOverflow(2.0);<sp/><sp/>//<sp/>Initialise<sp/>to<sp/>ne<sp/>coordinate.</highlight></codeline>
<codeline lineno="2551"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!<sp/>current_universe_pointer-&gt;GetPoints(event_time).empty())<sp/><sp/>current_universe_pointer-&gt;GetPoints(event_time).back()-&gt;SetPointPositionMax(1.0);<sp/><sp/>//<sp/>Initialise<sp/>to<sp/>ne<sp/>coordinate.</highlight></codeline>
<codeline lineno="2552"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!<sp/>current_universe_pointer-&gt;GetPoints(event_time).empty())<sp/><sp/>current_universe_pointer-&gt;GetPoints(event_time).back()-&gt;SetPointPositionMaxOverflow(2.0);<sp/><sp/>//<sp/>Initialise<sp/>to<sp/>ne<sp/>coordinate.</highlight></codeline>
<codeline lineno="2553"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2554"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2555"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2556"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l_ccpPointEnd<sp/>=<sp/>int(<sp/>current_universe_pointer-&gt;GetPoints(event_time).size());</highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>End<sp/>of<sp/>CCP<sp/>draw<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>of<sp/>Spike<sp/>draw<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l_spkPointStart<sp/>=<sp/>int(<sp/>current_universe_pointer-&gt;GetPoints(event_time).size());</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>initial_spikes<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l_spkPointEnd<sp/>=<sp/>int(<sp/>current_universe_pointer-&gt;GetPoints(event_time).size());</highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>End<sp/>of<sp/>CCP<sp/>draw<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>of<sp/>Orbital<sp/>draw<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l_orbPointStart<sp/>=<sp/>int(<sp/>current_universe_pointer-&gt;GetPoints(event_time).size());</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2575"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(int<sp/>qloop<sp/>=<sp/>0;<sp/>qloop<sp/>&lt;<sp/>num_orbitals_in_cognitive_network[current_cognitive_network][0];<sp/>qloop++)</highlight></codeline>
<codeline lineno="2576"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2577"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>nloop<sp/>=<sp/>orbDimensionsStart;<sp/>nloop<sp/>&lt;<sp/>orbDimensionsStart<sp/>+<sp/>num_dimensions_in_universe[9];<sp/>nloop++)</highlight></codeline>
<codeline lineno="2578"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2579"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dimension_list[nloop]-&gt;SetOffset(0);</highlight></codeline>
<codeline lineno="2580"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dimension_list[nloop]-&gt;SetScale(100);</highlight></codeline>
<codeline lineno="2581"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status_of_call_request<sp/>=<sp/>AddPoint(&amp;<sp/>current_universe_pointer-&gt;GetPoints(event_time),<sp/>&amp;<sp/>dimension_list,<sp/>nloop);</highlight></codeline>
<codeline lineno="2582"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(status_of_call_request)</highlight></codeline>
<codeline lineno="2583"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2584"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Point<sp/>addition<sp/>failed!&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2585"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>EXIT_FAILURE;</highlight></codeline>
<codeline lineno="2586"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2587"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!<sp/>current_universe_pointer-&gt;GetPoints(event_time).empty())<sp/><sp/>current_universe_pointer-&gt;GetPoints(event_time).back()-&gt;SetPointPosition(qloop);</highlight></codeline>
<codeline lineno="2588"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2589"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2590"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l_orbPointEnd<sp/>=<sp/>int(<sp/>current_universe_pointer-&gt;GetPoints(event_time).size());</highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>End<sp/>of<sp/>Orbital<sp/>Points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l_pointEnd<sp/>=<sp/>int(<sp/>current_universe_pointer-&gt;GetPoints(event_time).size());</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Configure<sp/>Dynap-se,<sp/>if<sp/>attached<sp/>to<sp/>reflect<sp/>simulation<sp/>configuration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(device_attached)</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Let&apos;s<sp/>take<sp/>a<sp/>look<sp/>at<sp/>the<sp/>information<sp/>we<sp/>have<sp/>on<sp/>the<sp/>device.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1af414029bac33d3b71ad5622dc83149d6" kindref="member">dynapse_info</ref><sp/>=<sp/>caerDynapseInfoGet(usb_handle);</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s<sp/>---<sp/>ID:<sp/>%d,<sp/>Master:<sp/>%d,<sp/><sp/>Logic:<sp/>%d.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1af414029bac33d3b71ad5622dc83149d6" kindref="member">dynapse_info</ref>.deviceString,<sp/><ref refid="_brain_harmonics_8cc_1af414029bac33d3b71ad5622dc83149d6" kindref="member">dynapse_info</ref>.deviceID,</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1af414029bac33d3b71ad5622dc83149d6" kindref="member">dynapse_info</ref>.deviceIsMaster,<sp/><ref refid="_brain_harmonics_8cc_1af414029bac33d3b71ad5622dc83149d6" kindref="member">dynapse_info</ref>.logicVersion);</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>caerDeviceConfigSet(usb_handle,<sp/>CAER_HOST_CONFIG_DATAEXCHANGE,<sp/>CAER_HOST_CONFIG_DATAEXCHANGE_BLOCKING,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>caerDeviceConfigSet(usb_handle,<sp/>DYNAPSE_CONFIG_CHIP,<sp/>DYNAPSE_CONFIG_CHIP_RUN,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>caerDeviceConfigSet(usb_handle,<sp/>DYNAPSE_CONFIG_AER,<sp/>DYNAPSE_CONFIG_AER_RUN,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>caerDeviceConfigSet(usb_handle,<sp/>DYNAPSE_CONFIG_CHIP,<sp/>DYNAPSE_CONFIG_CHIP_ID,<sp/>DYNAPSE_CONFIG_DYNAPSE_U2);</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>force<sp/>chip<sp/>to<sp/>be<sp/>enable<sp/>even<sp/>if<sp/>aer<sp/>is<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>caerDeviceConfigSet(usb_handle,<sp/>DYNAPSE_CONFIG_MUX,<sp/>DYNAPSE_CONFIG_MUX_FORCE_CHIP_BIAS_ENABLE,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Configuring<sp/>low<sp/>power<sp/>biases...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ifstream<sp/>inputbiases(<sp/><ref refid="_brain_harmonics_8cc_1a0146dd22f0f9d4398188379a2bcb8d32" kindref="member">LOWPOWERBIASES</ref>);</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="glad_8h_1ae84541b4f3d8e1ea24ec0f466a8c568b" kindref="member">std::string</ref><sp/>line;<sp/>std::getline(inputbiases,<sp/>line);)<sp/>{</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i_dec<sp/>=<sp/>atoi(line.c_str());</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>caerDeviceConfigSet(usb_handle,<sp/>DYNAPSE_CONFIG_CHIP,</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DYNAPSE_CONFIG_CHIP_CONTENT,<sp/>i_dec);</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputbiases.close();</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>Done.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>caerDeviceConfigSet(usb_handle,<sp/>DYNAPSE_CONFIG_CHIP,<sp/>DYNAPSE_CONFIG_CHIP_ID,<sp/>DYNAPSE_CONFIG_DYNAPSE_U2);</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sramId<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>coreId<sp/>=<sp/>0;<sp/>coreId<sp/>&lt;<sp/>DYNAPSE_CONFIG_NUMCORES;<sp/>coreId++)</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destinationCoreId<sp/>=<sp/>2^coreId;</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>caerDeviceConfigSet(usb_handle,<sp/>DYNAPSE_CONFIG_MONITOR_NEU,<sp/>coreId,<sp/>0);<sp/></highlight><highlight class="comment">//<sp/>core<sp/>0-3<sp/>neu<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>neuronId<sp/>=<sp/>0;<sp/>neuronId<sp/>&lt;<sp/>DYNAPSE_CONFIG_NUMNEURONS_CORE;<sp/>neuronId++)</highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(((1<sp/>+<sp/>neuronId)<sp/>*<sp/>((neuronId<sp/>%<sp/>3)<sp/>&gt;<sp/>0))<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>((1<sp/>+<sp/>neuronId)<sp/>*<sp/>((neuronId<sp/>%<sp/>3)<sp/>&gt;<sp/>0))<sp/>&lt;<sp/>DYNAPSE_CONFIG_NUMNEURONS_CORE)</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>genBits<sp/>=<sp/>neuronId<sp/>&lt;&lt;<sp/>7<sp/>|<sp/>sramId<sp/>&lt;&lt;<sp/>5<sp/>|<sp/>coreId<sp/>&lt;&lt;<sp/>15<sp/>|<sp/>1<sp/>&lt;&lt;<sp/>17<sp/>|<sp/>1<sp/>&lt;&lt;<sp/>4<sp/>|<sp/>destinationCoreId<sp/>&lt;&lt;<sp/>18<sp/>|<sp/>dynap_Sy<sp/>&lt;&lt;<sp/>27<sp/>|<sp/>dynap_Dy<sp/>&lt;&lt;<sp/>25<sp/>|<sp/>dynap_Dx<sp/>&lt;&lt;<sp/>22<sp/>|<sp/>dynap_Sx<sp/>&lt;&lt;<sp/>24<sp/>|<sp/>coreId<sp/>&lt;&lt;<sp/>28;</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>caerDeviceConfigSet(usb_handle,<sp/>DYNAPSE_CONFIG_CHIP,<sp/>DYNAPSE_CONFIG_CHIP_CONTENT,<sp/>genBits);</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle,<sp/>PreNeuron[0,1023],<sp/>PostNeuron[0,1023],<sp/>Cam[0,63],<sp/>Type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//caerDynapseWriteCam(usb_handle,<sp/>neuronId,<sp/>((1<sp/>+<sp/>neuronId)<sp/>*<sp/>((neuronId<sp/>%<sp/>3)<sp/>&gt;<sp/>0)),<sp/>0,<sp/>DYNAPSE_CONFIG_CAMTYPE_F_EXC);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(neuronId<sp/>&gt;<sp/>2<sp/>&amp;&amp;<sp/>(((neuronId<sp/>-<sp/>2)<sp/>*<sp/>(((1<sp/>+<sp/>neuronId)<sp/>*<sp/>((neuronId<sp/>%<sp/>3)<sp/>&gt;<sp/>0)<sp/>==<sp/>0))<sp/>+<sp/>(1<sp/>*<sp/>((neuronId<sp/>%<sp/>3)<sp/>==<sp/>0))))<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>(((neuronId<sp/>-<sp/>2)<sp/>*<sp/>(((1<sp/>+<sp/>neuronId)<sp/>*<sp/>((neuronId<sp/>%<sp/>3)<sp/>&gt;<sp/>0)<sp/>==<sp/>0))<sp/>+<sp/>(1<sp/>*<sp/>((neuronId<sp/>%<sp/>3)<sp/>==<sp/>0))))<sp/>&lt;<sp/>DYNAPSE_CONFIG_NUMNEURONS_CORE)</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>genBits<sp/>=<sp/>neuronId<sp/>&lt;&lt;<sp/>7<sp/>|<sp/>sramId<sp/>&lt;&lt;<sp/>5<sp/>|<sp/>coreId<sp/>&lt;&lt;<sp/>15<sp/>|<sp/>1<sp/>&lt;&lt;<sp/>17<sp/>|<sp/>1<sp/>&lt;&lt;<sp/>4<sp/>|<sp/>destinationCoreId<sp/>&lt;&lt;<sp/>18<sp/>|<sp/>dynap_Sy<sp/>&lt;&lt;<sp/>27<sp/>|<sp/>dynap_Dy<sp/>&lt;&lt;<sp/>25<sp/>|<sp/>dynap_Dx<sp/>&lt;&lt;<sp/>22<sp/>|<sp/>dynap_Sx<sp/>&lt;&lt;<sp/>24<sp/>|<sp/>coreId<sp/>&lt;&lt;<sp/>28;</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>caerDeviceConfigSet(usb_handle,<sp/>DYNAPSE_CONFIG_CHIP,<sp/>DYNAPSE_CONFIG_CHIP_CONTENT,<sp/>genBits);</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle,<sp/>PreNeuron[0,1023],<sp/>PostNeuron[0,1023],<sp/>Cam[0,63],<sp/>Type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//caerDynapseWriteCam(usb_handle,<sp/>neuronId,<sp/>(((neuronId<sp/>-<sp/>2)<sp/>*<sp/>(((1<sp/>+<sp/>neuronId)<sp/>*<sp/>((neuronId<sp/>%<sp/>3)<sp/>&gt;<sp/>0)<sp/>==<sp/>0))<sp/>+<sp/>(1<sp/>*<sp/>((neuronId<sp/>%<sp/>3)<sp/>==<sp/>0)))),<sp/>1,<sp/>DYNAPSE_CONFIG_CAMTYPE_F_EXC);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>innerLoop<sp/>=<sp/>2;<sp/>innerLoop<sp/>&lt;<sp/>7;<sp/>innerLoop++)</highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(((int(neuronId<sp/>/<sp/>(2^(neuronId<sp/>+<sp/>1)))<sp/>+<sp/>8)<sp/>*<sp/>((neuronId<sp/>%<sp/>3)<sp/>==<sp/>0))<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>((int(neuronId<sp/>/<sp/>(2^(innerLoop<sp/>+<sp/>1)))<sp/>+<sp/>8)<sp/>*<sp/>((neuronId<sp/>%<sp/>3)<sp/>==<sp/>0))<sp/>&lt;<sp/>DYNAPSE_CONFIG_NUMNEURONS_CORE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>genBits<sp/>=<sp/>neuronId<sp/>&lt;&lt;<sp/>7<sp/>|<sp/>sramId<sp/>&lt;&lt;<sp/>5<sp/>|<sp/>coreId<sp/>&lt;&lt;<sp/>15<sp/>|<sp/>1<sp/>&lt;&lt;<sp/>17<sp/>|<sp/>1<sp/>&lt;&lt;<sp/>4<sp/>|<sp/>destinationCoreId<sp/>&lt;&lt;<sp/>18<sp/>|<sp/>dynap_Sy<sp/>&lt;&lt;<sp/>27<sp/>|<sp/>dynap_Dy<sp/>&lt;&lt;<sp/>25<sp/>|<sp/>dynap_Dx<sp/>&lt;&lt;<sp/>22<sp/>|<sp/>dynap_Sx<sp/>&lt;&lt;<sp/>24<sp/>|<sp/>coreId<sp/>&lt;&lt;<sp/>28;</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>caerDeviceConfigSet(usb_handle,<sp/>DYNAPSE_CONFIG_CHIP,<sp/>DYNAPSE_CONFIG_CHIP_CONTENT,<sp/>genBits);</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//caerDynapseWriteCam(usb_handle,<sp/>neuronId,<sp/>((int(neuronId<sp/>/<sp/>(2^(neuronId<sp/>+<sp/>1)))<sp/>+<sp/>8)<sp/>*<sp/>((neuronId<sp/>%<sp/>3)<sp/>==<sp/>0)),<sp/>innerLoop,<sp/>DYNAPSE_CONFIG_CAMTYPE_F_EXC);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>let&apos;s<sp/>start<sp/>getting<sp/>some<sp/>data<sp/>from<sp/>the<sp/>device.<sp/>We<sp/>just<sp/>loop,<sp/>no<sp/>notification<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(device_attached)</highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>caerDeviceDataStart(usb_handle,<sp/>NULL,<sp/>NULL,<sp/>NULL,<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Start<sp/>connected<sp/>devices...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>add_renderers_loop<sp/>=<sp/>0;<sp/>add_renderers_loop<sp/>&lt;<sp/><ref refid="_brain_harmonics_8cc_1aad3d1808a6ab9363f0430c1e9650324d" kindref="member">static_renderers_counter</ref><sp/>+<sp/><ref refid="_brain_harmonics_8cc_1a295208b91ea89b7e23a14a2d431f4b33" kindref="member">dynamic_renderers_counter</ref><sp/>+<sp/>1;<sp/>add_renderers_loop++)</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1aab0f6cfd03b167486b3a0ebbb68922be" kindref="member">define_renderers</ref>[add_renderers_loop]-&gt;SetBackground(1,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1aab0f6cfd03b167486b3a0ebbb68922be" kindref="member">define_renderers</ref>[add_renderers_loop]-&gt;GetActiveCamera()-&gt;SetFocalPoint(0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1aab0f6cfd03b167486b3a0ebbb68922be" kindref="member">define_renderers</ref>[add_renderers_loop]-&gt;GetActiveCamera()-&gt;SetPosition(1,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1aab0f6cfd03b167486b3a0ebbb68922be" kindref="member">define_renderers</ref>[add_renderers_loop]-&gt;GetActiveCamera()-&gt;SetViewUp(0,<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="2683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1aab0f6cfd03b167486b3a0ebbb68922be" kindref="member">define_renderers</ref>[add_renderers_loop]-&gt;ResetCamera();</highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1aab0f6cfd03b167486b3a0ebbb68922be" kindref="member">define_renderers</ref>[add_renderers_loop]-&gt;GetActiveCamera()-&gt;Azimuth(20);</highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1aab0f6cfd03b167486b3a0ebbb68922be" kindref="member">define_renderers</ref>[add_renderers_loop]-&gt;GetActiveCamera()-&gt;Elevation(30);</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1aab0f6cfd03b167486b3a0ebbb68922be" kindref="member">define_renderers</ref>[add_renderers_loop]-&gt;GetActiveCamera()-&gt;Dolly(1.2);</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1aab0f6cfd03b167486b3a0ebbb68922be" kindref="member">define_renderers</ref>[add_renderers_loop]-&gt;ResetCameraClippingRange();</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1aab0f6cfd03b167486b3a0ebbb68922be" kindref="member">define_renderers</ref>[add_renderers_loop]-&gt;ResetCamera();</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Establish<sp/>Screen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2692"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a65b7a900454637a30df23b1044e07e07" kindref="member">render_window_interactor</ref>-&gt;SetRenderWindow(<ref refid="_brain_harmonics_8cc_1a6ce111e58fd1f4622e6a322cefd19b26" kindref="member">render_window</ref>);</highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a65b7a900454637a30df23b1044e07e07" kindref="member">render_window_interactor</ref>-&gt;Initialize();</highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a65b7a900454637a30df23b1044e07e07" kindref="member">render_window_interactor</ref>-&gt;CreateRepeatingTimer(100);<sp/></highlight><highlight class="comment">//<sp/>in<sp/>milliseconds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_update_all_command" kindref="compound">UpdateAllCommand</ref><sp/>*<sp/>update_all_callback<sp/>=<sp/><ref refid="class_update_all_command_1a97cd6ef1c68bb473aef27c898b175517" kindref="member">UpdateAllCommand::New</ref>();</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a65b7a900454637a30df23b1044e07e07" kindref="member">render_window_interactor</ref>-&gt;AddObserver(vtkCommand::TimerEvent,<sp/>update_all_callback);</highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>program<sp/>will<sp/>loop<sp/>whilst<sp/>the<sp/>graphics<sp/>window<sp/>is<sp/>open</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/><sp/><sp/>clockTime<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/><sp/><sp/><sp/>lastClockTime<sp/>=<sp/>clockTime;</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/><sp/><sp/>event_time<sp/>=<sp/>clockTime;</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/><sp/><sp/>startTime<sp/>=<sp/>clockTime;</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>dynapTime<sp/>=<sp/>1000000000000;</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>duration<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/><sp/><sp/>caerEventPacketContainer<sp/>packetContainer;</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>Initialising<sp/>banner<sp/>from<sp/>screen.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a4929783757e2d051945177d626a74213" kindref="member">define_textactors</ref>[0]-&gt;SetInput(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a6ce111e58fd1f4622e6a322cefd19b26" kindref="member">render_window</ref>-&gt;SetWindowName(</highlight><highlight class="stringliteral">&quot;IBM<sp/>Watson<sp/>AI<sp/>XPRIZE,<sp/>Team:<sp/>NeuralMimicry&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>title</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Begin<sp/>visualisation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a6ce111e58fd1f4622e6a322cefd19b26" kindref="member">render_window</ref>-&gt;Render();</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Prepared<sp/>for<sp/>multiscreen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>screen<sp/>=<sp/><sp/>screens[<sp/>screen]-&gt;runScreen(window);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(device_attached)</highlight></codeline>
<codeline lineno="2718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>data<sp/>from<sp/>Dynap-se<sp/>(if<sp/>any)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;Retrieve<sp/>data<sp/>from<sp/>device...&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>packetContainer<sp/>=<sp/>caerDeviceDataGet(usb_handle);</highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;<sp/>Complete.&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2726"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//std::cout<sp/>&lt;&lt;<sp/>clockTime.time_since_epoch().count()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2727"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>duration<sp/>=<sp/>std::chrono::duration_cast&lt;std::chrono::nanoseconds&gt;(clockTime<sp/>-<sp/>lastClockTime).count();</highlight></codeline>
<codeline lineno="2728"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>duration<sp/>*=<sp/><sp/>dimension_list[0]-&gt;GetTime();</highlight></codeline>
<codeline lineno="2729"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//std::cout<sp/>&lt;&lt;<sp/>duration<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2730"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>event_time<sp/>+=<sp/>std::chrono::nanoseconds(duration);</highlight></codeline>
<codeline lineno="2731"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>lastClockTime<sp/>=<sp/>clockTime;</highlight></codeline>
<codeline lineno="2732"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2733"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if(device_attached)</highlight></codeline>
<codeline lineno="2734"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2735"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if<sp/>(packetContainer<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="2736"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2737"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>packetNum<sp/>=<sp/>caerEventPacketContainerGetEventPacketsNumber(packetContainer);</highlight></codeline>
<codeline lineno="2738"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2739"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//printf(&quot;\nGot<sp/>event<sp/>container<sp/>with<sp/>%d<sp/>packets<sp/>(allocated).\n&quot;,<sp/>packetNum);</highlight></codeline>
<codeline lineno="2740"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2741"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>for<sp/>(int32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>packetNum;<sp/>i++)</highlight></codeline>
<codeline lineno="2742"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2743"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>caerEventPacketHeader<sp/>packetHeader<sp/>=<sp/>caerEventPacketContainerGetEventPacket(packetContainer,<sp/>i);</highlight></codeline>
<codeline lineno="2744"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if<sp/>(packetHeader<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="2745"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2746"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//printf(&quot;Packet<sp/>%d<sp/>is<sp/>empty<sp/>(not<sp/>present).\n&quot;,<sp/>i);</highlight></codeline>
<codeline lineno="2747"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>continue;<sp/>//<sp/>Skip<sp/>if<sp/>nothing<sp/>there.</highlight></codeline>
<codeline lineno="2748"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2749"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2750"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//printf(&quot;Packet<sp/>%d<sp/>of<sp/>type<sp/>%d<sp/>-&gt;<sp/>size<sp/>is<sp/>%d.\n&quot;,<sp/>i,</highlight></codeline>
<codeline lineno="2751"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/>caerEventPacketHeaderGetEventType(packetHeader),</highlight></codeline>
<codeline lineno="2752"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/>caerEventPacketHeaderGetEventNumber(packetHeader));</highlight></codeline>
<codeline lineno="2753"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2754"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if<sp/>(caerEventPacketHeaderGetEventType(packetHeader)<sp/>==<sp/>SPIKE_EVENT)</highlight></codeline>
<codeline lineno="2755"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2756"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2757"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>caerSpikeEventPacket<sp/>evts<sp/>=<sp/>(caerSpikeEventPacket)<sp/>packetHeader;</highlight></codeline>
<codeline lineno="2758"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2759"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//<sp/>read<sp/>all<sp/>events</highlight></codeline>
<codeline lineno="2760"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>CAER_SPIKE_ITERATOR_ALL_START(evts)</highlight></codeline>
<codeline lineno="2761"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2762"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>ts<sp/>=<sp/>caerSpikeEventGetTimestamp(</highlight></codeline>
<codeline lineno="2763"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>caerSpikeIteratorElement);</highlight></codeline>
<codeline lineno="2764"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>neuronId<sp/>=<sp/>caerSpikeEventGetNeuronID(</highlight></codeline>
<codeline lineno="2765"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>caerSpikeIteratorElement);</highlight></codeline>
<codeline lineno="2766"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>sourcecoreId<sp/>=<sp/>caerSpikeEventGetSourceCoreID(</highlight></codeline>
<codeline lineno="2767"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>caerSpikeIteratorElement);<sp/>//<sp/>which<sp/>core<sp/>is<sp/>from</highlight></codeline>
<codeline lineno="2768"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>coreId<sp/>=<sp/>caerSpikeEventGetChipID(</highlight></codeline>
<codeline lineno="2769"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>caerSpikeIteratorElement);//<sp/>destination<sp/>core<sp/>(used<sp/>as<sp/>chip<sp/>id)</highlight></codeline>
<codeline lineno="2770"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2771"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;SPIKE:<sp/>ts<sp/>%llu<sp/>,<sp/>neuronID:<sp/>%llu<sp/>,<sp/>sourcecoreID:<sp/>%llu,<sp/>ascoreID:<sp/>%llu\n&quot;,ts,<sp/>neuronId,<sp/>sourcecoreId,<sp/>coreId);</highlight></codeline>
<codeline lineno="2772"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if(ts<sp/>&lt;<sp/>dynapTime)</highlight></codeline>
<codeline lineno="2773"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2774"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>dynapTime<sp/>=<sp/>ts;</highlight></codeline>
<codeline lineno="2775"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2776"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>syncTime<sp/>=<sp/>(ts<sp/>-<sp/>dynapTime)<sp/>*<sp/><sp/>dimension_list[0]-&gt;GetTime();</highlight></codeline>
<codeline lineno="2777"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if(int(std::chrono::duration_cast&lt;std::chrono::nanoseconds&gt;(event_time<sp/>-<sp/>(startTime<sp/>+<sp/>std::chrono::microseconds(syncTime))).count())<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="2778"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2779"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>event_time<sp/>=<sp/>startTime<sp/>+<sp/>std::chrono::microseconds(syncTime);</highlight></codeline>
<codeline lineno="2780"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2781"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if(neuronId<sp/>&lt;<sp/><sp/>orbital.size())</highlight></codeline>
<codeline lineno="2782"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2783"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>orbital[int(neuronId)].AddTemporalAdjustment(startTime<sp/>+<sp/>std::chrono::microseconds(syncTime),<sp/>20000.0);</highlight></codeline>
<codeline lineno="2784"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2785"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//std::cout<sp/>&lt;&lt;<sp/>int((neuronId))<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;;</highlight></codeline>
<codeline lineno="2786"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2787"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//std::cout<sp/>&lt;&lt;<sp/>int((neuronId<sp/>%<sp/>6))<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>syncTime<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>int(std::chrono::duration_cast&lt;std::chrono::nanoseconds&gt;(event_time<sp/>-<sp/>(startTime<sp/>+<sp/>std::chrono::microseconds(syncTime))).count())<sp/>&lt;&lt;<sp/>&quot;<sp/><sp/>&quot;<sp/>&lt;&lt;<sp/><sp/>orbital[int(neuronId<sp/>%<sp/>6)].GetEnergy()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2788"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>CAER_SPIKE_ITERATOR_ALL_END</highlight></codeline>
<codeline lineno="2789"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2790"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2791"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2792"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>caerEventPacketContainerFree(packetContainer);</highlight></codeline>
<codeline lineno="2793"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2794"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2795"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2796"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>poll_capture<sp/>=<sp/>sniffex(2,list&lt;char&gt;&amp;<sp/>{&quot;sniffex&quot;,&quot;en0&quot;});</highlight></codeline>
<codeline lineno="2797"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2798"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>nloop<sp/>=<sp/>0;<sp/>nloop<sp/>&lt;<sp/>num_orbitals_in_cognitive_network[current_cognitive_network];<sp/>nloop++)</highlight></codeline>
<codeline lineno="2799"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2800"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>orbital[nloop].Update(event_time);</highlight></codeline>
<codeline lineno="2801"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2802"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2803"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>pauseLoop++;</highlight></codeline>
<codeline lineno="2804"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if(pauseLoop<sp/>&gt;<sp/>50000)</highlight></codeline>
<codeline lineno="2805"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2806"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//<sp/>Synthetic<sp/>periodic<sp/>stimulus</highlight></codeline>
<codeline lineno="2807"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if(!device_attached)</highlight></codeline>
<codeline lineno="2808"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2809"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>nloop<sp/>=<sp/>0;<sp/>nloop<sp/>&lt;<sp/>6;<sp/>nloop++)</highlight></codeline>
<codeline lineno="2810"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2811"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>orbital[nloop].AddTemporalAdjustment(event_time,<sp/>20000.0);</highlight></codeline>
<codeline lineno="2812"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2813"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2814"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>pauseLoop<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2815"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sleep(2);</highlight></codeline>
<codeline lineno="2816"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Actual:<sp/>&quot;<sp/>&lt;&lt;<sp/>time(0)<sp/>&lt;&lt;<sp/>&quot;<sp/>Virtual:<sp/>&quot;<sp/>&lt;&lt;<sp/><sp/>universe_list[0].theTimeNow()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2817"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2818"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2820"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>for(int<sp/>ploop<sp/>=<sp/>0;<sp/>ploop<sp/>&lt;<sp/>10000;<sp/>ploop++)</highlight></codeline>
<codeline lineno="2821"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2822"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2823"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2824"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2826"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//<sp/>Early<sp/>calculation<sp/>for<sp/>colliding<sp/>elementary<sp/>particles<sp/>and<sp/>the<sp/>effect<sp/>on<sp/>direction<sp/>and<sp/>acceleration</highlight></codeline>
<codeline lineno="2827"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>for(int<sp/>n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>l_pointEnd;<sp/>n<sp/>=<sp/>n<sp/>+<sp/>4)</highlight></codeline>
<codeline lineno="2828"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2829"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>for(int<sp/>p<sp/>=<sp/>0;<sp/>p<sp/>&lt;<sp/>l_pointEnd;<sp/>p<sp/>=<sp/>p<sp/>+<sp/>4)</highlight></codeline>
<codeline lineno="2830"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2831"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if(n<sp/>!=<sp/>p)</highlight></codeline>
<codeline lineno="2832"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2833"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>xd<sp/>=<sp/><sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>p].getPointPosition()<sp/>-<sp/><sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>n].GetPointPosition(event_time);</highlight></codeline>
<codeline lineno="2834"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>yd<sp/>=<sp/><sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>p<sp/>+<sp/>1].getPointPosition()<sp/>-<sp/><sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>n<sp/>+<sp/>1].GetPointPosition(event_time);</highlight></codeline>
<codeline lineno="2835"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>zd<sp/>=<sp/><sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>p<sp/>+<sp/>2].getPointPosition()<sp/>-<sp/><sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>n<sp/>+<sp/>2].GetPointPosition(event_time);</highlight></codeline>
<codeline lineno="2836"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>pointDistance2<sp/>=<sp/>(xd<sp/>*<sp/>xd<sp/>+<sp/>yd<sp/>*<sp/>yd<sp/>+<sp/>zd<sp/>*<sp/>zd);</highlight></codeline>
<codeline lineno="2837"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>effect<sp/>=<sp/>1<sp/>+<sp/>(1<sp/>/<sp/>pointDistance2);</highlight></codeline>
<codeline lineno="2838"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>n]-&gt;SetPointDifferential(<sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>n].GetPointDifferential(event_time)<sp/>*<sp/>effect);</highlight></codeline>
<codeline lineno="2839"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>p]-&gt;SetPointDifferential(<sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>p].GetPointDifferential(event_time)<sp/>*<sp/>effect);</highlight></codeline>
<codeline lineno="2840"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>n<sp/>+<sp/>1]-&gt;SetPointDifferential(<sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>n<sp/>+<sp/>1].GetPointDifferential(event_time)<sp/>*<sp/>effect);</highlight></codeline>
<codeline lineno="2841"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>p<sp/>+<sp/>1]-&gt;SetPointDifferential(<sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>p<sp/>+<sp/>1].GetPointDifferential(event_time)<sp/>*<sp/>effect);</highlight></codeline>
<codeline lineno="2842"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>n<sp/>+<sp/>2]-&gt;SetPointDifferential(<sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>n<sp/>+<sp/>2].GetPointDifferential(event_time)<sp/>*<sp/>effect);</highlight></codeline>
<codeline lineno="2843"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>p<sp/>+<sp/>2]-&gt;SetPointDifferential(<sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>p<sp/>+<sp/>2].GetPointDifferential(event_time)<sp/>*<sp/>effect);</highlight></codeline>
<codeline lineno="2844"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2845"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2846"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2847"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2850"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>qloop<sp/>=<sp/>0;<sp/>qloop<sp/>&lt;<sp/>orbital_layers.size()<sp/>-<sp/>1;<sp/>qloop++)</highlight></codeline>
<codeline lineno="2851"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2852"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>zloop<sp/>=<sp/>orbital_layers[qloop];<sp/>zloop<sp/>&lt;=<sp/>(orbital_layers[qloop<sp/>+<sp/>1]);<sp/>zloop++)</highlight></codeline>
<codeline lineno="2853"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2854"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>nloop<sp/>=<sp/>orbital_layers[qloop];<sp/>nloop<sp/>&lt;=<sp/>(orbital_layers[qloop<sp/>+<sp/>1]);<sp/>nloop++)</highlight></codeline>
<codeline lineno="2855"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2856"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if<sp/>(zloop<sp/>!=<sp/>nloop)</highlight></codeline>
<codeline lineno="2857"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2858"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>compareFirst<sp/>=<sp/><sp/>orbital[zloop].GetPosition(event_time)<sp/>/<sp/><sp/>orbital[nloop].GetPosition(event_time);</highlight></codeline>
<codeline lineno="2859"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if(0.5<sp/>-<sp/>compareFirst<sp/>&gt;<sp/>-0.1f<sp/>&amp;&amp;<sp/>0.5<sp/>-<sp/>compareFirst<sp/>&lt;<sp/>0.1f)</highlight></codeline>
<codeline lineno="2860"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2861"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if<sp/>(zloop<sp/>&lt;<sp/>nloop)</highlight></codeline>
<codeline lineno="2862"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2863"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//<sp/>Start<sp/>of<sp/>stimulus<sp/>emulation</highlight></codeline>
<codeline lineno="2864"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if(<sp/>orbital[zloop].GetEnergy()<sp/>&gt;<sp/>1.0)</highlight></codeline>
<codeline lineno="2865"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2866"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>orbital[zloop].AddTemporalAdjustment(event_time,<sp/>1.0);</highlight></codeline>
<codeline lineno="2867"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//<sp/>orbital[nloop].AddTemporalAdjustment(event_time,<sp/>10.0);</highlight></codeline>
<codeline lineno="2868"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//iter_swap(<sp/>orbital.begin()<sp/>+<sp/>(zloop),<sp/><sp/>orbital.begin()<sp/>+<sp/>(zloop<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="2869"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>OrbConnection<sp/>myOrbConnection;</highlight></codeline>
<codeline lineno="2870"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>myOrbConnection.OrbOne<sp/>=<sp/>zloop;</highlight></codeline>
<codeline lineno="2871"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>myOrbConnection.OrbTwo<sp/>=<sp/>nloop;</highlight></codeline>
<codeline lineno="2872"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>myOrbConnection.OrbConnectionStrength<sp/>=<sp/>5.0;</highlight></codeline>
<codeline lineno="2873"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>myOrbConnection.OrbConnectionModifier<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="2874"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>myOrbConnection.OrbSpike<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="2875"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>myOrbConnection.OrbOnePosition<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="2876"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>myOrbConnection.OrbTwoPosition<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="2877"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>OrbConnectionList.push_back(myOrbConnection);</highlight></codeline>
<codeline lineno="2878"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2879"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2880"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2881"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2882"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2883"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2884"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2885"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2886"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>for(int<sp/>qloop<sp/>=<sp/>0;<sp/>qloop<sp/>&lt;<sp/>OrbConnectionList.size()<sp/>-<sp/>1;<sp/>qloop++)</highlight></codeline>
<codeline lineno="2887"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2888"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>for(int<sp/>zloop<sp/>=<sp/>qloop<sp/>+<sp/>1;<sp/>zloop<sp/>&lt;<sp/>OrbConnectionList.size();<sp/>zloop++)</highlight></codeline>
<codeline lineno="2889"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2890"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if(OrbConnectionList[qloop].OrbOne<sp/>==<sp/>OrbConnectionList[zloop].OrbOne)</highlight></codeline>
<codeline lineno="2891"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2892"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if(OrbConnectionList[qloop].OrbTwo<sp/>==<sp/>OrbConnectionList[zloop].OrbTwo)</highlight></codeline>
<codeline lineno="2893"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2894"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>OrbConnectionList[qloop].OrbConnectionStrength<sp/>+=<sp/>OrbConnectionList[zloop].OrbConnectionStrength;</highlight></codeline>
<codeline lineno="2895"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>OrbConnectionList[zloop].OrbConnectionStrength<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="2896"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>OrbConnectionList[qloop].OrbConnectionModifier<sp/>*=<sp/>OrbConnectionList[zloop].OrbConnectionModifier;</highlight></codeline>
<codeline lineno="2897"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>OrbConnectionList[zloop].OrbConnectionModifier<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="2898"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>OrbConnectionList[qloop].OrbSpike<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="2899"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2900"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2901"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2902"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2903"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if(pauseLoop<sp/>%<sp/>1<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2904"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2905"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>OrbConnectionList.erase(<sp/>std::remove_if(OrbConnectionList.begin(),<sp/>OrbConnectionList.end(),<sp/>[](<sp/>const<sp/>OrbConnection&amp;<sp/>item)<sp/>{<sp/>return<sp/>(item.OrbConnectionStrength<sp/>&lt;<sp/>0.1f<sp/>);<sp/>}),<sp/>OrbConnectionList.end());</highlight></codeline>
<codeline lineno="2906"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2907"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2908"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>for(int<sp/>qloop<sp/>=<sp/>0;<sp/>qloop<sp/>&lt;<sp/>OrbConnectionList.size()<sp/>-<sp/>1;<sp/>qloop++)</highlight></codeline>
<codeline lineno="2909"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2910"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if(OrbConnectionList[qloop].OrbSpike)</highlight></codeline>
<codeline lineno="2911"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2912"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if(<sp/>orbital[OrbConnectionList[qloop].OrbOne].GetEnergy(event_time)<sp/>&gt;<sp/>(OrbConnectionList[qloop].OrbConnectionStrength)<sp/>*<sp/>OrbConnectionList[qloop].OrbConnectionModifier)</highlight></codeline>
<codeline lineno="2913"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2914"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>orbital[OrbConnectionList[qloop].OrbOne].AddTemporalAdjustment(event_time,<sp/>(OrbConnectionList[qloop].OrbConnectionStrength)<sp/>*<sp/>OrbConnectionList[qloop].OrbConnectionModifier);</highlight></codeline>
<codeline lineno="2915"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>orbital[OrbConnectionList[qloop].OrbTwo].AddTemporalAdjustment(event_time,<sp/>(OrbConnectionList[qloop].OrbConnectionStrength)<sp/>*<sp/>OrbConnectionList[qloop].OrbConnectionModifier);</highlight></codeline>
<codeline lineno="2916"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2917"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="2918"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2919"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>orbital[OrbConnectionList[qloop].OrbOne].AddTemporalAdjustment(event_time,<sp/><sp/>orbital[OrbConnectionList[qloop].OrbOne].GetEnergy(event_time));</highlight></codeline>
<codeline lineno="2920"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>orbital[OrbConnectionList[qloop].OrbTwo].AddTemporalAdjustment(event_time,<sp/><sp/>orbital[OrbConnectionList[qloop].OrbOne].GetEnergy(event_time));</highlight></codeline>
<codeline lineno="2921"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2922"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>OrbConnectionList[qloop].OrbSpike<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="2923"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2924"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="2925"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2926"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>OrbConnectionList[qloop].OrbConnectionStrength<sp/>*=<sp/>0.99;</highlight></codeline>
<codeline lineno="2927"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>OrbConnectionList[qloop].OrbConnectionModifier<sp/>*=<sp/>0.99;</highlight></codeline>
<codeline lineno="2928"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2929"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2930"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2931"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if(pauseLoop<sp/>%<sp/>2500<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2932"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2933"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Sending<sp/>stimuli...&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2934"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//Send<sp/>spike<sp/>to<sp/>Dynapse</highlight></codeline>
<codeline lineno="2935"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>genBits<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>20;<sp/>//<sp/>CAM<sp/>address<sp/>(8<sp/>bits)</highlight></codeline>
<codeline lineno="2936"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>genBits<sp/>+=<sp/>0<sp/>&lt;&lt;<sp/>18;<sp/>//<sp/>Core<sp/>address<sp/>(2<sp/>bits)</highlight></codeline>
<codeline lineno="2937"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>genBits<sp/>+=<sp/>0<sp/>&lt;&lt;<sp/>16;<sp/>//<sp/>Hard<sp/>code<sp/>(2<sp/>bits)</highlight></codeline>
<codeline lineno="2938"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>genBits<sp/>+=<sp/>0<sp/>&lt;&lt;<sp/>14;<sp/>//<sp/>Padding<sp/>(2<sp/>bits)</highlight></codeline>
<codeline lineno="2939"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>genBits<sp/>+=<sp/>1<sp/>&lt;&lt;<sp/>13;<sp/>//<sp/>Hard<sp/>code<sp/>(1<sp/>bits)</highlight></codeline>
<codeline lineno="2940"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>genBits<sp/>+=<sp/>0<sp/>&lt;&lt;<sp/>10;<sp/>//<sp/>Padding<sp/>(3<sp/>bits)</highlight></codeline>
<codeline lineno="2941"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>genBits<sp/>+=<sp/>0<sp/>&lt;&lt;<sp/>9;<sp/>//<sp/>N/S<sp/>Direction<sp/>(1<sp/>bit)</highlight></codeline>
<codeline lineno="2942"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>genBits<sp/>+=<sp/>0<sp/>&lt;&lt;<sp/>7;<sp/>//<sp/>Skip<sp/>chips<sp/>(2<sp/>bits)</highlight></codeline>
<codeline lineno="2943"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>genBits<sp/>+=<sp/>0<sp/>&lt;&lt;<sp/>6;<sp/>//<sp/>E/W<sp/>Direction<sp/>(1<sp/>bit)</highlight></codeline>
<codeline lineno="2944"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>genBits<sp/>+=<sp/>0<sp/>&lt;&lt;<sp/>4;<sp/>//<sp/>Skip<sp/>chips<sp/>(2<sp/>bits)</highlight></codeline>
<codeline lineno="2945"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>genBits<sp/>+=<sp/>1;<sp/>//<sp/>Core<sp/>(4<sp/>bits)</highlight></codeline>
<codeline lineno="2946"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2947"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2948"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>caerDeviceConfigSet(usb_handle,<sp/>DYNAPSE_CONFIG_CHIP,<sp/>0,<sp/>0);<sp/>//<sp/>core<sp/>0-3<sp/>neu<sp/>0</highlight></codeline>
<codeline lineno="2949"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2950"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>genBits<sp/>=<sp/>neuronId<sp/>&lt;&lt;<sp/>7<sp/>|<sp/>sramId<sp/>&lt;&lt;<sp/>5<sp/>|<sp/>coreId<sp/>&lt;&lt;<sp/>15<sp/>|<sp/>1<sp/>&lt;&lt;<sp/>17<sp/>|<sp/>1<sp/>&lt;&lt;<sp/>4<sp/>|<sp/>destinationCoreId<sp/>&lt;&lt;<sp/>18<sp/>|<sp/>dynap_Sy<sp/>&lt;&lt;<sp/>27<sp/>|<sp/>dy<sp/>&lt;&lt;<sp/>25<sp/>|<sp/>dynap_Dx<sp/>&lt;&lt;<sp/>22<sp/>|<sp/>dynap_Sx<sp/>&lt;&lt;<sp/>24<sp/>|<sp/>coreId<sp/>&lt;&lt;<sp/>28;</highlight></codeline>
<codeline lineno="2951"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2952"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>caerDeviceConfigSet(usb_handle,<sp/>DYNAPSE_CONFIG_CHIP,<sp/>DYNAPSE_CONFIG_CHIP_CONTENT,<sp/>genBits);</highlight></codeline>
<codeline lineno="2953"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Sent<sp/>stimuli.&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2954"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2955"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2956"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//<sp/>Transfer<sp/>orbital<sp/>details<sp/>to<sp/>points</highlight></codeline>
<codeline lineno="2957"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>nloop<sp/>=<sp/>l_orbPointStart;<sp/>nloop<sp/>&lt;<sp/>l_orbPointEnd;<sp/>nloop++)</highlight></codeline>
<codeline lineno="2958"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2959"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcY<sp/>=<sp/><sp/>orbital[nloop<sp/>-<sp/>l_orbPointStart].GetPosition(event_time);</highlight></codeline>
<codeline lineno="2960"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcYoffset<sp/>=<sp/><sp/>dimension_list[orbDimensionsStart<sp/>+<sp/>((nloop<sp/>-<sp/>l_orbPointStart)<sp/>%<sp/>num_dimensions[9])].GetOffset(event_time);</highlight></codeline>
<codeline lineno="2961"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcYscale<sp/>=<sp/><sp/>dimension_list[orbDimensionsStart<sp/>+<sp/>((nloop<sp/>-<sp/>l_orbPointStart)<sp/>%<sp/>num_dimensions[9])].GetScale(event_time);</highlight></codeline>
<codeline lineno="2962"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcY<sp/>=<sp/>calcY<sp/>+<sp/>calcYoffset;</highlight></codeline>
<codeline lineno="2963"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcY<sp/>=<sp/>calcY<sp/>*<sp/>calcYscale;</highlight></codeline>
<codeline lineno="2964"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2965"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>nloop]-&gt;SetPointPosition(event_time,<sp/>calcY);</highlight></codeline>
<codeline lineno="2966"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//std::cout<sp/>&lt;&lt;<sp/>calcX<sp/>&lt;&lt;<sp/>&quot;<sp/><sp/><sp/>&quot;;</highlight></codeline>
<codeline lineno="2967"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2968"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//<sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2969"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2972"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>for(int<sp/>x<sp/>=<sp/>l_ccpPointStart;<sp/>x<sp/>&lt;<sp/>l_ccpPointStart<sp/>+<sp/>100;<sp/>x<sp/>=<sp/>x<sp/>+<sp/>2)</highlight></codeline>
<codeline lineno="2973"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2974"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>for(int<sp/>n<sp/>=<sp/>l_ccpPointStart<sp/>+<sp/>100;<sp/>n<sp/>&lt;<sp/>l_ccpPointStart<sp/>+<sp/>200<sp/>;<sp/>n<sp/>=<sp/>n<sp/>+<sp/>2)</highlight></codeline>
<codeline lineno="2975"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2976"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>l_desired_distance<sp/>=<sp/><sp/>synapse[int((x<sp/>-<sp/>l_ccpPointStart)/2)].GetDistance(event_time,<sp/>int((n<sp/>-<sp/>(l_ccpPointStart<sp/>+<sp/>100))/2.0));</highlight></codeline>
<codeline lineno="2977"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>nodeList.clear();</highlight></codeline>
<codeline lineno="2978"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>nodeList.push_back(x);</highlight></codeline>
<codeline lineno="2979"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>nodeList.push_back(x<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2980"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>nodeList.push_back(n);</highlight></codeline>
<codeline lineno="2981"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>nodeList.push_back(n<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2982"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2983"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Request<sp/>nodes:<sp/>&quot;<sp/>&lt;&lt;<sp/>nodeList[0]<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;<sp/>&lt;&lt;<sp/>nodeList[1]<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;<sp/>&lt;&lt;<sp/>nodeList[2]<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;<sp/>&lt;&lt;<sp/>nodeList[3]<sp/>&lt;&lt;<sp/>&quot;<sp/>Dist:&quot;<sp/>&lt;&lt;<sp/>l_desired_distance<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2984"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2985"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>status_of_call_request<sp/>=<sp/>DistanceBetweenNodes(&amp;<sp/>current_universe_pointer-&gt;GetPoints(event_time),<sp/>&amp;nodeList,<sp/>2,<sp/>l_desired_distance);</highlight></codeline>
<codeline lineno="2986"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2987"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Retrieved<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/><sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>nodeList[0]].GetPointDifferential(event_time)<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;<sp/>&lt;&lt;<sp/><sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>nodeList[1]].GetPointDifferential(event_time)<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;<sp/>&lt;&lt;<sp/><sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>nodeList[2]].GetPointDifferential(event_time)<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;<sp/>&lt;&lt;<sp/><sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>nodeList[3]].GetPointDifferential(event_time)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2988"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2989"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2990"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2991"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2992"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>for(int<sp/>n<sp/>=<sp/>l_ccpPointStart<sp/>+<sp/>100;<sp/>n<sp/>&lt;<sp/>l_ccpPointStart<sp/>+<sp/>200<sp/>;<sp/>n<sp/>=<sp/>n<sp/>+<sp/>2)</highlight></codeline>
<codeline lineno="2993"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2994"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>l_demandCounter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2995"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>for(int<sp/>x<sp/>=<sp/>l_ccpPointStart;<sp/>x<sp/>&lt;<sp/>l_ccpPointStart<sp/>+<sp/>100;<sp/>x<sp/>=<sp/>x<sp/>+<sp/>2)</highlight></codeline>
<codeline lineno="2996"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2997"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>l_desired_distance<sp/>=<sp/><sp/>synapse[int((x<sp/>-<sp/>l_ccpPointStart)/2)].getDistance(int((n<sp/>-<sp/>(l_ccpPointStart<sp/>+<sp/>100))/2.0));</highlight></codeline>
<codeline lineno="2998"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>nodeList.clear();</highlight></codeline>
<codeline lineno="2999"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>nodeList.push_back(n);</highlight></codeline>
<codeline lineno="3000"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>nodeList.push_back(n<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="3001"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>nodeList.push_back(x);</highlight></codeline>
<codeline lineno="3002"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>nodeList.push_back(x<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="3003"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3004"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Request<sp/>nodes:<sp/>&quot;<sp/>&lt;&lt;<sp/>nodeList[0]<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;<sp/>&lt;&lt;<sp/>nodeList[1]<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;<sp/>&lt;&lt;<sp/>nodeList[2]<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;<sp/>&lt;&lt;<sp/>nodeList[3]<sp/>&lt;&lt;<sp/>&quot;<sp/>Dist:&quot;<sp/>&lt;&lt;<sp/>l_desired_distance<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="3005"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3006"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>status_of_call_request<sp/>=<sp/>DistanceBetweenNodes(&amp;<sp/>current_universe_pointer-&gt;GetPoints(event_time),<sp/>&amp;nodeList,<sp/>2,<sp/>l_desired_distance);</highlight></codeline>
<codeline lineno="3007"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3008"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if(<sp/>synapse[int((x<sp/>-<sp/>l_ccpPointStart)/2)].GetAllocatedNeuron(event_time)<sp/>==<sp/>int(<sp/>n<sp/>-<sp/>(l_ccpPointStart<sp/>+<sp/>100<sp/>))/2)</highlight></codeline>
<codeline lineno="3009"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3010"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>l_demandCounter<sp/>=<sp/>l_demandCounter<sp/>+<sp/><sp/>synapse[int((x<sp/>-<sp/>l_ccpPointStart)/2)].GetDemand(event_time);</highlight></codeline>
<codeline lineno="3011"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3012"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>((n<sp/>-<sp/>(l_ccpPointStart<sp/>+<sp/>100))<sp/>/<sp/>2)<sp/>&lt;&lt;<sp/>&quot;<sp/>-<sp/>&quot;<sp/>&lt;&lt;<sp/><sp/>synapse[int((x<sp/>-<sp/>l_ccpPointStart)/2)].GetAllocatedNeuron(event_time)<sp/>&lt;&lt;<sp/>&quot;<sp/>-<sp/>&quot;<sp/>&lt;&lt;<sp/>int(<sp/>n<sp/>-<sp/>(l_ccpPointStart<sp/>+<sp/>100<sp/>))/2<sp/>&lt;&lt;<sp/>&quot;<sp/>-<sp/>&quot;<sp/>&lt;&lt;<sp/>l_demandCounter<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="3013"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3014"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3015"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3016"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>for(int<sp/>n<sp/>=<sp/>l_ccpPointStart<sp/>+<sp/>100;<sp/>n<sp/>&lt;<sp/>l_ccpPointStart<sp/>+<sp/>200<sp/>;<sp/>n<sp/>=<sp/>n<sp/>+<sp/>2)</highlight></codeline>
<codeline lineno="3017"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3018"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>for(int<sp/>x<sp/>=<sp/>l_ccpPointStart<sp/>+<sp/>100;<sp/>x<sp/>&lt;<sp/>l_ccpPointStart<sp/>+<sp/>200;<sp/>x<sp/>=<sp/>x<sp/>+<sp/>2)</highlight></codeline>
<codeline lineno="3019"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3020"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if<sp/>(n<sp/>!=<sp/>x)</highlight></codeline>
<codeline lineno="3021"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3022"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>l_desired_distance<sp/>=<sp/>0.1;</highlight></codeline>
<codeline lineno="3023"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>nodeList.clear();</highlight></codeline>
<codeline lineno="3024"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>nodeList.push_back(n);</highlight></codeline>
<codeline lineno="3025"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>nodeList.push_back(n<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="3026"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>nodeList.push_back(x);</highlight></codeline>
<codeline lineno="3027"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>nodeList.push_back(x<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="3028"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3029"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Request<sp/>nodes:<sp/>&quot;<sp/>&lt;&lt;<sp/>nodeList[0]<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;<sp/>&lt;&lt;<sp/>nodeList[1]<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;<sp/>&lt;&lt;<sp/>nodeList[2]<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;<sp/>&lt;&lt;<sp/>nodeList[3]<sp/>&lt;&lt;<sp/>&quot;<sp/>Dist:&quot;<sp/>&lt;&lt;<sp/>l_desired_distance<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="3030"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3031"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>status_of_call_request<sp/>=<sp/>DistanceBetweenNodes(&amp;<sp/>current_universe_pointer-&gt;GetPoints(event_time),<sp/>&amp;nodeList,<sp/>2,<sp/>l_desired_distance);</highlight></codeline>
<codeline lineno="3032"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3033"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3034"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3035"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3036"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>pArgs<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3037"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>pArrayArgs<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3038"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>pTransferArray<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3039"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>pValue<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3040"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>pArgs<sp/>=<sp/>PyTuple_New(2);</highlight></codeline>
<codeline lineno="3041"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pValue<sp/>=<sp/>PyInt_FromLong(3);</highlight></codeline>
<codeline lineno="3042"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>npy_intp<sp/>dims[2]<sp/>=<sp/>{2,15}</highlight></codeline>
<codeline lineno="3043"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>pArrayArgs<sp/>=<sp/>PyArray_SimpleNew(2,<sp/>dims,<sp/>NPY_INT);</highlight></codeline>
<codeline lineno="3044"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//<sp/>The<sp/>pointer<sp/>to<sp/>the<sp/>array<sp/>data<sp/>is<sp/>accessed<sp/>using<sp/>PyArray_DATA()</highlight></codeline>
<codeline lineno="3045"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>pTransferArray<sp/>=<sp/>(int<sp/>*)<sp/>PyArray_DATA(pArrayArgs);</highlight></codeline>
<codeline lineno="3046"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//<sp/>Copy<sp/>the<sp/>data<sp/>from<sp/>the<sp/>&quot;array<sp/>of<sp/>arrays&quot;<sp/>to<sp/>the<sp/>contiguous<sp/>numpy<sp/>array.</highlight></codeline>
<codeline lineno="3047"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>l_transferArray.clear();</highlight></codeline>
<codeline lineno="3048"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>tloop<sp/>=<sp/>l_ccpPointStart;<sp/>tloop<sp/>&lt;<sp/>l_ccpPointStart<sp/>+<sp/>30;<sp/>tloop++)</highlight></codeline>
<codeline lineno="3049"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3050"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>l_transferArray.push_back((int)round(<sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>tloop].GetPointPosition(event_time)));</highlight></codeline>
<codeline lineno="3051"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>l_transferArray.back()<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;;</highlight></codeline>
<codeline lineno="3052"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3053"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="3054"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>std::memcpy(pTransferArray,<sp/>&amp;l_transferArray,<sp/>sizeof(int)<sp/>*<sp/>30);</highlight></codeline>
<codeline lineno="3055"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>PyTuple_SetItem(pArgs,0,pArrayArgs);</highlight></codeline>
<codeline lineno="3056"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>pValue<sp/>=<sp/>PyInt_FromLong(2);</highlight></codeline>
<codeline lineno="3057"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>PyTuple_SetItem(pArgs,1,pValue);</highlight></codeline>
<codeline lineno="3058"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3059"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pValue<sp/>=<sp/>PyObject_CallObject(pFunc,<sp/>pArgs);</highlight></codeline>
<codeline lineno="3060"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>pValue<sp/>=<sp/>PyObject_CallObject(pFunc,<sp/>pArgs);</highlight></codeline>
<codeline lineno="3061"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(pArgs);</highlight></codeline>
<codeline lineno="3062"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(pArrayArgs);</highlight></codeline>
<codeline lineno="3063"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if<sp/>(pValue<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="3064"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;Result<sp/>of<sp/>call:<sp/>%ld\n&quot;,<sp/>PyInt_AsLong(pValue));</highlight></codeline>
<codeline lineno="3065"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(pValue);</highlight></codeline>
<codeline lineno="3066"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(pTransferArray);</highlight></codeline>
<codeline lineno="3067"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pValue<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3068"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3069"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>else<sp/>{</highlight></codeline>
<codeline lineno="3070"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Py_DECREF(pTransferArray);</highlight></codeline>
<codeline lineno="3071"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Py_DECREF(pFunc);</highlight></codeline>
<codeline lineno="3072"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Py_DECREF(pModule);</highlight></codeline>
<codeline lineno="3073"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>PyErr_Print();</highlight></codeline>
<codeline lineno="3074"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,&quot;Call<sp/>failed\n&quot;);</highlight></codeline>
<codeline lineno="3075"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>return<sp/>EXIT_FAILURE;</highlight></codeline>
<codeline lineno="3076"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3077"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3078"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>for(int<sp/>n<sp/>=<sp/>l_pointStart;<sp/>n<sp/>&lt;<sp/>l_pointEnd;<sp/>n++)</highlight></codeline>
<codeline lineno="3079"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3080"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>n<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;;</highlight></codeline>
<codeline lineno="3081"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>n].PointPoll(event_time,<sp/>1);</highlight></codeline>
<codeline lineno="3082"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>n].OverflowPoll(event_time);</highlight></codeline>
<codeline lineno="3083"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3084"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="3085"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3087"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>patternFound<sp/>=<sp/>analyseStream(&amp;<sp/>neuron,<sp/>&amp;<sp/>current_universe_pointer-&gt;GetPoints(event_time),<sp/>l_pointStart,<sp/>(l_ccpPointStart<sp/>+<sp/>0)<sp/>-<sp/>num_dimensions[2],<sp/>num_dimensions[2],1);</highlight></codeline>
<codeline lineno="3088"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>patternFound<sp/>=<sp/>analyseStream(&amp;<sp/>neuron,<sp/>&amp;<sp/>current_universe_pointer-&gt;GetPoints(event_time),<sp/>l_pointStart<sp/>+<sp/>1,<sp/>(l_ccpPointStart<sp/>+<sp/>1)<sp/>-<sp/>num_dimensions[2],<sp/>num_dimensions[2],2);</highlight></codeline>
<codeline lineno="3089"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>patternFound<sp/>=<sp/>analyseStream(&amp;<sp/>neuron,<sp/>&amp;<sp/>current_universe_pointer-&gt;GetPoints(event_time),<sp/>l_pointStart<sp/>+<sp/>2,<sp/>(l_ccpPointStart<sp/>+<sp/>2)<sp/>-<sp/>num_dimensions[2],<sp/>num_dimensions[2],3);</highlight></codeline>
<codeline lineno="3090"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3091"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>patternFound<sp/>=<sp/>analyseStream(&amp;<sp/>neuron,<sp/>&amp;<sp/>current_universe_pointer-&gt;GetPoints(event_time),<sp/>l_ccpPointStart,<sp/>(l_pointEnd<sp/>+<sp/>0)<sp/>-<sp/>num_dimensions[3],<sp/>num_dimensions[3],1);</highlight></codeline>
<codeline lineno="3092"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>patternFound<sp/>=<sp/>analyseStream(&amp;<sp/>neuron,<sp/>&amp;<sp/>current_universe_pointer-&gt;GetPoints(event_time),<sp/>l_ccpPointStart<sp/>+<sp/>1,<sp/>(l_pointEnd<sp/>+<sp/>1)<sp/>-<sp/>num_dimensions[3],<sp/>num_dimensions[3],2);</highlight></codeline>
<codeline lineno="3093"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>to<sp/>put<sp/>all<sp/>the<sp/>calculations<sp/>into<sp/>something<sp/>visual.<sp/>Drawing<sp/>to<sp/>the<sp/>screen.<sp/>Scaled<sp/>and<sp/>orientated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>define_points.clear();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3097"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>for(int<sp/>n<sp/>=<sp/>l_pointStart;<sp/>n<sp/>&lt;<sp/>l_ccpPointStart;<sp/>n<sp/>=<sp/>n<sp/>+<sp/>num_dimensions[2])</highlight></codeline>
<codeline lineno="3098"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3099"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcX<sp/>=<sp/><sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>n].GetPointPosition(event_time);</highlight></codeline>
<codeline lineno="3100"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcY<sp/>=<sp/><sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>n+1].GetPointPosition(event_time);</highlight></codeline>
<codeline lineno="3101"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcZ<sp/>=<sp/><sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>n+2].GetPointPosition(event_time);</highlight></codeline>
<codeline lineno="3102"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcXoffset<sp/>=<sp/><sp/>dimension_list[0].GetOffset(event_time);</highlight></codeline>
<codeline lineno="3103"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcYoffset<sp/>=<sp/><sp/>dimension_list[1].GetOffset(event_time);</highlight></codeline>
<codeline lineno="3104"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcZoffset<sp/>=<sp/><sp/>dimension_list[2].GetOffset(event_time);</highlight></codeline>
<codeline lineno="3105"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcXscale<sp/>=<sp/><sp/>dimension_list[0].GetScale(event_time);</highlight></codeline>
<codeline lineno="3106"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcYscale<sp/>=<sp/><sp/>dimension_list[1].GetScale(event_time);</highlight></codeline>
<codeline lineno="3107"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcZscale<sp/>=<sp/><sp/>dimension_list[2].GetScale(event_time);</highlight></codeline>
<codeline lineno="3108"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcX<sp/>=<sp/>calcX<sp/>+<sp/>calcXoffset;</highlight></codeline>
<codeline lineno="3109"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcY<sp/>=<sp/>calcY<sp/>+<sp/>calcYoffset;</highlight></codeline>
<codeline lineno="3110"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcZ<sp/>=<sp/>calcZ<sp/>+<sp/>calcZoffset;</highlight></codeline>
<codeline lineno="3111"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcX<sp/>=<sp/>calcX<sp/>*<sp/>calcXscale;</highlight></codeline>
<codeline lineno="3112"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcY<sp/>=<sp/>calcY<sp/>*<sp/>calcYscale;</highlight></codeline>
<codeline lineno="3113"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcZ<sp/>=<sp/>calcZ<sp/>*<sp/>calcZscale;</highlight></codeline>
<codeline lineno="3114"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcX<sp/>=<sp/>calcX<sp/>/<sp/>calcZ;</highlight></codeline>
<codeline lineno="3115"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcY<sp/>=<sp/>calcY<sp/>/<sp/>calcZ;</highlight></codeline>
<codeline lineno="3116"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcX<sp/>=<sp/>calcX<sp/>+<sp/>(<sp/>l_screenX<sp/>/<sp/>2.0);</highlight></codeline>
<codeline lineno="3117"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcY<sp/>=<sp/>l_screenY<sp/>-<sp/>(calcY<sp/>+<sp/>(<sp/>l_screenY<sp/>/<sp/>2.0));</highlight></codeline>
<codeline lineno="3118"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3119"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>define_points.push_back(sf::Vertex(sf::Vector2f(calcX,<sp/>calcY),<sp/>sf::Color(255,255,0,255)));</highlight></codeline>
<codeline lineno="3120"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//<sp/>define_points.push_back(sf::Vertex(sf::Vector2f(((<sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>n].GetPointPosition(event_time)<sp/>/<sp/><sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>n<sp/>+<sp/>2].GetPointPosition(event_time))<sp/>*<sp/>l_scale)<sp/>+<sp/>(l_screenX<sp/>/<sp/>2),<sp/>l_screenY<sp/>-<sp/>(((<sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>n<sp/>+<sp/>1].GetPointPosition(event_time)<sp/>/<sp/><sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>n<sp/>+<sp/>2].GetPointPosition(event_time))<sp/>*<sp/>l_scale)<sp/>+<sp/>(l_screenY<sp/>/<sp/>2))),<sp/>sf::Color(255,255,0,255)));</highlight></codeline>
<codeline lineno="3121"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>n<sp/>&lt;&lt;<sp/>&quot;<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>((<sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>n].GetPointPosition(event_time)<sp/>/<sp/><sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>n<sp/>+<sp/>2].GetPointPosition(event_time))<sp/>*<sp/>l_scale)<sp/>+<sp/>(l_screenX<sp/>/<sp/>2)<sp/>&lt;&lt;<sp/>&quot;<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>l_screenY<sp/>-<sp/>(((<sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>n<sp/>+<sp/>1].GetPointPosition(event_time)<sp/>/<sp/><sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>n<sp/>+<sp/>2].GetPointPosition(event_time))<sp/>*<sp/>l_scale)<sp/>+<sp/>(l_screenY<sp/>/<sp/>2))<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="3122"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3123"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3125"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>for(int<sp/>n<sp/>=<sp/>l_ccpPointStart;<sp/>n<sp/>&lt;<sp/>l_ccpPointEnd;<sp/>n<sp/>=<sp/>n<sp/>+<sp/>num_dimensions[3])</highlight></codeline>
<codeline lineno="3126"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3127"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcX<sp/>=<sp/><sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>n].GetPointPosition(event_time);</highlight></codeline>
<codeline lineno="3128"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcY<sp/>=<sp/><sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>n+1].GetPointPosition(event_time);</highlight></codeline>
<codeline lineno="3129"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcXoffset<sp/>=<sp/><sp/>dimension_list[0].GetOffset(event_time);</highlight></codeline>
<codeline lineno="3130"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcYoffset<sp/>=<sp/><sp/>dimension_list[1].GetOffset(event_time);</highlight></codeline>
<codeline lineno="3131"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcXscale<sp/>=<sp/><sp/>dimension_list[0].GetScale(event_time);</highlight></codeline>
<codeline lineno="3132"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcYscale<sp/>=<sp/><sp/>dimension_list[1].GetScale(event_time);</highlight></codeline>
<codeline lineno="3133"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcX<sp/>=<sp/>calcX<sp/>+<sp/>calcXoffset;</highlight></codeline>
<codeline lineno="3134"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcY<sp/>=<sp/>calcY<sp/>+<sp/>calcYoffset;</highlight></codeline>
<codeline lineno="3135"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcX<sp/>=<sp/>calcX<sp/>*<sp/>calcXscale;</highlight></codeline>
<codeline lineno="3136"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcY<sp/>=<sp/>calcY<sp/>*<sp/>calcYscale;</highlight></codeline>
<codeline lineno="3137"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcX<sp/>=<sp/>calcX<sp/>+<sp/>(<sp/>l_screenX<sp/>/<sp/>2.0);</highlight></codeline>
<codeline lineno="3138"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcY<sp/>=<sp/>l_screenY<sp/>-<sp/>(calcY<sp/>+<sp/>(<sp/>l_screenY<sp/>/<sp/>2.0));</highlight></codeline>
<codeline lineno="3139"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3140"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>define_points.push_back(sf::Vertex(sf::Vector2f(calcX,<sp/>calcY),<sp/>sf::Color(128,255,128,255)));</highlight></codeline>
<codeline lineno="3141"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//<sp/>define_points.push_back(sf::Vertex(sf::Vector2f(((<sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>n].GetPointPosition(event_time)))+100,<sp/>l_screenY<sp/>-<sp/>(((<sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>n<sp/>+<sp/>1].GetPointPosition(event_time)))+100)),<sp/>sf::Color(128,255,128,255)));</highlight></codeline>
<codeline lineno="3142"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>n<sp/>&lt;&lt;<sp/>&quot;<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>((<sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>n].GetPointPosition(event_time)<sp/>/<sp/><sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>n<sp/>+<sp/>2].GetPointPosition(event_time))<sp/>*<sp/>l_scale)<sp/>+<sp/>(l_screenX<sp/>/<sp/>2)<sp/>&lt;&lt;<sp/>&quot;<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>l_screenY<sp/>-<sp/>(((<sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>n<sp/>+<sp/>1].GetPointPosition(event_time)<sp/>/<sp/><sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>n<sp/>+<sp/>2].GetPointPosition(event_time))<sp/>*<sp/>l_scale)<sp/>+<sp/>(l_screenY<sp/>/<sp/>2))<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="3143"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3144"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3146"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>for(int<sp/>n<sp/>=<sp/>l_spkPointStart;<sp/>n<sp/>&lt;<sp/>l_spkPointEnd;<sp/>n<sp/>=<sp/>n<sp/>+<sp/>num_dimensions[4])</highlight></codeline>
<codeline lineno="3147"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3148"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcX<sp/>=<sp/><sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>n].GetPointPosition(event_time);</highlight></codeline>
<codeline lineno="3149"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcY<sp/>=<sp/><sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>n+1].GetPointPosition(event_time);</highlight></codeline>
<codeline lineno="3150"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcXoffset<sp/>=<sp/><sp/>dimension_list[0].GetOffset(event_time);</highlight></codeline>
<codeline lineno="3151"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcYoffset<sp/>=<sp/><sp/>dimension_list[1].GetOffset(event_time);</highlight></codeline>
<codeline lineno="3152"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcXscale<sp/>=<sp/><sp/>dimension_list[0].GetScale(event_time);</highlight></codeline>
<codeline lineno="3153"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcYscale<sp/>=<sp/><sp/>dimension_list[1].GetScale(event_time);</highlight></codeline>
<codeline lineno="3154"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcX<sp/>=<sp/>calcX<sp/>+<sp/>calcXoffset;</highlight></codeline>
<codeline lineno="3155"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcY<sp/>=<sp/>calcY<sp/>+<sp/>calcYoffset;</highlight></codeline>
<codeline lineno="3156"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcX<sp/>=<sp/>calcX<sp/>*<sp/>calcXscale;</highlight></codeline>
<codeline lineno="3157"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcY<sp/>=<sp/>calcY<sp/>*<sp/>calcYscale;</highlight></codeline>
<codeline lineno="3158"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcX<sp/>=<sp/>calcX<sp/>+<sp/>(<sp/>l_screenX<sp/>/<sp/>2.0);</highlight></codeline>
<codeline lineno="3159"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcY<sp/>=<sp/>l_screenY<sp/>-<sp/>(calcY<sp/>+<sp/>(<sp/>l_screenY<sp/>/<sp/>2.0));</highlight></codeline>
<codeline lineno="3160"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3161"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>define_points.push_back(sf::Vertex(sf::Vector2f(calcX,<sp/>calcY),<sp/>sf::Color(255,0,0,255)));</highlight></codeline>
<codeline lineno="3162"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//<sp/>define_points.push_back(sf::Vertex(sf::Vector2f(((<sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>n].GetPointPosition(event_time)))+100,<sp/>l_screenY<sp/>-<sp/>(((<sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>n<sp/>+<sp/>1].GetPointPosition(event_time)))+100)),<sp/>sf::Color(255,0,0,255)));</highlight></codeline>
<codeline lineno="3163"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/><sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>n].GetPointPosition(event_time)<sp/>&lt;&lt;<sp/>&quot;:&quot;<sp/>&lt;&lt;<sp/><sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>n+1].GetPointPosition(event_time)<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;;</highlight></codeline>
<codeline lineno="3164"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3165"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3169"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>draw_lines.clear();</highlight></codeline>
<codeline lineno="3170"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>colourMax<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="3171"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>for(int<sp/>n2<sp/>=<sp/>0;<sp/>n2<sp/>&lt;=<sp/>l_orbPointEnd<sp/>-<sp/>l_orbPointStart;<sp/>n2<sp/>=<sp/>n2<sp/>+<sp/>num_dimensions[9])</highlight></codeline>
<codeline lineno="3172"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3173"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if(<sp/>orbital[n2].GetEnergy(event_time)<sp/>&gt;<sp/>colourMax)</highlight></codeline>
<codeline lineno="3174"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>colourMax<sp/>=<sp/><sp/>orbital[n2].GetEnergy(event_time);</highlight></codeline>
<codeline lineno="3175"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3176"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>colourMax<sp/>=<sp/>255.0<sp/>/<sp/>colourMax;</highlight></codeline>
<codeline lineno="3177"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>for(int<sp/>n<sp/>=<sp/>l_orbPointStart;<sp/>n<sp/>&lt;<sp/>l_orbPointEnd;<sp/>n<sp/>=<sp/>n<sp/>+<sp/>num_dimensions[9])</highlight></codeline>
<codeline lineno="3178"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3179"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if(<sp/>orbital[n<sp/>-<sp/>l_orbPointStart].GetEnergy(event_time)<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="3180"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3181"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcX<sp/>=<sp/>((2.0<sp/>/<sp/>(l_orbPointEnd<sp/>-<sp/>l_orbPointStart))<sp/>*<sp/>(n<sp/>-<sp/>l_orbPointStart))<sp/>-<sp/>1.0;</highlight></codeline>
<codeline lineno="3182"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//std::cout<sp/>&lt;&lt;<sp/>&quot;X:<sp/>&quot;<sp/>&lt;&lt;<sp/>calcX<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="3183"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcY<sp/>=<sp/><sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>n].GetPointPosition(event_time);</highlight></codeline>
<codeline lineno="3184"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcXoffset<sp/>=<sp/><sp/>dimension_list[0].GetOffset(event_time);</highlight></codeline>
<codeline lineno="3185"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcYoffset<sp/>=<sp/><sp/>dimension_list[1].GetOffset(event_time);</highlight></codeline>
<codeline lineno="3186"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcXscale<sp/>=<sp/><sp/>dimension_list[0].GetScale(event_time);</highlight></codeline>
<codeline lineno="3187"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcYscale<sp/>=<sp/><sp/>dimension_list[1].GetScale(event_time);</highlight></codeline>
<codeline lineno="3188"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcX<sp/>=<sp/>calcX<sp/>+<sp/>calcXoffset;</highlight></codeline>
<codeline lineno="3189"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcY<sp/>=<sp/>calcY<sp/>+<sp/>calcYoffset;</highlight></codeline>
<codeline lineno="3190"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcX<sp/>=<sp/>calcX<sp/>*<sp/>calcXscale;</highlight></codeline>
<codeline lineno="3191"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcY<sp/>=<sp/>calcY<sp/>*<sp/>calcYscale;</highlight></codeline>
<codeline lineno="3192"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcX<sp/>=<sp/>calcX<sp/>*<sp/>320.0;</highlight></codeline>
<codeline lineno="3193"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcY<sp/>=<sp/>calcY<sp/>*<sp/>50.0;</highlight></codeline>
<codeline lineno="3194"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>zloop<sp/>=<sp/>0;<sp/>zloop<sp/>&lt;<sp/>orbital_layers.size()<sp/>-<sp/>1;<sp/>zloop++)</highlight></codeline>
<codeline lineno="3195"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3196"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if<sp/>((n<sp/>-<sp/>l_orbPointStart)<sp/>&gt;=<sp/>orbital_layers[zloop]<sp/>&amp;&amp;<sp/>(n<sp/>-<sp/>l_orbPointStart)<sp/>&lt;<sp/>orbital_layers[zloop<sp/>+<sp/>1])</highlight></codeline>
<codeline lineno="3197"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3198"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcX<sp/>+=<sp/>(zloop<sp/>*<sp/>10);</highlight></codeline>
<codeline lineno="3199"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3200"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3201"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcX<sp/>=<sp/>calcX<sp/>+<sp/>(<sp/>l_screenX<sp/>/<sp/>2.0);</highlight></codeline>
<codeline lineno="3202"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calcY<sp/>=<sp/>l_screenY<sp/>-<sp/>(calcY<sp/>+<sp/>(<sp/>l_screenY<sp/>/<sp/>2.0));</highlight></codeline>
<codeline lineno="3203"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>colourY<sp/>=<sp/>int(colourMax<sp/>*<sp/><sp/>orbital[n<sp/>-<sp/>l_orbPointStart].GetEnergy(event_time));</highlight></codeline>
<codeline lineno="3204"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3205"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>draw_lines.push_back(sf::Vertex(sf::Vector2f(calcX,<sp/>l_screenY<sp/>-<sp/>(<sp/>l_screenY<sp/>/<sp/>2)),<sp/>sf::Color(0,0,255,255)));</highlight></codeline>
<codeline lineno="3206"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>draw_lines.push_back(sf::Vertex(sf::Vector2f(calcX,<sp/>calcY),<sp/>sf::Color(int((<sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>n].getPointPosition()+1)*127),colourY,255,255)));</highlight></codeline>
<codeline lineno="3207"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//std::cout<sp/>&lt;&lt;<sp/>&quot;X:<sp/>&quot;<sp/>&lt;&lt;<sp/>calcX<sp/>&lt;&lt;<sp/>&quot;<sp/><sp/>Y:<sp/>&quot;<sp/>&lt;&lt;<sp/>calcY<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="3208"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>zloop<sp/>=<sp/>0;<sp/>zloop<sp/>&lt;<sp/>OrbConnectionList.size();<sp/>zloop++<sp/>)</highlight></codeline>
<codeline lineno="3209"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3210"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if<sp/>(n<sp/>-<sp/>l_orbPointStart<sp/>==<sp/>OrbConnectionList[zloop].OrbOne<sp/>&amp;&amp;<sp/><sp/>orbital[OrbConnectionList[zloop].OrbOne].GetEnergy(event_time)<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="3211"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3212"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>OrbConnectionList[zloop].OrbOnePosition<sp/>=<sp/>calcX;</highlight></codeline>
<codeline lineno="3213"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3214"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if<sp/>(n<sp/>-<sp/>l_orbPointStart<sp/>==<sp/>OrbConnectionList[zloop].OrbTwo<sp/>&amp;&amp;<sp/><sp/>orbital[OrbConnectionList[zloop].OrbTwo].GetEnergy(event_time)<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="3215"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3216"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>OrbConnectionList[zloop].OrbTwoPosition<sp/>=<sp/>calcX;</highlight></codeline>
<codeline lineno="3217"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3218"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3219"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3220"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3221"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if(pauseLoop<sp/>%<sp/>1<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="3222"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3223"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>double<sp/>connectionLength<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="3224"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>OrbConnectionList.size();<sp/>n++<sp/>)</highlight></codeline>
<codeline lineno="3225"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3226"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>connectionLength<sp/>=<sp/>OrbConnectionList[n].OrbTwoPosition<sp/>-<sp/>OrbConnectionList[n].OrbOnePosition;</highlight></codeline>
<codeline lineno="3227"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>z<sp/>=<sp/>n<sp/>+<sp/>1;<sp/>z<sp/>&lt;<sp/>OrbConnectionList.size();<sp/>z++<sp/>)</highlight></codeline>
<codeline lineno="3228"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3229"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if(connectionLength<sp/>&gt;<sp/>OrbConnectionList[z].OrbTwoPosition<sp/>-<sp/>OrbConnectionList[z].OrbOnePosition)</highlight></codeline>
<codeline lineno="3230"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3231"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>iter_swap(OrbConnectionList.begin()<sp/>+<sp/>(n),<sp/>OrbConnectionList.begin()<sp/>+<sp/>(z));</highlight></codeline>
<codeline lineno="3232"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3233"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3234"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3235"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>double<sp/>xx2<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="3236"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>OrbConnectionList.size();<sp/>n++<sp/>)</highlight></codeline>
<codeline lineno="3237"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3238"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>xx2<sp/>=<sp/>OrbConnectionList[n].OrbTwoPosition;</highlight></codeline>
<codeline lineno="3239"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>z<sp/>=<sp/>n<sp/>+<sp/>1;<sp/>z<sp/>&lt;<sp/>OrbConnectionList.size();<sp/>z++<sp/>)</highlight></codeline>
<codeline lineno="3240"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3241"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if(OrbConnectionList[z].OrbOnePosition<sp/>&gt;=<sp/>xx2)</highlight></codeline>
<codeline lineno="3242"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3243"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>xx2<sp/>=<sp/>OrbConnectionList[z].OrbTwoPosition;</highlight></codeline>
<codeline lineno="3244"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>OrbConnectionList.insert(OrbConnectionList.begin()<sp/>+<sp/>(n<sp/>+<sp/>1),<sp/>OrbConnectionList[z]);</highlight></codeline>
<codeline lineno="3245"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>iter_swap(OrbConnectionList.begin()<sp/>+<sp/>(n<sp/>+<sp/>1),<sp/>OrbConnectionList.begin()<sp/>+<sp/>(z<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="3246"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>OrbConnectionList.erase(OrbConnectionList.begin()<sp/>+<sp/>(z<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="3247"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>n++;</highlight></codeline>
<codeline lineno="3248"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3249"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3250"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3251"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3252"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>int<sp/>yy<sp/>=<sp/>350;</highlight></codeline>
<codeline lineno="3253"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>double<sp/>xx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3254"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>OrbConnectionList.size();<sp/>n++<sp/>)</highlight></codeline>
<codeline lineno="3255"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3256"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if<sp/>(OrbConnectionList[n].OrbOnePosition<sp/>&gt;<sp/>0.0<sp/>&amp;&amp;<sp/>OrbConnectionList[n].OrbTwoPosition<sp/>&gt;<sp/>0.0<sp/>&amp;&amp;<sp/><sp/>orbital[OrbConnectionList[n].OrbOne].GetEnergy(event_time)<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/><sp/>orbital[OrbConnectionList[n].OrbTwo].GetEnergy(event_time)<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="3257"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3258"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if(yy<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="3259"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3260"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>draw_lines.push_back(sf::Vertex(sf::Vector2f(OrbConnectionList[n].OrbOnePosition,<sp/>yy),<sp/>sf::Color(<sp/>orbital[OrbConnectionList[n].OrbOne].GetEnergy(event_time),OrbConnectionList[n].OrbConnectionStrength,255,255)));</highlight></codeline>
<codeline lineno="3261"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>draw_lines.push_back(sf::Vertex(sf::Vector2f(OrbConnectionList[n].OrbTwoPosition,<sp/>yy),<sp/>sf::Color(<sp/>orbital[OrbConnectionList[n].OrbTwo].GetEnergy(event_time),OrbConnectionList[n].OrbConnectionStrength,255,255)));</highlight></codeline>
<codeline lineno="3262"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3263"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if<sp/>(OrbConnectionList[n].OrbOnePosition<sp/>&gt;=<sp/>xx)</highlight></codeline>
<codeline lineno="3264"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3265"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>xx<sp/>=<sp/>OrbConnectionList[n].OrbTwoPosition;</highlight></codeline>
<codeline lineno="3266"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3267"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="3268"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3269"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>xx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3270"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>yy--;</highlight></codeline>
<codeline lineno="3271"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3272"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3273"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3274"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3275"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3277"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>for(int<sp/>n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>l_LineEnd;<sp/>n++)</highlight></codeline>
<codeline lineno="3278"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3279"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>draw_lines.push_back(sf::Vertex(sf::Vector2f((<sp/>line_list[n].GetLineX1(event_time)<sp/>*<sp/>l_scale)<sp/>+<sp/>(l_screenX<sp/>/<sp/>2),<sp/>l_screenY<sp/>-<sp/>((<sp/>line_list[n].GetLineY1(event_time)<sp/>*<sp/>l_scale)<sp/>+<sp/>(l_screenY<sp/>/<sp/>2))),<sp/>sf::Color::Color(255<sp/>-<sp/>(int(255<sp/>/<sp/>8)<sp/>*<sp/><sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>n].GetXYTTL(event_time)),0,0,255)));</highlight></codeline>
<codeline lineno="3280"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>draw_lines.push_back(sf::Vertex(sf::Vector2f((<sp/>line_list[n].GetLineX2(event_time)<sp/>*<sp/>l_scale)<sp/>+<sp/>(l_screenX<sp/>/<sp/>2),<sp/>l_screenY<sp/>-<sp/>((<sp/>line_list[n].GetLineY2(event_time)<sp/>*<sp/>l_scale)<sp/>+<sp/>(l_screenY<sp/>/<sp/>2))),<sp/>sf::Color::Color(255<sp/>-<sp/>(int(255<sp/>/<sp/>8)<sp/>*<sp/><sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>n].GetXYTTL(event_time)),0,0,255)));</highlight></codeline>
<codeline lineno="3281"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3282"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>window.clear();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window.pushGLStates();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>window.draw(&amp;<sp/>drawQuads[0],<sp/><sp/>drawQuads.size(),<sp/>sf::Quads);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window.popGLStates();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window.pushGLStates();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>window.draw(&amp;<sp/>define_points[0],<sp/><sp/>define_points.size(),<sp/>sf::Points);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window.popGLStates();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window.pushGLStates();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>window.draw(&amp;<sp/>draw_lines[0],<sp/><sp/>draw_lines.size(),<sp/>sf::Lines);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window.popGLStates();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Group<sp/>quads</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>draw_rectangles[1].setPosition(sf::Vector2f(((l_screenX<sp/>/<sp/>2<sp/>)<sp/>-<sp/>(20<sp/>/<sp/>2))<sp/>+<sp/>(25<sp/>*<sp/><sp/>toggle),<sp/>30));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3300"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>for(int<sp/>loopRectangles<sp/>=<sp/>0;<sp/>loopRectangles<sp/>&lt;<sp/>int(<sp/>draw_rectangles.size());<sp/>loopRectangles++)</highlight></codeline>
<codeline lineno="3301"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3302"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>draw_rectangles[loopRectangles].setPosition(<sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>loopRectangles<sp/>*<sp/>2.0].getPointPosition(),<sp/><sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>(loopRectangles<sp/>*<sp/>2.0)<sp/>+<sp/>1.0].GetPointPosition(event_time));</highlight></codeline>
<codeline lineno="3303"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window.pushGLStates();</highlight></codeline>
<codeline lineno="3304"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>window.draw(<sp/>draw_rectangles[loopRectangles]);</highlight></codeline>
<codeline lineno="3305"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window.popGLStates();</highlight></codeline>
<codeline lineno="3306"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3307"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3308"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>for(int<sp/>loopText<sp/>=<sp/>1;<sp/>loopText<sp/>&lt;<sp/>int(<sp/>draw_text.size());<sp/>loopText++)</highlight></codeline>
<codeline lineno="3309"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3310"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>draw_text[loopText].SetPosition(event_time,<sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>(loopText<sp/>*<sp/>2.0)<sp/>+<sp/>(int(<sp/>draw_rectangles.size())<sp/>*<sp/>2.0)].GetPointPosition(event_time),<sp/><sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>(loopText<sp/>*<sp/>2.0)<sp/>+<sp/>1.0<sp/>+<sp/>(int(<sp/>draw_rectangles.size())<sp/>*<sp/>2.0)].GetPointPosition(event_time));</highlight></codeline>
<codeline lineno="3311"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window.pushGLStates();</highlight></codeline>
<codeline lineno="3312"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>window.draw(<sp/>draw_text[loopText]);</highlight></codeline>
<codeline lineno="3313"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window.popGLStates();</highlight></codeline>
<codeline lineno="3314"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;X:&quot;<sp/>&lt;&lt;<sp/><sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>(loopText<sp/>*<sp/>2)<sp/>+<sp/>(int(<sp/>draw_rectangles.size())*2)].GetPointPosition(event_time)<sp/>&lt;&lt;<sp/>&quot;<sp/>Y:&quot;<sp/>&lt;&lt;<sp/><sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>(loopText<sp/>*<sp/>2)<sp/>+<sp/>1<sp/>+<sp/>(int(<sp/>draw_rectangles.size())*2)].GetPointPosition(event_time)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="3315"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3316"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3317"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Continue<sp/>interaction<sp/>until<sp/>window<sp/>closed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3321"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a65b7a900454637a30df23b1044e07e07" kindref="member">render_window_interactor</ref>-&gt;Start();</highlight></codeline>
<codeline lineno="3322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/><sp/><sp/>caerDeviceDataStop(usb_handle);</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3325"><highlight class="normal"><sp/><sp/><sp/><sp/>caerDeviceClose(&amp;usb_handle);</highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3327"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Dynap-se<sp/>shutdown<sp/>successful.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Empty<sp/>vectors<sp/>before<sp/>exiting<sp/>(in<sp/>reverse<sp/>of<sp/>creation)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>for(int<sp/>dloop<sp/>=<sp/>int(<sp/>current_universe_pointer-&gt;GetPoints(event_time).size());<sp/>dloop<sp/>&gt;<sp/>0;<sp/>--dloop)<sp/>delete<sp/>(&amp;<sp/>current_universe_pointer-&gt;GetPoint(event_time,<sp/>dloop<sp/>-<sp/>1]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3330"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Clearing<sp/>memory...&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="3331"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_XDECREF(pFunc);</highlight></codeline>
<codeline lineno="3332"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_DECREF(pModule);</highlight></codeline>
<codeline lineno="3333"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_Finalize();</highlight></codeline>
<codeline lineno="3334"><highlight class="normal"><sp/><sp/><sp/><sp/>orbital.clear();</highlight></codeline>
<codeline lineno="3335"><highlight class="normal"><sp/><sp/><sp/><sp/>dendrite.clear();</highlight></codeline>
<codeline lineno="3336"><highlight class="normal"><sp/><sp/><sp/><sp/>neuron.clear();</highlight></codeline>
<codeline lineno="3337"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_spike" kindref="compound">Spike</ref>.clear();</highlight></codeline>
<codeline lineno="3338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>point_list.clear();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3339"><highlight class="normal"><sp/><sp/><sp/><sp/>matter_list.clear();</highlight></codeline>
<codeline lineno="3340"><highlight class="normal"><sp/><sp/><sp/><sp/>composite_forceparticle_list.clear();</highlight></codeline>
<codeline lineno="3341"><highlight class="normal"><sp/><sp/><sp/><sp/>elementary_force_list.clear();</highlight></codeline>
<codeline lineno="3342"><highlight class="normal"><sp/><sp/><sp/><sp/>elementary_particle_list.clear();</highlight></codeline>
<codeline lineno="3343"><highlight class="normal"><sp/><sp/><sp/><sp/>dimension_list.clear();</highlight></codeline>
<codeline lineno="3344"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_brain_harmonics_8cc_1a602d3f70549216866d35be56a17fa06e" kindref="member">universe_list</ref>.clear();</highlight></codeline>
<codeline lineno="3345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_SUCCESS;</highlight></codeline>
<codeline lineno="3347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3348"><highlight class="normal"></highlight></codeline>
<codeline lineno="3349"><highlight class="normal">vtkSmartPointer&lt;vtkPolyData&gt;<sp/>TransformBack(vtkSmartPointer&lt;vtkPoints&gt;<sp/>pt,<sp/>vtkSmartPointer&lt;vtkPolyData&gt;<sp/>pd)</highlight></codeline>
<codeline lineno="3350"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>reconstructed<sp/>surface<sp/>is<sp/>transformed<sp/>back<sp/>to<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>original<sp/>points<sp/>are.<sp/>(Hopefully)<sp/>it<sp/>is<sp/>only<sp/>a<sp/>similarity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>transformation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1.<sp/>Get<sp/>bounding<sp/>box<sp/>of<sp/>pt,<sp/>get<sp/>its<sp/>minimum<sp/>corner<sp/>(left,<sp/>bottom,<sp/>least-z),<sp/>at<sp/>c0,<sp/>pt_bounds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2.<sp/>Get<sp/>bounding<sp/>box<sp/>of<sp/>surface<sp/>pd,<sp/>get<sp/>its<sp/>minimum<sp/>corner<sp/>(left,<sp/>bottom,<sp/>least-z),<sp/>at<sp/>c1,<sp/>pd_bounds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3.<sp/>compute<sp/>scale<sp/>as:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>scale<sp/>=<sp/>(pt_bounds[1]<sp/>-<sp/>pt_bounds[0])/(pd_bounds[1]<sp/>-<sp/>pd_bounds[0]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>4.<sp/>transform<sp/>the<sp/>surface<sp/>by<sp/>T<sp/>:=<sp/>T(pt_bounds[0],<sp/>[2],<sp/>[4]).S(scale).T(-pd_bounds[0],<sp/>-[2],<sp/>-[4])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pt_bounds[6];<sp/><sp/></highlight><highlight class="comment">//<sp/>(xmin,xmax,<sp/>ymin,ymax,<sp/>zmin,zmax)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3368"><highlight class="normal"><sp/><sp/><sp/><sp/>pt-&gt;GetBounds(pt_bounds);</highlight></codeline>
<codeline lineno="3369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pd_bounds[6];<sp/><sp/></highlight><highlight class="comment">//<sp/>(xmin,xmax,<sp/>ymin,ymax,<sp/>zmin,zmax)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3373"><highlight class="normal"><sp/><sp/><sp/><sp/>pd-&gt;GetBounds(pd_bounds);</highlight></codeline>
<codeline lineno="3374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>test,<sp/>make<sp/>sure<sp/>it<sp/>is<sp/>isotropic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>std::cout&lt;&lt;(pt_bounds[1]<sp/>-<sp/>pt_bounds[0])/(pd_bounds[1]<sp/>-<sp/>pd_bounds[0])&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>std::cout&lt;&lt;(pt_bounds[3]<sp/>-<sp/>pt_bounds[2])/(pd_bounds[3]<sp/>-<sp/>pd_bounds[2])&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>std::cout&lt;&lt;(pt_bounds[5]<sp/>-<sp/>pt_bounds[4])/(pd_bounds[5]<sp/>-<sp/>pd_bounds[4])&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="glad_8h_1a281421b881aa7a1266842b73a3bc7655" kindref="member">scale</ref><sp/>=<sp/>(pt_bounds[1]<sp/>-<sp/>pt_bounds[0])/(pd_bounds[1]<sp/>-<sp/>pd_bounds[0]);</highlight></codeline>
<codeline lineno="3384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>4.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3387"><highlight class="normal"><sp/><sp/><sp/><sp/>vtkSmartPointer&lt;vtkTransform&gt;<sp/>transp<sp/>=<sp/>vtkSmartPointer&lt;vtkTransform&gt;::New();</highlight></codeline>
<codeline lineno="3388"><highlight class="normal"><sp/><sp/><sp/><sp/>transp-&gt;Translate(pt_bounds[0],<sp/>pt_bounds[2],<sp/>pt_bounds[4]);</highlight></codeline>
<codeline lineno="3389"><highlight class="normal"><sp/><sp/><sp/><sp/>transp-&gt;Scale(<ref refid="glad_8h_1a281421b881aa7a1266842b73a3bc7655" kindref="member">scale</ref>,<sp/><ref refid="glad_8h_1a281421b881aa7a1266842b73a3bc7655" kindref="member">scale</ref>,<sp/><ref refid="glad_8h_1a281421b881aa7a1266842b73a3bc7655" kindref="member">scale</ref>);</highlight></codeline>
<codeline lineno="3390"><highlight class="normal"><sp/><sp/><sp/><sp/>transp-&gt;Translate(-<sp/>pd_bounds[0],<sp/>-<sp/>pd_bounds[2],<sp/>-<sp/>pd_bounds[4]);</highlight></codeline>
<codeline lineno="3391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3392"><highlight class="normal"><sp/><sp/><sp/><sp/>vtkSmartPointer&lt;vtkTransformPolyDataFilter&gt;<sp/>tpd<sp/>=<sp/>vtkSmartPointer&lt;vtkTransformPolyDataFilter&gt;::New();</highlight></codeline>
<codeline lineno="3393"><highlight class="normal"><sp/><sp/><sp/><sp/>tpd-&gt;SetInputData(pd);</highlight></codeline>
<codeline lineno="3394"><highlight class="normal"><sp/><sp/><sp/><sp/>tpd-&gt;SetTransform(transp);</highlight></codeline>
<codeline lineno="3395"><highlight class="normal"><sp/><sp/><sp/><sp/>tpd-&gt;Update();</highlight></codeline>
<codeline lineno="3396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tpd-&gt;GetOutput();</highlight></codeline>
<codeline lineno="3399"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="BrainHarmonics/BrainHarmonics.cc"/>
  </compounddef>
</doxygen>
