<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="class_cognitive_network" kind="class" language="C++" prot="public">
    <compoundname>CognitiveNetwork</compoundname>
    <basecompoundref refid="class_universe" prot="public" virt="non-virtual">Universe</basecompoundref>
    <derivedcompoundref refid="class_cognitive_input" prot="public" virt="non-virtual">CognitiveInput</derivedcompoundref>
    <derivedcompoundref refid="class_cognitive_output" prot="public" virt="non-virtual">CognitiveOutput</derivedcompoundref>
    <derivedcompoundref refid="class_interneuron_space" prot="public" virt="non-virtual">InterneuronSpace</derivedcompoundref>
    <derivedcompoundref refid="class_myelin_sheath" prot="public" virt="non-virtual">MyelinSheath</derivedcompoundref>
    <derivedcompoundref refid="class_neuron" prot="public" virt="non-virtual">Neuron</derivedcompoundref>
    <derivedcompoundref refid="class_neurotransmitter" prot="public" virt="non-virtual">Neurotransmitter</derivedcompoundref>
    <derivedcompoundref refid="class_orbital" prot="public" virt="non-virtual">Orbital</derivedcompoundref>
    <derivedcompoundref refid="class_spike" prot="public" virt="non-virtual">Spike</derivedcompoundref>
    <derivedcompoundref refid="class_synapse" prot="public" virt="non-virtual">Synapse</derivedcompoundref>
    <includes refid="cognitivenetwork_8h" local="no">cognitivenetwork.h</includes>
    <innerclass refid="struct_cognitive_network_1_1_orbital_connection" prot="private">CognitiveNetwork::OrbitalConnection</innerclass>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_cognitive_network_1a79f0541fde6dd50f8e87f3f46d849b95" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_dimension" kindref="compound">Dimension</ref> * &gt;</type>
        <definition>std::vector&lt;Dimension*&gt; CognitiveNetwork::dimension_list</definition>
        <argsstring></argsstring>
        <name>dimension_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="297" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="297" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cognitive_network_1a5a46cefb188858fdc023df3abbac0a47" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt;CognitiveNetwork*&gt; CognitiveNetwork::cognitiveinput_list</definition>
        <argsstring></argsstring>
        <name>cognitiveinput_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="298" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="298" bodyend="-1"/>
        <referencedby refid="class_cognitive_network_1a05dccc7759456df13a732899a8f1f4c4" compoundref="cognitivenetwork_8cc" startline="146" endline="193">Update</referencedby>
        <referencedby refid="class_cognitive_network_1add96197c3dc51d94d06edb480fbc4a38" compoundref="cognitivenetwork_8cc" startline="197" endline="206">CreateCognitiveInput</referencedby>
        <referencedby refid="class_cognitive_network_1a0833f7b587f14e0c0778661a56bce957" compoundref="cognitivenetwork_8cc" startline="208" endline="227">CreateCognitiveInputs</referencedby>
        <referencedby refid="class_cognitive_network_1a6af57693982286ac6a6831ca3010b760" compoundref="cognitivenetwork_8cc" startline="250" endline="259">AddCognitiveInput</referencedby>
        <referencedby refid="class_cognitive_network_1afc92c9b378e7e0873d0164bc4f2635df" compoundref="cognitivenetwork_8cc" startline="261" endline="280">AddCognitiveInputs</referencedby>
        <referencedby refid="class_cognitive_network_1a2ff68a0d11cdb29af2f05a69a11911a4" compoundref="cognitivenetwork_8cc" startline="294" endline="297">GetCognitiveInput</referencedby>
        <referencedby refid="class_cognitive_network_1a92b896643b881e4030401e0f7fd256bf" compoundref="cognitivenetwork_8cc" startline="299" endline="302">GetCognitiveInputs</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_cognitive_network_1a7a57ad82736c0d8b03e7607b5c603b00" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt;CognitiveNetwork*&gt; CognitiveNetwork::cognitiveoutput_list</definition>
        <argsstring></argsstring>
        <name>cognitiveoutput_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="299" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="299" bodyend="-1"/>
        <referencedby refid="class_cognitive_network_1a05dccc7759456df13a732899a8f1f4c4" compoundref="cognitivenetwork_8cc" startline="146" endline="193">Update</referencedby>
        <referencedby refid="class_cognitive_network_1ac220350499bd323bd8f24ff0050cd60d" compoundref="cognitivenetwork_8cc" startline="305" endline="314">CreateCognitiveOutput</referencedby>
        <referencedby refid="class_cognitive_network_1a002df11f4389a122fc140c186ab665c9" compoundref="cognitivenetwork_8cc" startline="316" endline="335">CreateCognitiveOutputs</referencedby>
        <referencedby refid="class_cognitive_network_1a8a9b533b89b7d62b21cf41bdf957ef14" compoundref="cognitivenetwork_8cc" startline="358" endline="367">AddCognitiveOutput</referencedby>
        <referencedby refid="class_cognitive_network_1a6299433811b76f0ccb97cf69fe9bfb66" compoundref="cognitivenetwork_8cc" startline="369" endline="388">AddCognitiveOutputs</referencedby>
        <referencedby refid="class_cognitive_network_1a947fa4c50fecc4008d2bcfc96a272ffc" compoundref="cognitivenetwork_8cc" startline="402" endline="405">GetCognitiveOutput</referencedby>
        <referencedby refid="class_cognitive_network_1acdf847165899c36d6d9d6843ecc27218" compoundref="cognitivenetwork_8cc" startline="407" endline="410">GetCognitiveOutputs</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_cognitive_network_1aaf69f6e0cc0084eb748ef1540c773f85" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt;CognitiveNetwork*&gt; CognitiveNetwork::interneuronspace_list</definition>
        <argsstring></argsstring>
        <name>interneuronspace_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="300" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="300" bodyend="-1"/>
        <referencedby refid="class_cognitive_network_1a05dccc7759456df13a732899a8f1f4c4" compoundref="cognitivenetwork_8cc" startline="146" endline="193">Update</referencedby>
        <referencedby refid="class_cognitive_network_1a6af57693982286ac6a6831ca3010b760" compoundref="cognitivenetwork_8cc" startline="250" endline="259">AddCognitiveInput</referencedby>
        <referencedby refid="class_cognitive_network_1a8a9b533b89b7d62b21cf41bdf957ef14" compoundref="cognitivenetwork_8cc" startline="358" endline="367">AddCognitiveOutput</referencedby>
        <referencedby refid="class_cognitive_network_1af0dc86c7905baae6f2b5efb3a65b8819" compoundref="cognitivenetwork_8cc" startline="415" endline="424">CreateInterneuronSpace</referencedby>
        <referencedby refid="class_cognitive_network_1a2d671451d659079d5efb5cda10e48827" compoundref="cognitivenetwork_8cc" startline="426" endline="445">CreateInterneuronSpaces</referencedby>
        <referencedby refid="class_cognitive_network_1ac6a7e01f097d0cb6434eb8fa7640c214" compoundref="cognitivenetwork_8cc" startline="468" endline="477">AddInterneuronSpace</referencedby>
        <referencedby refid="class_cognitive_network_1aeafe16b9f44ae1316c072a85e726ee83" compoundref="cognitivenetwork_8cc" startline="479" endline="498">AddInterneuronSpaces</referencedby>
        <referencedby refid="class_cognitive_network_1a0119d61e86ea6b84ad7f69f88d59d008" compoundref="cognitivenetwork_8cc" startline="512" endline="515">GetInterneuronSpace</referencedby>
        <referencedby refid="class_cognitive_network_1a4daf966882d527b784bd359794ad39ca" compoundref="cognitivenetwork_8cc" startline="517" endline="520">GetInterneuronSpaces</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_cognitive_network_1a263efd10857d5507c0e889e48f7329fe" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt;CognitiveNetwork*&gt; CognitiveNetwork::orbital_list</definition>
        <argsstring></argsstring>
        <name>orbital_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="301" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="301" bodyend="-1"/>
        <referencedby refid="class_cognitive_network_1a05dccc7759456df13a732899a8f1f4c4" compoundref="cognitivenetwork_8cc" startline="146" endline="193">Update</referencedby>
        <referencedby refid="class_cognitive_network_1a5e0a782afc45d75d57fef91dd5513546" compoundref="cognitivenetwork_8cc" startline="523" endline="532">CreateOrbital</referencedby>
        <referencedby refid="class_cognitive_network_1a46d4189cf3e6b9af6190abe7b79539b4" compoundref="cognitivenetwork_8cc" startline="534" endline="553">CreateOrbitals</referencedby>
        <referencedby refid="class_cognitive_network_1ab6caa285c25568259ae935cf9e746af4" compoundref="cognitivenetwork_8cc" startline="576" endline="585">AddOrbital</referencedby>
        <referencedby refid="class_cognitive_network_1a9dbf4a9fab3b806d2bd6b2701b7a9548" compoundref="cognitivenetwork_8cc" startline="587" endline="606">AddOrbitals</referencedby>
        <referencedby refid="class_cognitive_network_1a69655ef1e12bac5f74c2eb85c72720f4" compoundref="cognitivenetwork_8cc" startline="620" endline="623">GetOrbital</referencedby>
        <referencedby refid="class_cognitive_network_1aa21d28ffc3b507236a7dad64663f6c42" compoundref="cognitivenetwork_8cc" startline="625" endline="628">GetOrbitals</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_cognitive_network_1abbb9ff97e1b9cd61602d95f44c30132e" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt;CognitiveNetwork*&gt; CognitiveNetwork::neuron_list</definition>
        <argsstring></argsstring>
        <name>neuron_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="302" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="302" bodyend="-1"/>
        <referencedby refid="class_cognitive_network_1a05dccc7759456df13a732899a8f1f4c4" compoundref="cognitivenetwork_8cc" startline="146" endline="193">Update</referencedby>
        <referencedby refid="class_cognitive_network_1a9b5fcaf824d5b587775e7c44630affe6" compoundref="cognitivenetwork_8cc" startline="632" endline="641">CreateNeuron</referencedby>
        <referencedby refid="class_cognitive_network_1af9b2a136584c962e44114a7ee3d2804a" compoundref="cognitivenetwork_8cc" startline="643" endline="667">CreateNeurons</referencedby>
        <referencedby refid="class_cognitive_network_1a8457342637fde2d814c54942c3367416" compoundref="cognitivenetwork_8cc" startline="690" endline="699">AddNeuron</referencedby>
        <referencedby refid="class_cognitive_network_1ade928e3355db97d3c5d99501ff4a3b69" compoundref="cognitivenetwork_8cc" startline="701" endline="720">AddNeurons</referencedby>
        <referencedby refid="class_cognitive_network_1ac12f0af92d878d45dca7303dc065c383" compoundref="cognitivenetwork_8cc" startline="734" endline="737">GetNeuron</referencedby>
        <referencedby refid="class_cognitive_network_1a0e9e37e976a7ca5ee625e2d7b36fd7ea" compoundref="cognitivenetwork_8cc" startline="739" endline="742">GetNeurons</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_cognitive_network_1a9218de9d63b10b313df289d1312c81e0" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt;CognitiveNetwork*&gt; CognitiveNetwork::synapse_list</definition>
        <argsstring></argsstring>
        <name>synapse_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="303" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="303" bodyend="-1"/>
        <referencedby refid="class_cognitive_network_1a05dccc7759456df13a732899a8f1f4c4" compoundref="cognitivenetwork_8cc" startline="146" endline="193">Update</referencedby>
        <referencedby refid="class_cognitive_network_1ade8e9295b35790b136dca9084a1b7aa9" compoundref="cognitivenetwork_8cc" startline="745" endline="754">CreateSynapse</referencedby>
        <referencedby refid="class_cognitive_network_1ae6ae16f401e7699032ac9459132763c0" compoundref="cognitivenetwork_8cc" startline="756" endline="775">CreateSynapses</referencedby>
        <referencedby refid="class_cognitive_network_1a4bfdcd2affdfe2adb2da68dba60dff0e" compoundref="cognitivenetwork_8cc" startline="798" endline="807">AddSynapse</referencedby>
        <referencedby refid="class_cognitive_network_1a09d9e01cbd8596af7fac626ce2753643" compoundref="cognitivenetwork_8cc" startline="809" endline="828">AddSynapses</referencedby>
        <referencedby refid="class_cognitive_network_1a1944aaa13667bc267e6ef44892da969d" compoundref="cognitivenetwork_8cc" startline="842" endline="845">GetSynapse</referencedby>
        <referencedby refid="class_cognitive_network_1aa3376f2e7aed9639c2b5ba27aa6fb314" compoundref="cognitivenetwork_8cc" startline="847" endline="850">GetSynapses</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_cognitive_network_1a7018bee3dbf538c3d0c81a64aa002ab8" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt;CognitiveNetwork*&gt; CognitiveNetwork::neurotransmitter_list</definition>
        <argsstring></argsstring>
        <name>neurotransmitter_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="304" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="304" bodyend="-1"/>
        <referencedby refid="class_cognitive_network_1a05dccc7759456df13a732899a8f1f4c4" compoundref="cognitivenetwork_8cc" startline="146" endline="193">Update</referencedby>
        <referencedby refid="class_cognitive_network_1a53d1047ae3ec721540b64b05abe01559" compoundref="cognitivenetwork_8cc" startline="853" endline="862">CreateNeurotransmitter</referencedby>
        <referencedby refid="class_cognitive_network_1ad877c495c9efdb582613a5af8d854ac3" compoundref="cognitivenetwork_8cc" startline="864" endline="883">CreateNeurotransmitters</referencedby>
        <referencedby refid="class_cognitive_network_1ab80ffdc75ad4754463c356d36fb81ab4" compoundref="cognitivenetwork_8cc" startline="906" endline="915">AddNeurotransmitter</referencedby>
        <referencedby refid="class_cognitive_network_1a085f61ab94b71406a0a5e11d789ed69c" compoundref="cognitivenetwork_8cc" startline="917" endline="936">AddNeurotransmitters</referencedby>
        <referencedby refid="class_cognitive_network_1a85890c201376061b1ffbe8fdfc1a8633" compoundref="cognitivenetwork_8cc" startline="950" endline="953">GetNeurotransmitter</referencedby>
        <referencedby refid="class_cognitive_network_1ac56b1585864b372c8897dcb5720d00a7" compoundref="cognitivenetwork_8cc" startline="955" endline="958">GetNeurotransmitters</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_cognitive_network_1a45bdf5b9f1ccc0ed1ad32e2a6b9e7dab" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int CognitiveNetwork::cognitivenetwork_type</definition>
        <argsstring></argsstring>
        <name>cognitivenetwork_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="307" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="307" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cognitive_network_1ad6e12ec54ab456f6fad0ac33ee5836d3" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int CognitiveNetwork::m_Tag</definition>
        <argsstring></argsstring>
        <name>m_Tag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="308" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="308" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cognitive_network_1a2d5ffaceb2676eeb45ed2879dc9be9ff" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double CognitiveNetwork::object_size</definition>
        <argsstring></argsstring>
        <name>object_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="309" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="309" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cognitive_network_1a79cf90e648303fbae25128053e1e74d2" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double CognitiveNetwork::m_RestingPotential</definition>
        <argsstring></argsstring>
        <name>m_RestingPotential</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="310" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="310" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cognitive_network_1a1bfe6f5f289e2fe876f3f7ccd459cbc6" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool CognitiveNetwork::object_disabled</definition>
        <argsstring></argsstring>
        <name>object_disabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="311" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="311" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cognitive_network_1ae9c10ceb2a44c5458f93d4e66d02b245" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool CognitiveNetwork::object_initialised</definition>
        <argsstring></argsstring>
        <name>object_initialised</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="312" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="312" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cognitive_network_1a00751b9bc40bf22efd7a86a58478c760" prot="private" static="no" mutable="no">
        <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
        <definition>std::chrono::time_point&lt;Clock&gt; CognitiveNetwork::time_object_created</definition>
        <argsstring></argsstring>
        <name>time_object_created</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="313" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="313" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cognitive_network_1a8b20f9cf5c0857072278036c26541de5" prot="private" static="no" mutable="no">
        <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
        <definition>std::chrono::time_point&lt;Clock&gt; CognitiveNetwork::previous_event_time</definition>
        <argsstring></argsstring>
        <name>previous_event_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="314" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="314" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cognitive_network_1a18e532233f30c3cd23a62d3a51361890" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int CognitiveNetwork::duration_since_last_event</definition>
        <argsstring></argsstring>
        <name>duration_since_last_event</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="316" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="316" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cognitive_network_1afe2b8f2a9decc4aa34e349c4b31132ca" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int CognitiveNetwork::m_addStatus</definition>
        <argsstring></argsstring>
        <name>m_addStatus</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="317" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="317" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cognitive_network_1a97e0dfbeec1fda74336a6a01991252ad" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int CognitiveNetwork::m_Counter</definition>
        <argsstring></argsstring>
        <name>m_Counter</name>
        <briefdescription>
<para>Member variable &quot;m_Counter&quot;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="318" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="318" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cognitive_network_1a121f4a2db12d5fbaf8d7b4f38d2b8af5" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double CognitiveNetwork::object_energy</definition>
        <argsstring></argsstring>
        <name>object_energy</name>
        <briefdescription>
<para>Member variable &quot;object_energy&quot;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="319" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="319" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cognitive_network_1a261409a3a19a76858743769605508278" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double CognitiveNetwork::object_energy_threshold</definition>
        <argsstring></argsstring>
        <name>object_energy_threshold</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="320" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="320" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cognitive_network_1a6fca1826ad4e0140cb1f1060891a3322" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double CognitiveNetwork::m_Spike</definition>
        <argsstring></argsstring>
        <name>m_Spike</name>
        <briefdescription>
<para>Member variable &quot;m_Spike&quot;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="321" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="321" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cognitive_network_1a790c699ecb3c98be0f3dada86f795e0b" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double CognitiveNetwork::m_GateKeeper</definition>
        <argsstring></argsstring>
        <name>m_GateKeeper</name>
        <briefdescription>
<para>Member variable &quot;m_GateKeeper&quot;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="322" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="322" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cognitive_network_1a5571556d812abd789a682a606e6678c8" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double CognitiveNetwork::m_ChannelMin</definition>
        <argsstring></argsstring>
        <name>m_ChannelMin</name>
        <briefdescription>
<para>Member variable &quot;m_ChannelMin&quot;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="323" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="323" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cognitive_network_1aceec291fd547c96cc0acdceb0b8ac395" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double CognitiveNetwork::m_ChannelMax</definition>
        <argsstring></argsstring>
        <name>m_ChannelMax</name>
        <briefdescription>
<para>Member variable &quot;m_ChannelMax&quot;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="324" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="324" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cognitive_network_1a13ad3041f8dc46d58fd9ef6636fca04f" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double CognitiveNetwork::m_TimeDilation</definition>
        <argsstring></argsstring>
        <name>m_TimeDilation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="325" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="325" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cognitive_network_1adcdba17a98dffbbb12b199630d0cb83e" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double CognitiveNetwork::m_TimeThreshold</definition>
        <argsstring></argsstring>
        <name>m_TimeThreshold</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="326" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="326" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cognitive_network_1ab4cfbf213ee21aeeb16d145d269aa377" prot="private" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int CognitiveNetwork::cognitivenetworkCounter</definition>
        <argsstring></argsstring>
        <name>cognitivenetworkCounter</name>
        <briefdescription>
<para>Member variable &quot;elementaryParticleCounter&quot;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="328" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="328" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cognitive_network_1a0a8f803f884cee0566bcd33ea9e0b01a" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int CognitiveNetwork::cognitivenetworkCapacity</definition>
        <argsstring></argsstring>
        <name>cognitivenetworkCapacity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="329" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="329" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cognitive_network_1a7410505d26ebadbc1547deed3a2d7eaa" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int CognitiveNetwork::cognitivenetworkUsage</definition>
        <argsstring></argsstring>
        <name>cognitivenetworkUsage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="330" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="330" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cognitive_network_1a9ac40480942ca8287c09533a6e5997cd" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int CognitiveNetwork::interneuronspace_pool</definition>
        <argsstring></argsstring>
        <name>interneuronspace_pool</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="333" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="333" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cognitive_network_1ad17a9880d3e4742cc4f2151d76b5e906" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int CognitiveNetwork::cognitiveinput_pool</definition>
        <argsstring></argsstring>
        <name>cognitiveinput_pool</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="334" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="334" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cognitive_network_1aabdf601ef8d8827cfeeacdc72fa85d37" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int CognitiveNetwork::cognitiveoutput_pool</definition>
        <argsstring></argsstring>
        <name>cognitiveoutput_pool</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="335" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="335" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cognitive_network_1a58920f62f4c0dc71bb62b1480c78a356" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int CognitiveNetwork::orbital_pool</definition>
        <argsstring></argsstring>
        <name>orbital_pool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="336" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="336" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cognitive_network_1a8873930c11fbe7e1c8f1850961cc73ec" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int CognitiveNetwork::neuron_pool</definition>
        <argsstring></argsstring>
        <name>neuron_pool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="337" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="337" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cognitive_network_1acce7f5451dd50c27689d2239fbd66394" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int CognitiveNetwork::synapse_pool</definition>
        <argsstring></argsstring>
        <name>synapse_pool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="338" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="338" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cognitive_network_1a8fdef3aed1bd95b0980885c77f423a12" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int CognitiveNetwork::neurotransmitter_pool</definition>
        <argsstring></argsstring>
        <name>neurotransmitter_pool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="339" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="339" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_cognitive_network_1aaae2978be9a9acb8d7ff0de6495ec9b0" prot="private" static="no" mutable="no">
        <type>std::vector&lt; OrbitalConnection &gt;</type>
        <definition>std::vector&lt;OrbitalConnection&gt; CognitiveNetwork::orbital_connection_list</definition>
        <argsstring></argsstring>
        <name>orbital_connection_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="352" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="352" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_cognitive_network_1a3daddb316744336648d317e7f71ed371" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CognitiveNetwork::CognitiveNetwork</definition>
        <argsstring>()</argsstring>
        <name>CognitiveNetwork</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="19" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="19" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a167b15e33bcbca43cb0a516159e890f2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CognitiveNetwork::CognitiveNetwork</definition>
        <argsstring>(unsigned int object_type)</argsstring>
        <name>CognitiveNetwork</name>
        <param>
          <type>unsigned int</type>
          <declname>object_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="21" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="21" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1ac7ba285d3468a929dac88756a2c4e4f9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CognitiveNetwork::CognitiveNetwork</definition>
        <argsstring>(unsigned int object_type, std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>CognitiveNetwork</name>
        <param>
          <type>unsigned int</type>
          <declname>object_type</declname>
        </param>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="23" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="23" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a6ec49dcc8cc58cded71983291629179c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CognitiveNetwork::CognitiveNetwork</definition>
        <argsstring>(unsigned int object_type, std::chrono::time_point&lt; Clock &gt; event_time, Universe &amp;universe_connector)</argsstring>
        <name>CognitiveNetwork</name>
        <param>
          <type>unsigned int</type>
          <declname>object_type</declname>
        </param>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type><ref refid="class_universe" kindref="compound">Universe</ref> &amp;</type>
          <declname>universe_connector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="25" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="25" bodyend="36"/>
        <references refid="class_cognitive_network_1a8af8ed2605263e57a32e457aba2af99d" compoundref="cognitivenetwork_8cc" startline="32" endline="95">ResetParameters</references>
        <references refid="class_universe_1a28615baf47d4558cbe5eebeed6575024" compoundref="universe_8cc" startline="57" endline="61">Universe::Creation</references>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a17142cc6f0bb3894e63f6c66fa401778" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual CognitiveNetwork::~CognitiveNetwork</definition>
        <argsstring>()</argsstring>
        <name>~CognitiveNetwork</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default destructor </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="39" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="39" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a160bb447671609eb14b1b8043639ac74" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int CognitiveNetwork::GetCounter</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>GetCounter</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="41" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="41" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a6bb3fc06029c260dd658d0db072625a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int CognitiveNetwork::GetCapacity</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>GetCapacity</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="42" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="42" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a055b3711835b8d134356298f8975f04d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CognitiveNetwork::SetCapacity</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int val)</argsstring>
        <name>SetCapacity</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="43" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="43" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1ad293916cfa0e454ef40d7e228d0dcba3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int CognitiveNetwork::GetUsage</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>GetUsage</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="44" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="44" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a8b6b4afc47df279604be13bce77f5b0a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CognitiveNetwork::SetUsage</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int val)</argsstring>
        <name>SetUsage</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="45" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="45" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1af23b9bce2587ccf3c8204be33fc76c61" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double CognitiveNetwork::GetEnergy</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>GetEnergy</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="47" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="47" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a3a9be1c6697d063b0836cdcdc7a2600c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double CognitiveNetwork::GetGateKeeper</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>GetGateKeeper</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="48" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="48" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1ad7f5cc836340017d38c22b57e177fc91" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double CognitiveNetwork::GetChannelMin</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>GetChannelMin</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="49" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="49" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1ab67da8690b83618d88f88411121d7071" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double CognitiveNetwork::GetChannelMax</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>GetChannelMax</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="50" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="50" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1aa64c93ecec84b57b25e1fdb173795f9b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CognitiveNetwork::GetDisabled</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>GetDisabled</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="51" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="51" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a1c92a8f6c42788cf8ca890f062f853a3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int CognitiveNetwork::GetObjectType</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>GetObjectType</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="52" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a03d744f9d0d420c1e044646bc6bd2552" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double CognitiveNetwork::GetRestingPotential</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>GetRestingPotential</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="53" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="53" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1af33f3ff9dd829da73d183d2624f24964" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int CognitiveNetwork::GetCognitiveNetworkDeviceTag</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>GetCognitiveNetworkDeviceTag</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="54" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="54" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a23c6a11d9f15a141f69a9779f174bfb3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CognitiveNetwork::SetCounter</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int val)</argsstring>
        <name>SetCounter</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="56" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="56" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1af2f96107858445a0b7be2be6af5b5c01" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CognitiveNetwork::SetEnergy</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, double val)</argsstring>
        <name>SetEnergy</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="57" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="57" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a83bc4047721417212fa1bbbfa64da5ee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CognitiveNetwork::SetGateKeeper</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, double val)</argsstring>
        <name>SetGateKeeper</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="58" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="58" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a6e2a6ced4ede9a4eef721d6c5aac433c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CognitiveNetwork::SetChannelMin</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, double val)</argsstring>
        <name>SetChannelMin</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="59" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="59" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a9c208d66ee284adfceb3b2dd76532a00" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CognitiveNetwork::SetChannelMax</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, double val)</argsstring>
        <name>SetChannelMax</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="60" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="60" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1ac29e676c84244f5b64c0083a0efead28" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CognitiveNetwork::SetDisabled</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, bool val)</argsstring>
        <name>SetDisabled</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="61" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="61" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1abeac08d7cbf9df4b36de40aa9301e978" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CognitiveNetwork::toggleDisabled</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>toggleDisabled</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="62" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="62" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1af5995eaa4ba35c555a6b65d895451f25" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int CognitiveNetwork::GetOrbitalPool</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>GetOrbitalPool</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="64" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="64" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1af81132245e486c496a055f54a5a520d0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int CognitiveNetwork::GetNeuronPool</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>GetNeuronPool</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="65" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="65" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1ae0068b9df823e1b10fed3c73f1cb4702" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int CognitiveNetwork::GetSynapsePool</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>GetSynapsePool</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="66" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="66" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a4e5b1d60cda4ddb4bd04d8dca42b7a5b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int CognitiveNetwork::GetNeurotransmitterPool</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>GetNeurotransmitterPool</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="67" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="67" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1aaa3929bfba068659e9681f85deaf79cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int CognitiveNetwork::SetOrbitalPool</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int set_pool)</argsstring>
        <name>SetOrbitalPool</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>set_pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="69" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="69" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1aeb59b511e2ef526c43df1d24a468b571" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int CognitiveNetwork::SetNeuronPool</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int set_pool)</argsstring>
        <name>SetNeuronPool</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>set_pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="70" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="70" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a30f35d1bff2e1e3a5a2d921791cfe6b8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int CognitiveNetwork::SetSynapsePool</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int set_pool)</argsstring>
        <name>SetSynapsePool</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>set_pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="71" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="71" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1aaa10c36c0b0024fa717d8d61a4a06920" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int CognitiveNetwork::SetNeurotransmitterPool</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int set_pool)</argsstring>
        <name>SetNeurotransmitterPool</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>set_pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="72" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="72" bodyend="72"/>
        <references refid="class_cognitive_network_1ad95a0b25c7f61fc52322938eb13c9e3e" compoundref="cognitivenetwork_8cc" startline="26" endline="30">SetObjectType</references>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1ad95a0b25c7f61fc52322938eb13c9e3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CognitiveNetwork::SetObjectType</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int object_type)</argsstring>
        <name>SetObjectType</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>object_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="74" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="26" bodyend="30"/>
        <references refid="class_cognitive_network_1a8af8ed2605263e57a32e457aba2af99d" compoundref="cognitivenetwork_8cc" startline="32" endline="95">ResetParameters</references>
        <referencedby refid="class_cognitive_network_1aaa10c36c0b0024fa717d8d61a4a06920" compoundref="cognitivenetwork_8h" startline="72" endline="72">SetNeurotransmitterPool</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CognitiveNetwork::SetCognitiveNetworkDeviceTag</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int val)</argsstring>
        <name>SetCognitiveNetworkDeviceTag</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="76" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="76" bodyend="76"/>
        <references refid="class_cognitive_network_1a8af8ed2605263e57a32e457aba2af99d" compoundref="cognitivenetwork_8cc" startline="32" endline="95">ResetParameters</references>
        <references refid="class_cognitive_network_1aa37dda869174e4eef986cca4ce3e55d2" compoundref="cognitivenetwork_8cc" startline="97" endline="143">UpdateCycle</references>
        <references refid="class_cognitive_network_1a05dccc7759456df13a732899a8f1f4c4" compoundref="cognitivenetwork_8cc" startline="146" endline="193">Update</references>
        <references refid="class_cognitive_network_1add96197c3dc51d94d06edb480fbc4a38" compoundref="cognitivenetwork_8cc" startline="197" endline="206">CreateCognitiveInput</references>
        <references refid="class_cognitive_network_1a0833f7b587f14e0c0778661a56bce957" compoundref="cognitivenetwork_8cc" startline="208" endline="227">CreateCognitiveInputs</references>
        <references refid="class_cognitive_network_1a058cb2b044d56268e36f153fac21084e" compoundref="cognitivenetwork_8cc" startline="235" endline="238">CloneCognitiveInput</references>
        <references refid="class_cognitive_network_1aeaf2883b25dbf1eefd11c2d92efe8816" compoundref="cognitivenetwork_8cc" startline="230" endline="233">CloneCognitiveInputs</references>
        <references refid="class_cognitive_network_1a12e085cd47b7661190527fe55b6da8dc" compoundref="cognitivenetwork_8cc" startline="245" endline="248">DestroyCognitiveInput</references>
        <references refid="class_cognitive_network_1a00aa44de67dd0593a2498ce7a3b4c0f2" compoundref="cognitivenetwork_8cc" startline="240" endline="243">DestroyCognitiveInputs</references>
        <references refid="class_cognitive_network_1a6af57693982286ac6a6831ca3010b760" compoundref="cognitivenetwork_8cc" startline="250" endline="259">AddCognitiveInput</references>
        <references refid="class_cognitive_network_1afc92c9b378e7e0873d0164bc4f2635df" compoundref="cognitivenetwork_8cc" startline="261" endline="280">AddCognitiveInputs</references>
        <references refid="class_cognitive_network_1af79bf7f8b61d5392df7a87bd444eb550" compoundref="cognitivenetwork_8cc" startline="283" endline="287">RemoveCognitiveInput</references>
        <references refid="class_cognitive_network_1aaaf93e7c732b1e1e81060f82ff73c93a" compoundref="cognitivenetwork_8cc" startline="289" endline="292">RemoveCognitiveInputs</references>
        <references refid="class_cognitive_network_1a2ff68a0d11cdb29af2f05a69a11911a4" compoundref="cognitivenetwork_8cc" startline="294" endline="297">GetCognitiveInput</references>
        <references refid="class_cognitive_network_1a92b896643b881e4030401e0f7fd256bf" compoundref="cognitivenetwork_8cc" startline="299" endline="302">GetCognitiveInputs</references>
        <references refid="class_cognitive_network_1ac220350499bd323bd8f24ff0050cd60d" compoundref="cognitivenetwork_8cc" startline="305" endline="314">CreateCognitiveOutput</references>
        <references refid="class_cognitive_network_1a002df11f4389a122fc140c186ab665c9" compoundref="cognitivenetwork_8cc" startline="316" endline="335">CreateCognitiveOutputs</references>
        <references refid="class_cognitive_network_1ab24f74115c11275f365245a4bb826c91" compoundref="cognitivenetwork_8cc" startline="343" endline="346">CloneCognitiveOutput</references>
        <references refid="class_cognitive_network_1a5734aa5378e9b701dca5e98017c1ea35" compoundref="cognitivenetwork_8cc" startline="338" endline="341">CloneCognitiveOutputs</references>
        <references refid="class_cognitive_network_1a8475cf7277d25532bb31926e768600e8" compoundref="cognitivenetwork_8cc" startline="353" endline="356">DestroyCognitiveOutput</references>
        <references refid="class_cognitive_network_1ad08191cbab02f26f69d25bc7e6b5c1ee" compoundref="cognitivenetwork_8cc" startline="348" endline="351">DestroyCognitiveOutputs</references>
        <references refid="class_cognitive_network_1a8a9b533b89b7d62b21cf41bdf957ef14" compoundref="cognitivenetwork_8cc" startline="358" endline="367">AddCognitiveOutput</references>
        <references refid="class_cognitive_network_1a6299433811b76f0ccb97cf69fe9bfb66" compoundref="cognitivenetwork_8cc" startline="369" endline="388">AddCognitiveOutputs</references>
        <references refid="class_cognitive_network_1a9874b11ac465c84ccf7baab0a40fb84e" compoundref="cognitivenetwork_8cc" startline="391" endline="395">RemoveCognitiveOutput</references>
        <references refid="class_cognitive_network_1a2f4956b004c828f0165f28c03e089144" compoundref="cognitivenetwork_8cc" startline="397" endline="400">RemoveCognitiveOutputs</references>
        <references refid="class_cognitive_network_1a947fa4c50fecc4008d2bcfc96a272ffc" compoundref="cognitivenetwork_8cc" startline="402" endline="405">GetCognitiveOutput</references>
        <references refid="class_cognitive_network_1acdf847165899c36d6d9d6843ecc27218" compoundref="cognitivenetwork_8cc" startline="407" endline="410">GetCognitiveOutputs</references>
        <references refid="class_cognitive_network_1af0dc86c7905baae6f2b5efb3a65b8819" compoundref="cognitivenetwork_8cc" startline="415" endline="424">CreateInterneuronSpace</references>
        <references refid="class_cognitive_network_1a2d671451d659079d5efb5cda10e48827" compoundref="cognitivenetwork_8cc" startline="426" endline="445">CreateInterneuronSpaces</references>
        <references refid="class_cognitive_network_1a1eef76439fffb9daaa3edc4e3c012831" compoundref="cognitivenetwork_8cc" startline="453" endline="456">CloneInterneuronSpace</references>
        <references refid="class_cognitive_network_1a5ee1d7b6df5bfe0048b4aea317c1974c" compoundref="cognitivenetwork_8cc" startline="448" endline="451">CloneInterneuronSpaces</references>
        <references refid="class_cognitive_network_1acdda154177d3b3a92885c10f6b3dc274" compoundref="cognitivenetwork_8cc" startline="463" endline="466">DestroyInterneuronSpace</references>
        <references refid="class_cognitive_network_1a718833496332e0471186c9a886005c4a" compoundref="cognitivenetwork_8cc" startline="458" endline="461">DestroyInterneuronSpaces</references>
        <references refid="class_cognitive_network_1ac6a7e01f097d0cb6434eb8fa7640c214" compoundref="cognitivenetwork_8cc" startline="468" endline="477">AddInterneuronSpace</references>
        <references refid="class_cognitive_network_1aeafe16b9f44ae1316c072a85e726ee83" compoundref="cognitivenetwork_8cc" startline="479" endline="498">AddInterneuronSpaces</references>
        <references refid="class_cognitive_network_1a04e38cea356f1c7ac31c4df5e19d759c" compoundref="cognitivenetwork_8cc" startline="501" endline="505">RemoveInterneuronSpace</references>
        <references refid="class_cognitive_network_1a994c5f93447a82429809c89aa08d3dc1" compoundref="cognitivenetwork_8cc" startline="507" endline="510">RemoveInterneuronSpaces</references>
        <references refid="class_cognitive_network_1a0119d61e86ea6b84ad7f69f88d59d008" compoundref="cognitivenetwork_8cc" startline="512" endline="515">GetInterneuronSpace</references>
        <references refid="class_cognitive_network_1a4daf966882d527b784bd359794ad39ca" compoundref="cognitivenetwork_8cc" startline="517" endline="520">GetInterneuronSpaces</references>
        <references refid="class_cognitive_network_1a5e0a782afc45d75d57fef91dd5513546" compoundref="cognitivenetwork_8cc" startline="523" endline="532">CreateOrbital</references>
        <references refid="class_cognitive_network_1a46d4189cf3e6b9af6190abe7b79539b4" compoundref="cognitivenetwork_8cc" startline="534" endline="553">CreateOrbitals</references>
        <references refid="class_cognitive_network_1aa8992740f25d46b0be3d9d8344c39f67" compoundref="cognitivenetwork_8cc" startline="561" endline="564">CloneOrbital</references>
        <references refid="class_cognitive_network_1a266b7baf2fd9d6b5c5652e251830020a" compoundref="cognitivenetwork_8cc" startline="556" endline="559">CloneOrbitals</references>
        <references refid="class_cognitive_network_1aefecb3a2464f7f21449e522af5119c63" compoundref="cognitivenetwork_8cc" startline="571" endline="574">DestroyOrbital</references>
        <references refid="class_cognitive_network_1a0ee8259d26e30779bf06471fb8a10bb5" compoundref="cognitivenetwork_8cc" startline="566" endline="569">DestroyOrbitals</references>
        <references refid="class_cognitive_network_1ab6caa285c25568259ae935cf9e746af4" compoundref="cognitivenetwork_8cc" startline="576" endline="585">AddOrbital</references>
        <references refid="class_cognitive_network_1a9dbf4a9fab3b806d2bd6b2701b7a9548" compoundref="cognitivenetwork_8cc" startline="587" endline="606">AddOrbitals</references>
        <references refid="class_cognitive_network_1a6ed0e198f6dcfdd45d57df5d3ad5754c" compoundref="cognitivenetwork_8cc" startline="609" endline="613">RemoveOrbital</references>
        <references refid="class_cognitive_network_1af7834d400995607c2a5a5eac7b5e006d" compoundref="cognitivenetwork_8cc" startline="615" endline="618">RemoveOrbitals</references>
        <references refid="class_cognitive_network_1a69655ef1e12bac5f74c2eb85c72720f4" compoundref="cognitivenetwork_8cc" startline="620" endline="623">GetOrbital</references>
        <references refid="class_cognitive_network_1aa21d28ffc3b507236a7dad64663f6c42" compoundref="cognitivenetwork_8cc" startline="625" endline="628">GetOrbitals</references>
        <references refid="class_cognitive_network_1a9b5fcaf824d5b587775e7c44630affe6" compoundref="cognitivenetwork_8cc" startline="632" endline="641">CreateNeuron</references>
        <references refid="class_cognitive_network_1af9b2a136584c962e44114a7ee3d2804a" compoundref="cognitivenetwork_8cc" startline="643" endline="667">CreateNeurons</references>
        <references refid="class_cognitive_network_1abf42d64965d64836d6fcbd7ce33c8db4" compoundref="cognitivenetwork_8cc" startline="675" endline="678">CloneNeuron</references>
        <references refid="class_cognitive_network_1a8852409e92434523ddbd48d699c5609f" compoundref="cognitivenetwork_8cc" startline="670" endline="673">CloneNeurons</references>
        <references refid="class_cognitive_network_1ab3318f517da206ad4286b6cc22acf520" compoundref="cognitivenetwork_8cc" startline="685" endline="688">DestroyNeuron</references>
        <references refid="class_cognitive_network_1af2f706043a0c227b93877e29b056f3c9" compoundref="cognitivenetwork_8cc" startline="680" endline="683">DestroyNeurons</references>
        <references refid="class_cognitive_network_1a8457342637fde2d814c54942c3367416" compoundref="cognitivenetwork_8cc" startline="690" endline="699">AddNeuron</references>
        <references refid="class_cognitive_network_1ade928e3355db97d3c5d99501ff4a3b69" compoundref="cognitivenetwork_8cc" startline="701" endline="720">AddNeurons</references>
        <references refid="class_cognitive_network_1a33e911ec87d902a8fd8bb6d9e23c4261" compoundref="cognitivenetwork_8cc" startline="723" endline="727">RemoveNeuron</references>
        <references refid="class_cognitive_network_1a130985ff0aa14b2a17fc2c589e65f868" compoundref="cognitivenetwork_8cc" startline="729" endline="732">RemoveNeurons</references>
        <references refid="class_cognitive_network_1ac12f0af92d878d45dca7303dc065c383" compoundref="cognitivenetwork_8cc" startline="734" endline="737">GetNeuron</references>
        <references refid="class_cognitive_network_1a0e9e37e976a7ca5ee625e2d7b36fd7ea" compoundref="cognitivenetwork_8cc" startline="739" endline="742">GetNeurons</references>
        <references refid="class_cognitive_network_1ade8e9295b35790b136dca9084a1b7aa9" compoundref="cognitivenetwork_8cc" startline="745" endline="754">CreateSynapse</references>
        <references refid="class_cognitive_network_1ae6ae16f401e7699032ac9459132763c0" compoundref="cognitivenetwork_8cc" startline="756" endline="775">CreateSynapses</references>
        <references refid="class_cognitive_network_1a40f88d3ce9d386ee4db5c1e0ad84dad2" compoundref="cognitivenetwork_8cc" startline="783" endline="786">CloneSynapse</references>
        <references refid="class_cognitive_network_1a82fe792704bcbf7df56b3023266f5f70" compoundref="cognitivenetwork_8cc" startline="778" endline="781">CloneSynapses</references>
        <references refid="class_cognitive_network_1a08b87aa9a0823355ef7cef77414dc6dc" compoundref="cognitivenetwork_8cc" startline="793" endline="796">DestroySynapse</references>
        <references refid="class_cognitive_network_1a141e9e8e6337d42fc19edd75bb50e47b" compoundref="cognitivenetwork_8cc" startline="788" endline="791">DestroySynapses</references>
        <references refid="class_cognitive_network_1a4bfdcd2affdfe2adb2da68dba60dff0e" compoundref="cognitivenetwork_8cc" startline="798" endline="807">AddSynapse</references>
        <references refid="class_cognitive_network_1a09d9e01cbd8596af7fac626ce2753643" compoundref="cognitivenetwork_8cc" startline="809" endline="828">AddSynapses</references>
        <references refid="class_cognitive_network_1a0764ede1c23caa7022a01657a0e3726b" compoundref="cognitivenetwork_8cc" startline="831" endline="835">RemoveSynapse</references>
        <references refid="class_cognitive_network_1a87d6628f388baed1edb8efda9062c443" compoundref="cognitivenetwork_8cc" startline="837" endline="840">RemoveSynapses</references>
        <references refid="class_cognitive_network_1a1944aaa13667bc267e6ef44892da969d" compoundref="cognitivenetwork_8cc" startline="842" endline="845">GetSynapse</references>
        <references refid="class_cognitive_network_1aa3376f2e7aed9639c2b5ba27aa6fb314" compoundref="cognitivenetwork_8cc" startline="847" endline="850">GetSynapses</references>
        <references refid="class_cognitive_network_1a53d1047ae3ec721540b64b05abe01559" compoundref="cognitivenetwork_8cc" startline="853" endline="862">CreateNeurotransmitter</references>
        <references refid="class_cognitive_network_1ad877c495c9efdb582613a5af8d854ac3" compoundref="cognitivenetwork_8cc" startline="864" endline="883">CreateNeurotransmitters</references>
        <references refid="class_cognitive_network_1af78d31471a121844e4735d809c900502" compoundref="cognitivenetwork_8cc" startline="891" endline="894">CloneNeurotransmitter</references>
        <references refid="class_cognitive_network_1a2b2d40d179f95ff96e9aa0559234cc31" compoundref="cognitivenetwork_8cc" startline="886" endline="889">CloneNeurotransmitters</references>
        <references refid="class_cognitive_network_1a0f943978df49ef879c43c15c81682a8a" compoundref="cognitivenetwork_8cc" startline="901" endline="904">DestroyNeurotransmitter</references>
        <references refid="class_cognitive_network_1a7f705e562562e9778ee0b5260dda9f09" compoundref="cognitivenetwork_8cc" startline="896" endline="899">DestroyNeurotransmitters</references>
        <references refid="class_cognitive_network_1ab80ffdc75ad4754463c356d36fb81ab4" compoundref="cognitivenetwork_8cc" startline="906" endline="915">AddNeurotransmitter</references>
        <references refid="class_cognitive_network_1a085f61ab94b71406a0a5e11d789ed69c" compoundref="cognitivenetwork_8cc" startline="917" endline="936">AddNeurotransmitters</references>
        <references refid="class_cognitive_network_1ac0728c12a6d4bb87b6e8c9163435c8e6" compoundref="cognitivenetwork_8cc" startline="939" endline="943">RemoveNeurotransmitter</references>
        <references refid="class_cognitive_network_1a5e706084296ce84ff6884c1506213b03" compoundref="cognitivenetwork_8cc" startline="945" endline="948">RemoveNeurotransmitters</references>
        <references refid="class_cognitive_network_1a85890c201376061b1ffbe8fdfc1a8633" compoundref="cognitivenetwork_8cc" startline="950" endline="953">GetNeurotransmitter</references>
        <references refid="class_cognitive_network_1ac56b1585864b372c8897dcb5720d00a7" compoundref="cognitivenetwork_8cc" startline="955" endline="958">GetNeurotransmitters</references>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a8af8ed2605263e57a32e457aba2af99d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CognitiveNetwork::ResetParameters</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>ResetParameters</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="78" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="32" bodyend="95"/>
        <references refid="class_universe_1a3ce4365c727cb6eb5b650146a4188b9b" compoundref="universe_8h" startline="284">Universe::time_dimension_pointer</references>
        <references refid="class_universe_1a6326158c47bf3f7fe9297299a9b5b7b7" compoundref="universe_8cc" startline="166" endline="172">Universe::AddDimension</references>
        <references refid="class_universe_1a2274a54fbdc7504c897e4272162bf17a" compoundref="universe_8cc" startline="63" endline="67">Universe::SetObjectType</references>
        <references refid="class_universe_1ae54d34c5d695917e074b8e07e8820bdb" compoundref="universe_8cc" startline="111" endline="114">Universe::TheTimeNow</references>
        <referencedby refid="class_cognitive_network_1ad95a0b25c7f61fc52322938eb13c9e3e" compoundref="cognitivenetwork_8cc" startline="26" endline="30">SetObjectType</referencedby>
        <referencedby refid="class_cognitive_network_1a05dccc7759456df13a732899a8f1f4c4" compoundref="cognitivenetwork_8cc" startline="146" endline="193">Update</referencedby>
        <referencedby refid="class_cognitive_network_1a6ec49dcc8cc58cded71983291629179c" compoundref="cognitivenetwork_8h" startline="25" endline="36">CognitiveNetwork</referencedby>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1aa37dda869174e4eef986cca4ce3e55d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CognitiveNetwork::UpdateCycle</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, std::vector&lt; CognitiveNetwork *&gt; set_of_update_pointers, unsigned int pointer_type)</argsstring>
        <name>UpdateCycle</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *&gt;</type>
          <declname>set_of_update_pointers</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>pointer_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="80" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="97" bodyend="143"/>
        <references refid="class_cognitive_network_1a05dccc7759456df13a732899a8f1f4c4" compoundref="cognitivenetwork_8cc" startline="146" endline="193">Update</references>
        <referencedby refid="class_cognitive_network_1a05dccc7759456df13a732899a8f1f4c4" compoundref="cognitivenetwork_8cc" startline="146" endline="193">Update</referencedby>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a05dccc7759456df13a732899a8f1f4c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CognitiveNetwork::Update</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>Update</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="82" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="146" bodyend="193"/>
        <references refid="class_cognitive_network_1a8af8ed2605263e57a32e457aba2af99d" compoundref="cognitivenetwork_8cc" startline="32" endline="95">ResetParameters</references>
        <references refid="class_cognitive_network_1aa37dda869174e4eef986cca4ce3e55d2" compoundref="cognitivenetwork_8cc" startline="97" endline="143">UpdateCycle</references>
        <references refid="class_cognitive_network_1a5a46cefb188858fdc023df3abbac0a47" compoundref="cognitivenetwork_8h" startline="298">cognitiveinput_list</references>
        <references refid="class_cognitive_network_1a7a57ad82736c0d8b03e7607b5c603b00" compoundref="cognitivenetwork_8h" startline="299">cognitiveoutput_list</references>
        <references refid="class_cognitive_network_1aaf69f6e0cc0084eb748ef1540c773f85" compoundref="cognitivenetwork_8h" startline="300">interneuronspace_list</references>
        <references refid="class_cognitive_network_1a263efd10857d5507c0e889e48f7329fe" compoundref="cognitivenetwork_8h" startline="301">orbital_list</references>
        <references refid="class_cognitive_network_1abbb9ff97e1b9cd61602d95f44c30132e" compoundref="cognitivenetwork_8h" startline="302">neuron_list</references>
        <references refid="class_cognitive_network_1a9218de9d63b10b313df289d1312c81e0" compoundref="cognitivenetwork_8h" startline="303">synapse_list</references>
        <references refid="class_cognitive_network_1a7018bee3dbf538c3d0c81a64aa002ab8" compoundref="cognitivenetwork_8h" startline="304">neurotransmitter_list</references>
        <referencedby refid="class_cognitive_network_1aa37dda869174e4eef986cca4ce3e55d2" compoundref="cognitivenetwork_8cc" startline="97" endline="143">UpdateCycle</referencedby>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
        <referencedby refid="class_orbital_1afbf72ba4e260627422c9f53dea793923" compoundref="orbital_8cc" startline="119" endline="135">Orbital::UpdateCycle</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1add96197c3dc51d94d06edb480fbc4a38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
        <definition>CognitiveNetwork * CognitiveNetwork::CreateCognitiveInput</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>CreateCognitiveInput</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="85" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="197" bodyend="206"/>
        <references refid="class_cognitive_network_1a5a46cefb188858fdc023df3abbac0a47" compoundref="cognitivenetwork_8h" startline="298">cognitiveinput_list</references>
        <referencedby refid="class_cognitive_network_1a0833f7b587f14e0c0778661a56bce957" compoundref="cognitivenetwork_8cc" startline="208" endline="227">CreateCognitiveInputs</referencedby>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a0833f7b587f14e0c0778661a56bce957" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt; CognitiveNetwork * &gt; CognitiveNetwork::CreateCognitiveInputs</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int quantity)</argsstring>
        <name>CreateCognitiveInputs</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>quantity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="87" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="208" bodyend="227"/>
        <references refid="class_cognitive_network_1a5a46cefb188858fdc023df3abbac0a47" compoundref="cognitivenetwork_8h" startline="298">cognitiveinput_list</references>
        <references refid="class_cognitive_network_1add96197c3dc51d94d06edb480fbc4a38" compoundref="cognitivenetwork_8cc" startline="197" endline="206">CreateCognitiveInput</references>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a058cb2b044d56268e36f153fac21084e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
        <definition>CognitiveNetwork * CognitiveNetwork::CloneCognitiveInput</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, CognitiveNetwork *clone_object, double perfection_membership)</argsstring>
        <name>CloneCognitiveInput</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
          <declname>clone_object</declname>
        </param>
        <param>
          <type>double</type>
          <declname>perfection_membership</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="89" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="235" bodyend="238"/>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1aeaf2883b25dbf1eefd11c2d92efe8816" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt; CognitiveNetwork * &gt; CognitiveNetwork::CloneCognitiveInputs</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, std::vector&lt; CognitiveNetwork *&gt; cloning_list, double perfection_membership)</argsstring>
        <name>CloneCognitiveInputs</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *&gt;</type>
          <declname>cloning_list</declname>
        </param>
        <param>
          <type>double</type>
          <declname>perfection_membership</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="91" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="230" bodyend="233"/>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a12e085cd47b7661190527fe55b6da8dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
        <definition>CognitiveNetwork * CognitiveNetwork::DestroyCognitiveInput</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, CognitiveNetwork *destroy_object)</argsstring>
        <name>DestroyCognitiveInput</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
          <declname>destroy_object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="93" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="245" bodyend="248"/>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a00aa44de67dd0593a2498ce7a3b4c0f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt; CognitiveNetwork * &gt; CognitiveNetwork::DestroyCognitiveInputs</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, std::vector&lt; CognitiveNetwork *&gt; destruction_list)</argsstring>
        <name>DestroyCognitiveInputs</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *&gt;</type>
          <declname>destruction_list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="95" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="240" bodyend="243"/>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a6af57693982286ac6a6831ca3010b760" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
        <definition>CognitiveNetwork * CognitiveNetwork::AddCognitiveInput</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, CognitiveNetwork *add_object)</argsstring>
        <name>AddCognitiveInput</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
          <declname>add_object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="97" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="250" bodyend="259"/>
        <references refid="class_cognitive_network_1a5a46cefb188858fdc023df3abbac0a47" compoundref="cognitivenetwork_8h" startline="298">cognitiveinput_list</references>
        <references refid="class_cognitive_network_1aaf69f6e0cc0084eb748ef1540c773f85" compoundref="cognitivenetwork_8h" startline="300">interneuronspace_list</references>
        <referencedby refid="class_cognitive_network_1afc92c9b378e7e0873d0164bc4f2635df" compoundref="cognitivenetwork_8cc" startline="261" endline="280">AddCognitiveInputs</referencedby>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1afc92c9b378e7e0873d0164bc4f2635df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt; CognitiveNetwork * &gt; CognitiveNetwork::AddCognitiveInputs</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, std::vector&lt; CognitiveNetwork *&gt; add_objects)</argsstring>
        <name>AddCognitiveInputs</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *&gt;</type>
          <declname>add_objects</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="99" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="261" bodyend="280"/>
        <references refid="class_cognitive_network_1a5a46cefb188858fdc023df3abbac0a47" compoundref="cognitivenetwork_8h" startline="298">cognitiveinput_list</references>
        <references refid="class_cognitive_network_1a6af57693982286ac6a6831ca3010b760" compoundref="cognitivenetwork_8cc" startline="250" endline="259">AddCognitiveInput</references>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1af79bf7f8b61d5392df7a87bd444eb550" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
        <definition>CognitiveNetwork * CognitiveNetwork::RemoveCognitiveInput</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>RemoveCognitiveInput</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="101" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="283" bodyend="287"/>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1aaaf93e7c732b1e1e81060f82ff73c93a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt; CognitiveNetwork * &gt; CognitiveNetwork::RemoveCognitiveInputs</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int quantity)</argsstring>
        <name>RemoveCognitiveInputs</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>quantity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="103" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="289" bodyend="292"/>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a2ff68a0d11cdb29af2f05a69a11911a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
        <definition>CognitiveNetwork * CognitiveNetwork::GetCognitiveInput</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int selector)</argsstring>
        <name>GetCognitiveInput</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>selector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="105" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="294" bodyend="297"/>
        <references refid="class_cognitive_network_1a5a46cefb188858fdc023df3abbac0a47" compoundref="cognitivenetwork_8h" startline="298">cognitiveinput_list</references>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a92b896643b881e4030401e0f7fd256bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt; CognitiveNetwork * &gt; CognitiveNetwork::GetCognitiveInputs</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>GetCognitiveInputs</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="107" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="299" bodyend="302"/>
        <references refid="class_cognitive_network_1a5a46cefb188858fdc023df3abbac0a47" compoundref="cognitivenetwork_8h" startline="298">cognitiveinput_list</references>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1ac220350499bd323bd8f24ff0050cd60d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
        <definition>CognitiveNetwork * CognitiveNetwork::CreateCognitiveOutput</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>CreateCognitiveOutput</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="110" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="305" bodyend="314"/>
        <references refid="class_cognitive_network_1a7a57ad82736c0d8b03e7607b5c603b00" compoundref="cognitivenetwork_8h" startline="299">cognitiveoutput_list</references>
        <referencedby refid="class_cognitive_network_1a002df11f4389a122fc140c186ab665c9" compoundref="cognitivenetwork_8cc" startline="316" endline="335">CreateCognitiveOutputs</referencedby>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a002df11f4389a122fc140c186ab665c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt; CognitiveNetwork * &gt; CognitiveNetwork::CreateCognitiveOutputs</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int quantity)</argsstring>
        <name>CreateCognitiveOutputs</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>quantity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="112" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="316" bodyend="335"/>
        <references refid="class_cognitive_network_1a7a57ad82736c0d8b03e7607b5c603b00" compoundref="cognitivenetwork_8h" startline="299">cognitiveoutput_list</references>
        <references refid="class_cognitive_network_1ac220350499bd323bd8f24ff0050cd60d" compoundref="cognitivenetwork_8cc" startline="305" endline="314">CreateCognitiveOutput</references>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1ab24f74115c11275f365245a4bb826c91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
        <definition>CognitiveNetwork * CognitiveNetwork::CloneCognitiveOutput</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, CognitiveNetwork *clone_object, double perfection_membership)</argsstring>
        <name>CloneCognitiveOutput</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
          <declname>clone_object</declname>
        </param>
        <param>
          <type>double</type>
          <declname>perfection_membership</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="114" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="343" bodyend="346"/>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a5734aa5378e9b701dca5e98017c1ea35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt; CognitiveNetwork * &gt; CognitiveNetwork::CloneCognitiveOutputs</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, std::vector&lt; CognitiveNetwork *&gt; cloning_list, double perfection_membership)</argsstring>
        <name>CloneCognitiveOutputs</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *&gt;</type>
          <declname>cloning_list</declname>
        </param>
        <param>
          <type>double</type>
          <declname>perfection_membership</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="116" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="338" bodyend="341"/>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a8475cf7277d25532bb31926e768600e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
        <definition>CognitiveNetwork * CognitiveNetwork::DestroyCognitiveOutput</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, CognitiveNetwork *destroy_object)</argsstring>
        <name>DestroyCognitiveOutput</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
          <declname>destroy_object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="118" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="353" bodyend="356"/>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1ad08191cbab02f26f69d25bc7e6b5c1ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt; CognitiveNetwork * &gt; CognitiveNetwork::DestroyCognitiveOutputs</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, std::vector&lt; CognitiveNetwork *&gt; destruction_list)</argsstring>
        <name>DestroyCognitiveOutputs</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *&gt;</type>
          <declname>destruction_list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="120" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="348" bodyend="351"/>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a8a9b533b89b7d62b21cf41bdf957ef14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
        <definition>CognitiveNetwork * CognitiveNetwork::AddCognitiveOutput</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, CognitiveNetwork *add_object)</argsstring>
        <name>AddCognitiveOutput</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
          <declname>add_object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="122" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="358" bodyend="367"/>
        <references refid="class_cognitive_network_1a7a57ad82736c0d8b03e7607b5c603b00" compoundref="cognitivenetwork_8h" startline="299">cognitiveoutput_list</references>
        <references refid="class_cognitive_network_1aaf69f6e0cc0084eb748ef1540c773f85" compoundref="cognitivenetwork_8h" startline="300">interneuronspace_list</references>
        <referencedby refid="class_cognitive_network_1a6299433811b76f0ccb97cf69fe9bfb66" compoundref="cognitivenetwork_8cc" startline="369" endline="388">AddCognitiveOutputs</referencedby>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a6299433811b76f0ccb97cf69fe9bfb66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt; CognitiveNetwork * &gt; CognitiveNetwork::AddCognitiveOutputs</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, std::vector&lt; CognitiveNetwork *&gt; add_objects)</argsstring>
        <name>AddCognitiveOutputs</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *&gt;</type>
          <declname>add_objects</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="124" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="369" bodyend="388"/>
        <references refid="class_cognitive_network_1a7a57ad82736c0d8b03e7607b5c603b00" compoundref="cognitivenetwork_8h" startline="299">cognitiveoutput_list</references>
        <references refid="class_cognitive_network_1a8a9b533b89b7d62b21cf41bdf957ef14" compoundref="cognitivenetwork_8cc" startline="358" endline="367">AddCognitiveOutput</references>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a9874b11ac465c84ccf7baab0a40fb84e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
        <definition>CognitiveNetwork * CognitiveNetwork::RemoveCognitiveOutput</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>RemoveCognitiveOutput</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="126" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="391" bodyend="395"/>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a2f4956b004c828f0165f28c03e089144" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt; CognitiveNetwork * &gt; CognitiveNetwork::RemoveCognitiveOutputs</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int quantity)</argsstring>
        <name>RemoveCognitiveOutputs</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>quantity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="128" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="397" bodyend="400"/>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a947fa4c50fecc4008d2bcfc96a272ffc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
        <definition>CognitiveNetwork * CognitiveNetwork::GetCognitiveOutput</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int selector)</argsstring>
        <name>GetCognitiveOutput</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>selector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="130" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="402" bodyend="405"/>
        <references refid="class_cognitive_network_1a7a57ad82736c0d8b03e7607b5c603b00" compoundref="cognitivenetwork_8h" startline="299">cognitiveoutput_list</references>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1acdf847165899c36d6d9d6843ecc27218" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt; CognitiveNetwork * &gt; CognitiveNetwork::GetCognitiveOutputs</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>GetCognitiveOutputs</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="132" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="407" bodyend="410"/>
        <references refid="class_cognitive_network_1a7a57ad82736c0d8b03e7607b5c603b00" compoundref="cognitivenetwork_8h" startline="299">cognitiveoutput_list</references>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1af0dc86c7905baae6f2b5efb3a65b8819" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
        <definition>CognitiveNetwork * CognitiveNetwork::CreateInterneuronSpace</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>CreateInterneuronSpace</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="135" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="415" bodyend="424"/>
        <references refid="class_cognitive_network_1aaf69f6e0cc0084eb748ef1540c773f85" compoundref="cognitivenetwork_8h" startline="300">interneuronspace_list</references>
        <referencedby refid="class_cognitive_network_1a2d671451d659079d5efb5cda10e48827" compoundref="cognitivenetwork_8cc" startline="426" endline="445">CreateInterneuronSpaces</referencedby>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a2d671451d659079d5efb5cda10e48827" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt; CognitiveNetwork * &gt; CognitiveNetwork::CreateInterneuronSpaces</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int quantity)</argsstring>
        <name>CreateInterneuronSpaces</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>quantity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="137" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="426" bodyend="445"/>
        <references refid="class_cognitive_network_1aaf69f6e0cc0084eb748ef1540c773f85" compoundref="cognitivenetwork_8h" startline="300">interneuronspace_list</references>
        <references refid="class_cognitive_network_1af0dc86c7905baae6f2b5efb3a65b8819" compoundref="cognitivenetwork_8cc" startline="415" endline="424">CreateInterneuronSpace</references>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a1eef76439fffb9daaa3edc4e3c012831" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
        <definition>CognitiveNetwork * CognitiveNetwork::CloneInterneuronSpace</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, CognitiveNetwork *clone_object, double perfection_membership)</argsstring>
        <name>CloneInterneuronSpace</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
          <declname>clone_object</declname>
        </param>
        <param>
          <type>double</type>
          <declname>perfection_membership</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="139" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="453" bodyend="456"/>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a5ee1d7b6df5bfe0048b4aea317c1974c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt; CognitiveNetwork * &gt; CognitiveNetwork::CloneInterneuronSpaces</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, std::vector&lt; CognitiveNetwork *&gt; cloning_list, double perfection_membership)</argsstring>
        <name>CloneInterneuronSpaces</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *&gt;</type>
          <declname>cloning_list</declname>
        </param>
        <param>
          <type>double</type>
          <declname>perfection_membership</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="141" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="448" bodyend="451"/>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1acdda154177d3b3a92885c10f6b3dc274" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
        <definition>CognitiveNetwork * CognitiveNetwork::DestroyInterneuronSpace</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, CognitiveNetwork *destroy_object)</argsstring>
        <name>DestroyInterneuronSpace</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
          <declname>destroy_object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="143" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="463" bodyend="466"/>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a718833496332e0471186c9a886005c4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt; CognitiveNetwork * &gt; CognitiveNetwork::DestroyInterneuronSpaces</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, std::vector&lt; CognitiveNetwork *&gt; destruction_list)</argsstring>
        <name>DestroyInterneuronSpaces</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *&gt;</type>
          <declname>destruction_list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="145" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="458" bodyend="461"/>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1ac6a7e01f097d0cb6434eb8fa7640c214" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
        <definition>CognitiveNetwork * CognitiveNetwork::AddInterneuronSpace</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, CognitiveNetwork *add_object)</argsstring>
        <name>AddInterneuronSpace</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
          <declname>add_object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="147" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="468" bodyend="477"/>
        <references refid="class_cognitive_network_1aaf69f6e0cc0084eb748ef1540c773f85" compoundref="cognitivenetwork_8h" startline="300">interneuronspace_list</references>
        <referencedby refid="class_cognitive_network_1aeafe16b9f44ae1316c072a85e726ee83" compoundref="cognitivenetwork_8cc" startline="479" endline="498">AddInterneuronSpaces</referencedby>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1aeafe16b9f44ae1316c072a85e726ee83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt; CognitiveNetwork * &gt; CognitiveNetwork::AddInterneuronSpaces</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, std::vector&lt; CognitiveNetwork *&gt; add_objects)</argsstring>
        <name>AddInterneuronSpaces</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *&gt;</type>
          <declname>add_objects</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="149" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="479" bodyend="498"/>
        <references refid="class_cognitive_network_1aaf69f6e0cc0084eb748ef1540c773f85" compoundref="cognitivenetwork_8h" startline="300">interneuronspace_list</references>
        <references refid="class_cognitive_network_1ac6a7e01f097d0cb6434eb8fa7640c214" compoundref="cognitivenetwork_8cc" startline="468" endline="477">AddInterneuronSpace</references>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a04e38cea356f1c7ac31c4df5e19d759c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
        <definition>CognitiveNetwork * CognitiveNetwork::RemoveInterneuronSpace</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>RemoveInterneuronSpace</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="151" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="501" bodyend="505"/>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a994c5f93447a82429809c89aa08d3dc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt; CognitiveNetwork * &gt; CognitiveNetwork::RemoveInterneuronSpaces</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int quantity)</argsstring>
        <name>RemoveInterneuronSpaces</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>quantity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="153" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="507" bodyend="510"/>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a0119d61e86ea6b84ad7f69f88d59d008" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
        <definition>CognitiveNetwork * CognitiveNetwork::GetInterneuronSpace</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int selector)</argsstring>
        <name>GetInterneuronSpace</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>selector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="155" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="512" bodyend="515"/>
        <references refid="class_cognitive_network_1aaf69f6e0cc0084eb748ef1540c773f85" compoundref="cognitivenetwork_8h" startline="300">interneuronspace_list</references>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a4daf966882d527b784bd359794ad39ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt; CognitiveNetwork * &gt; CognitiveNetwork::GetInterneuronSpaces</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>GetInterneuronSpaces</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="157" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="517" bodyend="520"/>
        <references refid="class_cognitive_network_1aaf69f6e0cc0084eb748ef1540c773f85" compoundref="cognitivenetwork_8h" startline="300">interneuronspace_list</references>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a5e0a782afc45d75d57fef91dd5513546" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
        <definition>CognitiveNetwork * CognitiveNetwork::CreateOrbital</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>CreateOrbital</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="160" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="523" bodyend="532"/>
        <references refid="class_cognitive_network_1a263efd10857d5507c0e889e48f7329fe" compoundref="cognitivenetwork_8h" startline="301">orbital_list</references>
        <referencedby refid="class_cognitive_network_1a46d4189cf3e6b9af6190abe7b79539b4" compoundref="cognitivenetwork_8cc" startline="534" endline="553">CreateOrbitals</referencedby>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a46d4189cf3e6b9af6190abe7b79539b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt; CognitiveNetwork * &gt; CognitiveNetwork::CreateOrbitals</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int quantity)</argsstring>
        <name>CreateOrbitals</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>quantity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="162" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="534" bodyend="553"/>
        <references refid="class_cognitive_network_1a263efd10857d5507c0e889e48f7329fe" compoundref="cognitivenetwork_8h" startline="301">orbital_list</references>
        <references refid="class_cognitive_network_1a5e0a782afc45d75d57fef91dd5513546" compoundref="cognitivenetwork_8cc" startline="523" endline="532">CreateOrbital</references>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1aa8992740f25d46b0be3d9d8344c39f67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
        <definition>CognitiveNetwork * CognitiveNetwork::CloneOrbital</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, CognitiveNetwork *clone_object, double perfection_membership)</argsstring>
        <name>CloneOrbital</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
          <declname>clone_object</declname>
        </param>
        <param>
          <type>double</type>
          <declname>perfection_membership</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="164" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="561" bodyend="564"/>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a266b7baf2fd9d6b5c5652e251830020a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt; CognitiveNetwork * &gt; CognitiveNetwork::CloneOrbitals</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, std::vector&lt; CognitiveNetwork *&gt; cloning_list, double perfection_membership)</argsstring>
        <name>CloneOrbitals</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *&gt;</type>
          <declname>cloning_list</declname>
        </param>
        <param>
          <type>double</type>
          <declname>perfection_membership</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="166" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="556" bodyend="559"/>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1aefecb3a2464f7f21449e522af5119c63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
        <definition>CognitiveNetwork * CognitiveNetwork::DestroyOrbital</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, CognitiveNetwork *destroy_object)</argsstring>
        <name>DestroyOrbital</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
          <declname>destroy_object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="168" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="571" bodyend="574"/>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a0ee8259d26e30779bf06471fb8a10bb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt; CognitiveNetwork * &gt; CognitiveNetwork::DestroyOrbitals</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, std::vector&lt; CognitiveNetwork *&gt; destruction_list)</argsstring>
        <name>DestroyOrbitals</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *&gt;</type>
          <declname>destruction_list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="170" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="566" bodyend="569"/>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1ab6caa285c25568259ae935cf9e746af4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
        <definition>CognitiveNetwork * CognitiveNetwork::AddOrbital</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, CognitiveNetwork *add_object)</argsstring>
        <name>AddOrbital</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
          <declname>add_object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="172" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="576" bodyend="585"/>
        <references refid="class_cognitive_network_1a263efd10857d5507c0e889e48f7329fe" compoundref="cognitivenetwork_8h" startline="301">orbital_list</references>
        <referencedby refid="class_cognitive_network_1a9dbf4a9fab3b806d2bd6b2701b7a9548" compoundref="cognitivenetwork_8cc" startline="587" endline="606">AddOrbitals</referencedby>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a9dbf4a9fab3b806d2bd6b2701b7a9548" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt; CognitiveNetwork * &gt; CognitiveNetwork::AddOrbitals</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, std::vector&lt; CognitiveNetwork *&gt; add_objects)</argsstring>
        <name>AddOrbitals</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *&gt;</type>
          <declname>add_objects</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="174" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="587" bodyend="606"/>
        <references refid="class_cognitive_network_1a263efd10857d5507c0e889e48f7329fe" compoundref="cognitivenetwork_8h" startline="301">orbital_list</references>
        <references refid="class_cognitive_network_1ab6caa285c25568259ae935cf9e746af4" compoundref="cognitivenetwork_8cc" startline="576" endline="585">AddOrbital</references>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a6ed0e198f6dcfdd45d57df5d3ad5754c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
        <definition>CognitiveNetwork * CognitiveNetwork::RemoveOrbital</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>RemoveOrbital</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="176" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="609" bodyend="613"/>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1af7834d400995607c2a5a5eac7b5e006d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt; CognitiveNetwork * &gt; CognitiveNetwork::RemoveOrbitals</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int quantity)</argsstring>
        <name>RemoveOrbitals</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>quantity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="178" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="615" bodyend="618"/>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a69655ef1e12bac5f74c2eb85c72720f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
        <definition>CognitiveNetwork * CognitiveNetwork::GetOrbital</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int selector)</argsstring>
        <name>GetOrbital</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>selector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="180" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="620" bodyend="623"/>
        <references refid="class_cognitive_network_1a263efd10857d5507c0e889e48f7329fe" compoundref="cognitivenetwork_8h" startline="301">orbital_list</references>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1aa21d28ffc3b507236a7dad64663f6c42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt; CognitiveNetwork * &gt; CognitiveNetwork::GetOrbitals</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>GetOrbitals</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="182" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="625" bodyend="628"/>
        <references refid="class_cognitive_network_1a263efd10857d5507c0e889e48f7329fe" compoundref="cognitivenetwork_8h" startline="301">orbital_list</references>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a9b5fcaf824d5b587775e7c44630affe6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
        <definition>CognitiveNetwork * CognitiveNetwork::CreateNeuron</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>CreateNeuron</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="185" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="632" bodyend="641"/>
        <references refid="class_cognitive_network_1abbb9ff97e1b9cd61602d95f44c30132e" compoundref="cognitivenetwork_8h" startline="302">neuron_list</references>
        <referencedby refid="class_cognitive_network_1af9b2a136584c962e44114a7ee3d2804a" compoundref="cognitivenetwork_8cc" startline="643" endline="667">CreateNeurons</referencedby>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1af9b2a136584c962e44114a7ee3d2804a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt; CognitiveNetwork * &gt; CognitiveNetwork::CreateNeurons</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int quantity)</argsstring>
        <name>CreateNeurons</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>quantity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="187" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="643" bodyend="667"/>
        <references refid="class_cognitive_network_1abbb9ff97e1b9cd61602d95f44c30132e" compoundref="cognitivenetwork_8h" startline="302">neuron_list</references>
        <references refid="class_cognitive_network_1a9b5fcaf824d5b587775e7c44630affe6" compoundref="cognitivenetwork_8cc" startline="632" endline="641">CreateNeuron</references>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1abf42d64965d64836d6fcbd7ce33c8db4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
        <definition>CognitiveNetwork * CognitiveNetwork::CloneNeuron</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, CognitiveNetwork *clone_object, double perfection_membership)</argsstring>
        <name>CloneNeuron</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
          <declname>clone_object</declname>
        </param>
        <param>
          <type>double</type>
          <declname>perfection_membership</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="189" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="675" bodyend="678"/>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a8852409e92434523ddbd48d699c5609f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt; CognitiveNetwork * &gt; CognitiveNetwork::CloneNeurons</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, std::vector&lt; CognitiveNetwork *&gt; cloning_list, double perfection_membership)</argsstring>
        <name>CloneNeurons</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *&gt;</type>
          <declname>cloning_list</declname>
        </param>
        <param>
          <type>double</type>
          <declname>perfection_membership</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="191" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="670" bodyend="673"/>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1ab3318f517da206ad4286b6cc22acf520" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
        <definition>CognitiveNetwork * CognitiveNetwork::DestroyNeuron</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, CognitiveNetwork *destroy_object)</argsstring>
        <name>DestroyNeuron</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
          <declname>destroy_object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="193" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="685" bodyend="688"/>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1af2f706043a0c227b93877e29b056f3c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt; CognitiveNetwork * &gt; CognitiveNetwork::DestroyNeurons</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, std::vector&lt; CognitiveNetwork *&gt; destruction_list)</argsstring>
        <name>DestroyNeurons</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *&gt;</type>
          <declname>destruction_list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="195" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="680" bodyend="683"/>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a8457342637fde2d814c54942c3367416" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
        <definition>CognitiveNetwork * CognitiveNetwork::AddNeuron</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, CognitiveNetwork *add_object)</argsstring>
        <name>AddNeuron</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
          <declname>add_object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="197" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="690" bodyend="699"/>
        <references refid="class_cognitive_network_1abbb9ff97e1b9cd61602d95f44c30132e" compoundref="cognitivenetwork_8h" startline="302">neuron_list</references>
        <referencedby refid="class_cognitive_network_1ade928e3355db97d3c5d99501ff4a3b69" compoundref="cognitivenetwork_8cc" startline="701" endline="720">AddNeurons</referencedby>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1ade928e3355db97d3c5d99501ff4a3b69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt; CognitiveNetwork * &gt; CognitiveNetwork::AddNeurons</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, std::vector&lt; CognitiveNetwork *&gt; add_objects)</argsstring>
        <name>AddNeurons</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *&gt;</type>
          <declname>add_objects</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="199" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="701" bodyend="720"/>
        <references refid="class_cognitive_network_1abbb9ff97e1b9cd61602d95f44c30132e" compoundref="cognitivenetwork_8h" startline="302">neuron_list</references>
        <references refid="class_cognitive_network_1a8457342637fde2d814c54942c3367416" compoundref="cognitivenetwork_8cc" startline="690" endline="699">AddNeuron</references>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a33e911ec87d902a8fd8bb6d9e23c4261" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
        <definition>CognitiveNetwork * CognitiveNetwork::RemoveNeuron</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>RemoveNeuron</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="201" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="723" bodyend="727"/>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a130985ff0aa14b2a17fc2c589e65f868" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt; CognitiveNetwork * &gt; CognitiveNetwork::RemoveNeurons</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int quantity)</argsstring>
        <name>RemoveNeurons</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>quantity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="203" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="729" bodyend="732"/>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1ac12f0af92d878d45dca7303dc065c383" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
        <definition>CognitiveNetwork * CognitiveNetwork::GetNeuron</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int selector)</argsstring>
        <name>GetNeuron</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>selector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="205" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="734" bodyend="737"/>
        <references refid="class_cognitive_network_1abbb9ff97e1b9cd61602d95f44c30132e" compoundref="cognitivenetwork_8h" startline="302">neuron_list</references>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a0e9e37e976a7ca5ee625e2d7b36fd7ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt; CognitiveNetwork * &gt; CognitiveNetwork::GetNeurons</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>GetNeurons</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="207" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="739" bodyend="742"/>
        <references refid="class_cognitive_network_1abbb9ff97e1b9cd61602d95f44c30132e" compoundref="cognitivenetwork_8h" startline="302">neuron_list</references>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1ade8e9295b35790b136dca9084a1b7aa9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
        <definition>CognitiveNetwork * CognitiveNetwork::CreateSynapse</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>CreateSynapse</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="210" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="745" bodyend="754"/>
        <references refid="class_cognitive_network_1a9218de9d63b10b313df289d1312c81e0" compoundref="cognitivenetwork_8h" startline="303">synapse_list</references>
        <referencedby refid="class_cognitive_network_1ae6ae16f401e7699032ac9459132763c0" compoundref="cognitivenetwork_8cc" startline="756" endline="775">CreateSynapses</referencedby>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1ae6ae16f401e7699032ac9459132763c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt; CognitiveNetwork * &gt; CognitiveNetwork::CreateSynapses</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int quantity)</argsstring>
        <name>CreateSynapses</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>quantity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="212" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="756" bodyend="775"/>
        <references refid="class_cognitive_network_1a9218de9d63b10b313df289d1312c81e0" compoundref="cognitivenetwork_8h" startline="303">synapse_list</references>
        <references refid="class_cognitive_network_1ade8e9295b35790b136dca9084a1b7aa9" compoundref="cognitivenetwork_8cc" startline="745" endline="754">CreateSynapse</references>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a40f88d3ce9d386ee4db5c1e0ad84dad2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
        <definition>CognitiveNetwork * CognitiveNetwork::CloneSynapse</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, CognitiveNetwork *clone_object, double perfection_membership)</argsstring>
        <name>CloneSynapse</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
          <declname>clone_object</declname>
        </param>
        <param>
          <type>double</type>
          <declname>perfection_membership</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="214" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="783" bodyend="786"/>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a82fe792704bcbf7df56b3023266f5f70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt; CognitiveNetwork * &gt; CognitiveNetwork::CloneSynapses</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, std::vector&lt; CognitiveNetwork *&gt; cloning_list, double perfection_membership)</argsstring>
        <name>CloneSynapses</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *&gt;</type>
          <declname>cloning_list</declname>
        </param>
        <param>
          <type>double</type>
          <declname>perfection_membership</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="216" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="778" bodyend="781"/>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a08b87aa9a0823355ef7cef77414dc6dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
        <definition>CognitiveNetwork * CognitiveNetwork::DestroySynapse</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, CognitiveNetwork *destroy_object)</argsstring>
        <name>DestroySynapse</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
          <declname>destroy_object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="218" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="793" bodyend="796"/>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a141e9e8e6337d42fc19edd75bb50e47b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt; CognitiveNetwork * &gt; CognitiveNetwork::DestroySynapses</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, std::vector&lt; CognitiveNetwork *&gt; destruction_list)</argsstring>
        <name>DestroySynapses</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *&gt;</type>
          <declname>destruction_list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="220" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="788" bodyend="791"/>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a4bfdcd2affdfe2adb2da68dba60dff0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
        <definition>CognitiveNetwork * CognitiveNetwork::AddSynapse</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, CognitiveNetwork *add_object)</argsstring>
        <name>AddSynapse</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
          <declname>add_object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="222" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="798" bodyend="807"/>
        <references refid="class_cognitive_network_1a9218de9d63b10b313df289d1312c81e0" compoundref="cognitivenetwork_8h" startline="303">synapse_list</references>
        <referencedby refid="class_cognitive_network_1a09d9e01cbd8596af7fac626ce2753643" compoundref="cognitivenetwork_8cc" startline="809" endline="828">AddSynapses</referencedby>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a09d9e01cbd8596af7fac626ce2753643" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt; CognitiveNetwork * &gt; CognitiveNetwork::AddSynapses</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, std::vector&lt; CognitiveNetwork *&gt; add_objects)</argsstring>
        <name>AddSynapses</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *&gt;</type>
          <declname>add_objects</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="224" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="809" bodyend="828"/>
        <references refid="class_cognitive_network_1a9218de9d63b10b313df289d1312c81e0" compoundref="cognitivenetwork_8h" startline="303">synapse_list</references>
        <references refid="class_cognitive_network_1a4bfdcd2affdfe2adb2da68dba60dff0e" compoundref="cognitivenetwork_8cc" startline="798" endline="807">AddSynapse</references>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a0764ede1c23caa7022a01657a0e3726b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
        <definition>CognitiveNetwork * CognitiveNetwork::RemoveSynapse</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>RemoveSynapse</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="226" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="831" bodyend="835"/>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a87d6628f388baed1edb8efda9062c443" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt; CognitiveNetwork * &gt; CognitiveNetwork::RemoveSynapses</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int quantity)</argsstring>
        <name>RemoveSynapses</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>quantity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="228" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="837" bodyend="840"/>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a1944aaa13667bc267e6ef44892da969d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
        <definition>CognitiveNetwork * CognitiveNetwork::GetSynapse</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int selector)</argsstring>
        <name>GetSynapse</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>selector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="230" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="842" bodyend="845"/>
        <references refid="class_cognitive_network_1a9218de9d63b10b313df289d1312c81e0" compoundref="cognitivenetwork_8h" startline="303">synapse_list</references>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1aa3376f2e7aed9639c2b5ba27aa6fb314" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt; CognitiveNetwork * &gt; CognitiveNetwork::GetSynapses</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>GetSynapses</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="232" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="847" bodyend="850"/>
        <references refid="class_cognitive_network_1a9218de9d63b10b313df289d1312c81e0" compoundref="cognitivenetwork_8h" startline="303">synapse_list</references>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a53d1047ae3ec721540b64b05abe01559" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
        <definition>CognitiveNetwork * CognitiveNetwork::CreateNeurotransmitter</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>CreateNeurotransmitter</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="235" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="853" bodyend="862"/>
        <references refid="class_cognitive_network_1a7018bee3dbf538c3d0c81a64aa002ab8" compoundref="cognitivenetwork_8h" startline="304">neurotransmitter_list</references>
        <referencedby refid="class_cognitive_network_1ad877c495c9efdb582613a5af8d854ac3" compoundref="cognitivenetwork_8cc" startline="864" endline="883">CreateNeurotransmitters</referencedby>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1ad877c495c9efdb582613a5af8d854ac3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt; CognitiveNetwork * &gt; CognitiveNetwork::CreateNeurotransmitters</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int quantity)</argsstring>
        <name>CreateNeurotransmitters</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>quantity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="237" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="864" bodyend="883"/>
        <references refid="class_cognitive_network_1a7018bee3dbf538c3d0c81a64aa002ab8" compoundref="cognitivenetwork_8h" startline="304">neurotransmitter_list</references>
        <references refid="class_cognitive_network_1a53d1047ae3ec721540b64b05abe01559" compoundref="cognitivenetwork_8cc" startline="853" endline="862">CreateNeurotransmitter</references>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1af78d31471a121844e4735d809c900502" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
        <definition>CognitiveNetwork * CognitiveNetwork::CloneNeurotransmitter</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, CognitiveNetwork *clone_object, double perfection_membership)</argsstring>
        <name>CloneNeurotransmitter</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
          <declname>clone_object</declname>
        </param>
        <param>
          <type>double</type>
          <declname>perfection_membership</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="239" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="891" bodyend="894"/>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a2b2d40d179f95ff96e9aa0559234cc31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt; CognitiveNetwork * &gt; CognitiveNetwork::CloneNeurotransmitters</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, std::vector&lt; CognitiveNetwork *&gt; cloning_list, double perfection_membership)</argsstring>
        <name>CloneNeurotransmitters</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *&gt;</type>
          <declname>cloning_list</declname>
        </param>
        <param>
          <type>double</type>
          <declname>perfection_membership</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="241" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="886" bodyend="889"/>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a0f943978df49ef879c43c15c81682a8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
        <definition>CognitiveNetwork * CognitiveNetwork::DestroyNeurotransmitter</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, CognitiveNetwork *destroy_object)</argsstring>
        <name>DestroyNeurotransmitter</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
          <declname>destroy_object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="243" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="901" bodyend="904"/>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a7f705e562562e9778ee0b5260dda9f09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt; CognitiveNetwork * &gt; CognitiveNetwork::DestroyNeurotransmitters</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, std::vector&lt; CognitiveNetwork *&gt; destruction_list)</argsstring>
        <name>DestroyNeurotransmitters</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *&gt;</type>
          <declname>destruction_list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="245" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="896" bodyend="899"/>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1ab80ffdc75ad4754463c356d36fb81ab4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
        <definition>CognitiveNetwork * CognitiveNetwork::AddNeurotransmitter</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, CognitiveNetwork *add_object)</argsstring>
        <name>AddNeurotransmitter</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
          <declname>add_object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="247" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="906" bodyend="915"/>
        <references refid="class_cognitive_network_1a7018bee3dbf538c3d0c81a64aa002ab8" compoundref="cognitivenetwork_8h" startline="304">neurotransmitter_list</references>
        <referencedby refid="class_cognitive_network_1a085f61ab94b71406a0a5e11d789ed69c" compoundref="cognitivenetwork_8cc" startline="917" endline="936">AddNeurotransmitters</referencedby>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a085f61ab94b71406a0a5e11d789ed69c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt; CognitiveNetwork * &gt; CognitiveNetwork::AddNeurotransmitters</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, std::vector&lt; CognitiveNetwork *&gt; add_objects)</argsstring>
        <name>AddNeurotransmitters</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *&gt;</type>
          <declname>add_objects</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="249" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="917" bodyend="936"/>
        <references refid="class_cognitive_network_1a7018bee3dbf538c3d0c81a64aa002ab8" compoundref="cognitivenetwork_8h" startline="304">neurotransmitter_list</references>
        <references refid="class_cognitive_network_1ab80ffdc75ad4754463c356d36fb81ab4" compoundref="cognitivenetwork_8cc" startline="906" endline="915">AddNeurotransmitter</references>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1ac0728c12a6d4bb87b6e8c9163435c8e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
        <definition>CognitiveNetwork * CognitiveNetwork::RemoveNeurotransmitter</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>RemoveNeurotransmitter</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="251" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="939" bodyend="943"/>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a5e706084296ce84ff6884c1506213b03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt; CognitiveNetwork * &gt; CognitiveNetwork::RemoveNeurotransmitters</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int quantity)</argsstring>
        <name>RemoveNeurotransmitters</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>quantity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="253" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="945" bodyend="948"/>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a85890c201376061b1ffbe8fdfc1a8633" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
        <definition>CognitiveNetwork * CognitiveNetwork::GetNeurotransmitter</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int selector)</argsstring>
        <name>GetNeurotransmitter</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>selector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="255" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="950" bodyend="953"/>
        <references refid="class_cognitive_network_1a7018bee3dbf538c3d0c81a64aa002ab8" compoundref="cognitivenetwork_8h" startline="304">neurotransmitter_list</references>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1ac56b1585864b372c8897dcb5720d00a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt; CognitiveNetwork * &gt; CognitiveNetwork::GetNeurotransmitters</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>GetNeurotransmitters</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="257" column="1" bodyfile="BrainHarmonics/cognitivenetwork.cc" bodystart="955" bodyend="958"/>
        <references refid="class_cognitive_network_1a7018bee3dbf538c3d0c81a64aa002ab8" compoundref="cognitivenetwork_8h" startline="304">neurotransmitter_list</references>
        <referencedby refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" compoundref="cognitivenetwork_8h" startline="76" endline="76">SetCognitiveNetworkDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a99f801aeca299186cc706696696749b1" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>void</type>
        <definition>void CognitiveNetwork::SetCharge</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int val) final</argsstring>
        <name>SetCharge</name>
        <reimplements refid="class_universe_1a3b3da7c86a7b75e5e5c0b7972ac82a87">SetCharge</reimplements>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="259" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="259" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a3fc6d08413bfd4350f94d6f2627eedc7" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>void</type>
        <definition>void CognitiveNetwork::SetSpin</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int val) final</argsstring>
        <name>SetSpin</name>
        <reimplements refid="class_universe_1ae2ae1c3b3e4cde2c18f5f6a814761ec8">SetSpin</reimplements>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="260" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="260" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a4b5150310288c52f00ecb745ae9e7f86" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>double</type>
        <definition>double CognitiveNetwork::GetGravitation</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time) final</argsstring>
        <name>GetGravitation</name>
        <reimplements refid="class_universe_1ab0404e774ee0ed66b597ff5b8e989446">GetGravitation</reimplements>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="261" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="261" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a761db75ac8eab7b4625e5a398891bd12" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>double</type>
        <definition>double CognitiveNetwork::GetWeak</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time) final</argsstring>
        <name>GetWeak</name>
        <reimplements refid="class_universe_1a4476b7e0a3fc1764909f556257fd9ec7">GetWeak</reimplements>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="262" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="262" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1aa6342c390fe8e7c648b4c6bc8f93ba4a" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>double</type>
        <definition>double CognitiveNetwork::GetWeakElectroweak</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time) final</argsstring>
        <name>GetWeakElectroweak</name>
        <reimplements refid="class_universe_1a645299738e6b798a037f2a15a2e7cf4d">GetWeakElectroweak</reimplements>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="263" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="263" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a09e5a1c774c84529a7adfe56fadb7467" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>double</type>
        <definition>double CognitiveNetwork::GetElectromagnetic</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time) final</argsstring>
        <name>GetElectromagnetic</name>
        <reimplements refid="class_universe_1a63b850ef3f3394313353109d222bf5d1">GetElectromagnetic</reimplements>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="264" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="264" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a8c4e0454068f714691ae250f795cdb67" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>double</type>
        <definition>double CognitiveNetwork::GetElectromagneticElectroweak</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time) final</argsstring>
        <name>GetElectromagneticElectroweak</name>
        <reimplements refid="class_universe_1a9f099605c082e7fa755787a6a8cab7ba">GetElectromagneticElectroweak</reimplements>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="265" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="265" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a277247686f8af159e7a7beb0ec379225" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>double</type>
        <definition>double CognitiveNetwork::GetStrong</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time) final</argsstring>
        <name>GetStrong</name>
        <reimplements refid="class_universe_1acb453ce71da418c5b5617fecede9571b">GetStrong</reimplements>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="266" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="266" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a942ca90561fedae46136de620accbfea" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>double</type>
        <definition>double CognitiveNetwork::GetStrongFundamental</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time) final</argsstring>
        <name>GetStrongFundamental</name>
        <reimplements refid="class_universe_1ab44daccba01ee7e3cf9b50bba83dd19e">GetStrongFundamental</reimplements>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="267" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="267" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1acfa5de663b3e686c4d9ea1a3bb483b11" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>double</type>
        <definition>double CognitiveNetwork::GetStrongResidual</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time) final</argsstring>
        <name>GetStrongResidual</name>
        <reimplements refid="class_universe_1af0f4b81950061e63c2855eb40957a5b1">GetStrongResidual</reimplements>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="268" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="268" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a7d3252977440a9a5c004f748647ce885" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>double</type>
        <definition>double CognitiveNetwork::ApplyGravitation</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, double val) final</argsstring>
        <name>ApplyGravitation</name>
        <reimplements refid="class_universe_1a76c0b5e63c2a7d1988c44db341c3d64c">ApplyGravitation</reimplements>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="270" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="270" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a46a15b24bd61049fa1c4f635268086a1" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>double</type>
        <definition>double CognitiveNetwork::ApplyWeak</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, double val) final</argsstring>
        <name>ApplyWeak</name>
        <reimplements refid="class_universe_1a6d1226b3adec3c42a833afdbb6a65a92">ApplyWeak</reimplements>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="271" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="271" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1ab8bc213d2806f0dc49c1284bf934fc24" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>double</type>
        <definition>double CognitiveNetwork::ApplyWeakElectroweak</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, double val) final</argsstring>
        <name>ApplyWeakElectroweak</name>
        <reimplements refid="class_universe_1a46a906baabb63e5d31f8b48ea1fae52e">ApplyWeakElectroweak</reimplements>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="272" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="272" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1ae590ecb77db0a876425b9b74bcfe2bce" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>double</type>
        <definition>double CognitiveNetwork::ApplyElectromagnetic</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, double val) final</argsstring>
        <name>ApplyElectromagnetic</name>
        <reimplements refid="class_universe_1a1f787da78fa196ba635db21a9e91dabb">ApplyElectromagnetic</reimplements>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="273" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="273" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a9753f52c9e36ad44e9fac1d3e38a0770" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>double</type>
        <definition>double CognitiveNetwork::ApplyElectromagneticElectroweak</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, double val) final</argsstring>
        <name>ApplyElectromagneticElectroweak</name>
        <reimplements refid="class_universe_1a4c36c1ab30db993307f88363dde5e8c5">ApplyElectromagneticElectroweak</reimplements>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="274" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="274" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a7a55750d3c42a277c4ffe04a87ab3b19" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>double</type>
        <definition>double CognitiveNetwork::ApplyStrong</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, double val) final</argsstring>
        <name>ApplyStrong</name>
        <reimplements refid="class_universe_1a906a88b37f10bfa630bef49dfd0e907a">ApplyStrong</reimplements>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="275" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="275" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1af25bbd4f4d8f370cd2a48fd6db8302b9" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>double</type>
        <definition>double CognitiveNetwork::ApplyStrongFundamental</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, double val) final</argsstring>
        <name>ApplyStrongFundamental</name>
        <reimplements refid="class_universe_1a62789bcff84bd750b0366004381e2fdd">ApplyStrongFundamental</reimplements>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="276" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="276" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a8b60fdb81d89a3a74d6c06cb29e7aad3" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>double</type>
        <definition>double CognitiveNetwork::ApplyStrongResidual</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, double val) final</argsstring>
        <name>ApplyStrongResidual</name>
        <reimplements refid="class_universe_1af7becebb347be9a85541d96a3eca1ca7">ApplyStrongResidual</reimplements>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="277" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="277" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1af9f082a70f0cc25a3f818d9eace5a527" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>void</type>
        <definition>void CognitiveNetwork::SetGravitation</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, double val) final</argsstring>
        <name>SetGravitation</name>
        <reimplements refid="class_universe_1ae0cb8d86b2fbb8396d605160344b42f5">SetGravitation</reimplements>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="279" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="279" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1ab39c9eed50da6d3630c4498ae64b804e" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>void</type>
        <definition>void CognitiveNetwork::SetWeak</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, double val) final</argsstring>
        <name>SetWeak</name>
        <reimplements refid="class_universe_1a0f5cd04081b41ee931c0557dc397f6fb">SetWeak</reimplements>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="280" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="280" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a116f6818986a622e4a318857859e2495" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>void</type>
        <definition>void CognitiveNetwork::SetWeakElectroweak</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, double val) final</argsstring>
        <name>SetWeakElectroweak</name>
        <reimplements refid="class_universe_1a2d3d642bfdc863248e93535832fa4b00">SetWeakElectroweak</reimplements>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="281" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="281" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a31764cd5746369d16b45f2ff74806a0b" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>void</type>
        <definition>void CognitiveNetwork::SetElectromagnetic</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, double val) final</argsstring>
        <name>SetElectromagnetic</name>
        <reimplements refid="class_universe_1aa981fc7e252b1fbbb675f0371860954d">SetElectromagnetic</reimplements>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="282" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="282" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a270f6842ec14b3e5b80dedf7b48ea6f4" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>void</type>
        <definition>void CognitiveNetwork::SetElectromagneticElectroweak</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, double val) final</argsstring>
        <name>SetElectromagneticElectroweak</name>
        <reimplements refid="class_universe_1a608aa95698380f791a0ffba45cc1bee3">SetElectromagneticElectroweak</reimplements>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="283" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="283" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a50f2a12c9873e623d6247318b041ba30" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>void</type>
        <definition>void CognitiveNetwork::SetStrong</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, double val) final</argsstring>
        <name>SetStrong</name>
        <reimplements refid="class_universe_1a5946c8f3d4cda305f3ecd10df21a2f94">SetStrong</reimplements>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="284" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="284" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1ac54286eea279f5caa98b642b9084fd55" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>void</type>
        <definition>void CognitiveNetwork::SetStrongFundamental</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, double val) final</argsstring>
        <name>SetStrongFundamental</name>
        <reimplements refid="class_universe_1aafec97a231126b71c73ac1258609a284">SetStrongFundamental</reimplements>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="285" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="285" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1a6f7210dd8c2786518329faa61b6e14d5" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>void</type>
        <definition>void CognitiveNetwork::SetStrongResidual</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, double val) final</argsstring>
        <name>SetStrongResidual</name>
        <reimplements refid="class_universe_1a1b2d6197ddf3d613cc30bd04d22ed8b7">SetStrongResidual</reimplements>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="286" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="286" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="class_cognitive_network_1ac97c08a0af7dc0d02fbe059827b6be87" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>void</type>
        <definition>void CognitiveNetwork::PollElementaryForce</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time) final</argsstring>
        <name>PollElementaryForce</name>
        <reimplements refid="class_universe_1a0c485c504542409cbb5cfd8543c35b11">PollElementaryForce</reimplements>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/cognitivenetwork.h" line="288" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="288" bodyend="288"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="98">
        <label>Spike</label>
        <link refid="class_spike"/>
        <childnode refid="76" relation="public-inheritance">
        </childnode>
      </node>
      <node id="77">
        <label>Universe</label>
        <link refid="class_universe"/>
      </node>
      <node id="88">
        <label>Axon</label>
        <link refid="class_axon"/>
        <childnode refid="87" relation="public-inheritance">
        </childnode>
      </node>
      <node id="83">
        <label>Neuron</label>
        <link refid="class_neuron"/>
        <childnode refid="76" relation="public-inheritance">
        </childnode>
      </node>
      <node id="96">
        <label>Neurotransmitter</label>
        <link refid="class_neurotransmitter"/>
        <childnode refid="76" relation="public-inheritance">
        </childnode>
      </node>
      <node id="79">
        <label>CognitiveOutput</label>
        <link refid="class_cognitive_output"/>
        <childnode refid="76" relation="public-inheritance">
        </childnode>
      </node>
      <node id="97">
        <label>Orbital</label>
        <link refid="class_orbital"/>
        <childnode refid="76" relation="public-inheritance">
        </childnode>
      </node>
      <node id="76">
        <label>CognitiveNetwork</label>
        <link refid="class_cognitive_network"/>
        <childnode refid="77" relation="public-inheritance">
        </childnode>
      </node>
      <node id="84">
        <label>Membrane</label>
        <link refid="class_membrane"/>
        <childnode refid="83" relation="public-inheritance">
        </childnode>
      </node>
      <node id="91">
        <label>SynapticVesicle</label>
        <link refid="class_synaptic_vesicle"/>
        <childnode refid="90" relation="public-inheritance">
        </childnode>
      </node>
      <node id="99">
        <label>Synapse</label>
        <link refid="class_synapse"/>
        <childnode refid="76" relation="public-inheritance">
        </childnode>
      </node>
      <node id="89">
        <label>AxonBranch</label>
        <link refid="class_axon_branch"/>
        <childnode refid="88" relation="public-inheritance">
        </childnode>
      </node>
      <node id="78">
        <label>CognitiveInput</label>
        <link refid="class_cognitive_input"/>
        <childnode refid="76" relation="public-inheritance">
        </childnode>
      </node>
      <node id="94">
        <label>DendriteCleft</label>
        <link refid="class_dendrite_cleft"/>
        <childnode refid="93" relation="public-inheritance">
        </childnode>
      </node>
      <node id="82">
        <label>MyelinSheath</label>
        <link refid="class_myelin_sheath"/>
        <childnode refid="76" relation="public-inheritance">
        </childnode>
      </node>
      <node id="93">
        <label>DendriteBranch</label>
        <link refid="class_dendrite_branch"/>
        <childnode refid="92" relation="public-inheritance">
        </childnode>
      </node>
      <node id="80">
        <label>InterneuronSpace</label>
        <link refid="class_interneuron_space"/>
        <childnode refid="76" relation="public-inheritance">
        </childnode>
      </node>
      <node id="92">
        <label>Dendrite</label>
        <link refid="class_dendrite"/>
        <childnode refid="86" relation="public-inheritance">
        </childnode>
      </node>
      <node id="90">
        <label>AxonBouton</label>
        <link refid="class_axon_bouton"/>
        <childnode refid="89" relation="public-inheritance">
        </childnode>
      </node>
      <node id="87">
        <label>AxonHillock</label>
        <link refid="class_axon_hillock"/>
        <childnode refid="86" relation="public-inheritance">
        </childnode>
      </node>
      <node id="86">
        <label>Soma</label>
        <link refid="class_soma"/>
        <childnode refid="83" relation="public-inheritance">
        </childnode>
      </node>
      <node id="85">
        <label>MembraneChannel</label>
        <link refid="class_membrane_channel"/>
        <childnode refid="84" relation="public-inheritance">
        </childnode>
      </node>
      <node id="95">
        <label>Neuroreceptor</label>
        <link refid="class_neuroreceptor"/>
        <childnode refid="94" relation="public-inheritance">
        </childnode>
      </node>
      <node id="81">
        <label>SchwannCell</label>
        <link refid="class_schwann_cell"/>
        <childnode refid="80" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="101">
        <label>Universe</label>
        <link refid="class_universe"/>
        <childnode refid="101" relation="usage">
          <edgelabel>time_dimension_pointer</edgelabel>
        </childnode>
      </node>
      <node id="100">
        <label>CognitiveNetwork</label>
        <link refid="class_cognitive_network"/>
        <childnode refid="101" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="BrainHarmonics/cognitivenetwork.h" line="16" column="1" bodyfile="BrainHarmonics/cognitivenetwork.h" bodystart="15" bodyend="354"/>
    <listofallmembers>
      <member refid="class_cognitive_network_1a6af57693982286ac6a6831ca3010b760" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>AddCognitiveInput</name></member>
      <member refid="class_cognitive_network_1afc92c9b378e7e0873d0164bc4f2635df" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>AddCognitiveInputs</name></member>
      <member refid="class_universe_1ab682307c963836cd81b35b5604bd7064" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>AddCognitiveNetwork</name></member>
      <member refid="class_universe_1a5199f6c27b1a97c8b8c9847b8be686cf" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>AddCognitiveNetworks</name></member>
      <member refid="class_cognitive_network_1a8a9b533b89b7d62b21cf41bdf957ef14" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>AddCognitiveOutput</name></member>
      <member refid="class_cognitive_network_1a6299433811b76f0ccb97cf69fe9bfb66" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>AddCognitiveOutputs</name></member>
      <member refid="class_universe_1ab2671c2218c98f0f1f487c5b3bb96e3c" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>AddCompositeForceParticle</name></member>
      <member refid="class_universe_1a23d74e377203fca7cb74e0ffee7244b6" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>AddCompositeForceParticles</name></member>
      <member refid="class_universe_1a6326158c47bf3f7fe9297299a9b5b7b7" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>AddDimension</name></member>
      <member refid="class_universe_1a03bdf5f7fea4209241e9bf5316d45517" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>AddDimensions</name></member>
      <member refid="class_universe_1a90c573dec55f2b3ad5680015356f5f25" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>AddElementaryForce</name></member>
      <member refid="class_universe_1a81d294300346e9f901836ab609cce942" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>AddElementaryForces</name></member>
      <member refid="class_universe_1ab9c84e0576de50aa4fa46655832ce5e4" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>AddElementaryParticle</name></member>
      <member refid="class_universe_1a857cf7f208cd11c80736e82fa523feb5" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>AddElementaryParticles</name></member>
      <member refid="class_cognitive_network_1ac6a7e01f097d0cb6434eb8fa7640c214" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>AddInterneuronSpace</name></member>
      <member refid="class_cognitive_network_1aeafe16b9f44ae1316c072a85e726ee83" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>AddInterneuronSpaces</name></member>
      <member refid="class_universe_1a090d9ad1b88d81364e872e17d65edca4" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>AddMatter</name></member>
      <member refid="class_universe_1ae00d10b2a23c9cedf1ff89e9da875563" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>AddMatters</name></member>
      <member refid="class_universe_1a062a9472f0400e566ecc7dc056d989d9" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>AddMonomer</name></member>
      <member refid="class_universe_1a95fe7f99971bb2048121a7c4e87b9f79" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>AddMonomers</name></member>
      <member refid="class_cognitive_network_1a8457342637fde2d814c54942c3367416" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>AddNeuron</name></member>
      <member refid="class_cognitive_network_1ade928e3355db97d3c5d99501ff4a3b69" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>AddNeurons</name></member>
      <member refid="class_cognitive_network_1ab80ffdc75ad4754463c356d36fb81ab4" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>AddNeurotransmitter</name></member>
      <member refid="class_cognitive_network_1a085f61ab94b71406a0a5e11d789ed69c" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>AddNeurotransmitters</name></member>
      <member refid="class_cognitive_network_1ab6caa285c25568259ae935cf9e746af4" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>AddOrbital</name></member>
      <member refid="class_cognitive_network_1a9dbf4a9fab3b806d2bd6b2701b7a9548" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>AddOrbitals</name></member>
      <member refid="class_universe_1a8508b791c6997d8abcdcc037a6776734" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>AddPoint</name></member>
      <member refid="class_universe_1aa48ced2078ba863723050d8283b3fa67" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>AddPoints</name></member>
      <member refid="class_universe_1a4ea0af5d2eb7b5070a83f7da29526fbd" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>AddPolymer</name></member>
      <member refid="class_universe_1aed7cb25507d516a2821ebb69d5345c54" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>AddPolymers</name></member>
      <member refid="class_universe_1a598799e2fcdf9ed60e83e9f5a61bfc05" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>AddSolid</name></member>
      <member refid="class_universe_1a410d5ba2224fe90584b1f1aa5b38b41c" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>AddSolids</name></member>
      <member refid="class_cognitive_network_1a4bfdcd2affdfe2adb2da68dba60dff0e" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>AddSynapse</name></member>
      <member refid="class_cognitive_network_1a09d9e01cbd8596af7fac626ce2753643" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>AddSynapses</name></member>
      <member refid="class_universe_1a901e16db5e8af258c66af7ac75662fe0" prot="public" virt="virtual"><scope>CognitiveNetwork</scope><name>AddTemporalAdjustment</name></member>
      <member refid="class_universe_1a15aa20218286fd11ecb9b792dfb63be3" prot="public" virt="virtual"><scope>CognitiveNetwork</scope><name>AdjustCounters</name></member>
      <member refid="class_cognitive_network_1ae590ecb77db0a876425b9b74bcfe2bce" prot="public" virt="virtual"><scope>CognitiveNetwork</scope><name>ApplyElectromagnetic</name></member>
      <member refid="class_cognitive_network_1a9753f52c9e36ad44e9fac1d3e38a0770" prot="public" virt="virtual"><scope>CognitiveNetwork</scope><name>ApplyElectromagneticElectroweak</name></member>
      <member refid="class_cognitive_network_1a7d3252977440a9a5c004f748647ce885" prot="public" virt="virtual"><scope>CognitiveNetwork</scope><name>ApplyGravitation</name></member>
      <member refid="class_cognitive_network_1a7a55750d3c42a277c4ffe04a87ab3b19" prot="public" virt="virtual"><scope>CognitiveNetwork</scope><name>ApplyStrong</name></member>
      <member refid="class_cognitive_network_1af25bbd4f4d8f370cd2a48fd6db8302b9" prot="public" virt="virtual"><scope>CognitiveNetwork</scope><name>ApplyStrongFundamental</name></member>
      <member refid="class_cognitive_network_1a8b60fdb81d89a3a74d6c06cb29e7aad3" prot="public" virt="virtual"><scope>CognitiveNetwork</scope><name>ApplyStrongResidual</name></member>
      <member refid="class_cognitive_network_1a46a15b24bd61049fa1c4f635268086a1" prot="public" virt="virtual"><scope>CognitiveNetwork</scope><name>ApplyWeak</name></member>
      <member refid="class_cognitive_network_1ab8bc213d2806f0dc49c1284bf934fc24" prot="public" virt="virtual"><scope>CognitiveNetwork</scope><name>ApplyWeakElectroweak</name></member>
      <member refid="class_cognitive_network_1a058cb2b044d56268e36f153fac21084e" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>CloneCognitiveInput</name></member>
      <member refid="class_cognitive_network_1aeaf2883b25dbf1eefd11c2d92efe8816" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>CloneCognitiveInputs</name></member>
      <member refid="class_cognitive_network_1ab24f74115c11275f365245a4bb826c91" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>CloneCognitiveOutput</name></member>
      <member refid="class_cognitive_network_1a5734aa5378e9b701dca5e98017c1ea35" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>CloneCognitiveOutputs</name></member>
      <member refid="class_cognitive_network_1a1eef76439fffb9daaa3edc4e3c012831" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>CloneInterneuronSpace</name></member>
      <member refid="class_cognitive_network_1a5ee1d7b6df5bfe0048b4aea317c1974c" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>CloneInterneuronSpaces</name></member>
      <member refid="class_cognitive_network_1abf42d64965d64836d6fcbd7ce33c8db4" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>CloneNeuron</name></member>
      <member refid="class_cognitive_network_1a8852409e92434523ddbd48d699c5609f" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>CloneNeurons</name></member>
      <member refid="class_cognitive_network_1af78d31471a121844e4735d809c900502" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>CloneNeurotransmitter</name></member>
      <member refid="class_cognitive_network_1a2b2d40d179f95ff96e9aa0559234cc31" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>CloneNeurotransmitters</name></member>
      <member refid="class_cognitive_network_1aa8992740f25d46b0be3d9d8344c39f67" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>CloneOrbital</name></member>
      <member refid="class_cognitive_network_1a266b7baf2fd9d6b5c5652e251830020a" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>CloneOrbitals</name></member>
      <member refid="class_cognitive_network_1a40f88d3ce9d386ee4db5c1e0ad84dad2" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>CloneSynapse</name></member>
      <member refid="class_cognitive_network_1a82fe792704bcbf7df56b3023266f5f70" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>CloneSynapses</name></member>
      <member refid="class_universe_1a7a0e9796ff0d650a8b1fbde5fa5b761f" prot="protected" virt="non-virtual"><scope>CognitiveNetwork</scope><name>cognitive_network_list</name></member>
      <member refid="class_cognitive_network_1a5a46cefb188858fdc023df3abbac0a47" prot="protected" virt="non-virtual"><scope>CognitiveNetwork</scope><name>cognitiveinput_list</name></member>
      <member refid="class_cognitive_network_1ad17a9880d3e4742cc4f2151d76b5e906" prot="private" virt="non-virtual"><scope>CognitiveNetwork</scope><name>cognitiveinput_pool</name></member>
      <member refid="class_cognitive_network_1a3daddb316744336648d317e7f71ed371" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>CognitiveNetwork</name></member>
      <member refid="class_cognitive_network_1a167b15e33bcbca43cb0a516159e890f2" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>CognitiveNetwork</name></member>
      <member refid="class_cognitive_network_1ac7ba285d3468a929dac88756a2c4e4f9" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>CognitiveNetwork</name></member>
      <member refid="class_cognitive_network_1a6ec49dcc8cc58cded71983291629179c" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>CognitiveNetwork</name></member>
      <member refid="class_cognitive_network_1a45bdf5b9f1ccc0ed1ad32e2a6b9e7dab" prot="private" virt="non-virtual"><scope>CognitiveNetwork</scope><name>cognitivenetwork_type</name></member>
      <member refid="class_cognitive_network_1a0a8f803f884cee0566bcd33ea9e0b01a" prot="private" virt="non-virtual"><scope>CognitiveNetwork</scope><name>cognitivenetworkCapacity</name></member>
      <member refid="class_cognitive_network_1ab4cfbf213ee21aeeb16d145d269aa377" prot="private" virt="non-virtual"><scope>CognitiveNetwork</scope><name>cognitivenetworkCounter</name></member>
      <member refid="class_cognitive_network_1a7410505d26ebadbc1547deed3a2d7eaa" prot="private" virt="non-virtual"><scope>CognitiveNetwork</scope><name>cognitivenetworkUsage</name></member>
      <member refid="class_cognitive_network_1a7a57ad82736c0d8b03e7607b5c603b00" prot="protected" virt="non-virtual"><scope>CognitiveNetwork</scope><name>cognitiveoutput_list</name></member>
      <member refid="class_cognitive_network_1aabdf601ef8d8827cfeeacdc72fa85d37" prot="private" virt="non-virtual"><scope>CognitiveNetwork</scope><name>cognitiveoutput_pool</name></member>
      <member refid="class_universe_1ae9795d06e406c4322637825aa545aa2f" prot="protected" virt="non-virtual"><scope>CognitiveNetwork</scope><name>composite_forceparticle_list</name></member>
      <member refid="class_cognitive_network_1add96197c3dc51d94d06edb480fbc4a38" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>CreateCognitiveInput</name></member>
      <member refid="class_cognitive_network_1a0833f7b587f14e0c0778661a56bce957" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>CreateCognitiveInputs</name></member>
      <member refid="class_cognitive_network_1ac220350499bd323bd8f24ff0050cd60d" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>CreateCognitiveOutput</name></member>
      <member refid="class_cognitive_network_1a002df11f4389a122fc140c186ab665c9" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>CreateCognitiveOutputs</name></member>
      <member refid="class_cognitive_network_1af0dc86c7905baae6f2b5efb3a65b8819" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>CreateInterneuronSpace</name></member>
      <member refid="class_cognitive_network_1a2d671451d659079d5efb5cda10e48827" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>CreateInterneuronSpaces</name></member>
      <member refid="class_cognitive_network_1a9b5fcaf824d5b587775e7c44630affe6" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>CreateNeuron</name></member>
      <member refid="class_cognitive_network_1af9b2a136584c962e44114a7ee3d2804a" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>CreateNeurons</name></member>
      <member refid="class_cognitive_network_1a53d1047ae3ec721540b64b05abe01559" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>CreateNeurotransmitter</name></member>
      <member refid="class_cognitive_network_1ad877c495c9efdb582613a5af8d854ac3" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>CreateNeurotransmitters</name></member>
      <member refid="class_cognitive_network_1a5e0a782afc45d75d57fef91dd5513546" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>CreateOrbital</name></member>
      <member refid="class_cognitive_network_1a46d4189cf3e6b9af6190abe7b79539b4" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>CreateOrbitals</name></member>
      <member refid="class_cognitive_network_1ade8e9295b35790b136dca9084a1b7aa9" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>CreateSynapse</name></member>
      <member refid="class_cognitive_network_1ae6ae16f401e7699032ac9459132763c0" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>CreateSynapses</name></member>
      <member refid="class_universe_1a28615baf47d4558cbe5eebeed6575024" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>Creation</name></member>
      <member refid="class_cognitive_network_1a12e085cd47b7661190527fe55b6da8dc" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>DestroyCognitiveInput</name></member>
      <member refid="class_cognitive_network_1a00aa44de67dd0593a2498ce7a3b4c0f2" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>DestroyCognitiveInputs</name></member>
      <member refid="class_cognitive_network_1a8475cf7277d25532bb31926e768600e8" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>DestroyCognitiveOutput</name></member>
      <member refid="class_cognitive_network_1ad08191cbab02f26f69d25bc7e6b5c1ee" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>DestroyCognitiveOutputs</name></member>
      <member refid="class_cognitive_network_1acdda154177d3b3a92885c10f6b3dc274" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>DestroyInterneuronSpace</name></member>
      <member refid="class_cognitive_network_1a718833496332e0471186c9a886005c4a" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>DestroyInterneuronSpaces</name></member>
      <member refid="class_cognitive_network_1ab3318f517da206ad4286b6cc22acf520" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>DestroyNeuron</name></member>
      <member refid="class_cognitive_network_1af2f706043a0c227b93877e29b056f3c9" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>DestroyNeurons</name></member>
      <member refid="class_cognitive_network_1a0f943978df49ef879c43c15c81682a8a" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>DestroyNeurotransmitter</name></member>
      <member refid="class_cognitive_network_1a7f705e562562e9778ee0b5260dda9f09" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>DestroyNeurotransmitters</name></member>
      <member refid="class_cognitive_network_1aefecb3a2464f7f21449e522af5119c63" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>DestroyOrbital</name></member>
      <member refid="class_cognitive_network_1a0ee8259d26e30779bf06471fb8a10bb5" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>DestroyOrbitals</name></member>
      <member refid="class_cognitive_network_1a08b87aa9a0823355ef7cef77414dc6dc" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>DestroySynapse</name></member>
      <member refid="class_cognitive_network_1a141e9e8e6337d42fc19edd75bb50e47b" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>DestroySynapses</name></member>
      <member refid="class_cognitive_network_1a79f0541fde6dd50f8e87f3f46d849b95" prot="protected" virt="non-virtual"><scope>CognitiveNetwork</scope><name>dimension_list</name></member>
      <member refid="class_cognitive_network_1a18e532233f30c3cd23a62d3a51361890" prot="private" virt="non-virtual"><scope>CognitiveNetwork</scope><name>duration_since_last_event</name></member>
      <member refid="class_universe_1a015b19f6d5ad84ebaa9e3e7c8352389c" prot="protected" virt="non-virtual"><scope>CognitiveNetwork</scope><name>elementary_force_list</name></member>
      <member refid="class_universe_1aeb2e63cf49f0b5595e6c15109863bd3b" prot="protected" virt="non-virtual"><scope>CognitiveNetwork</scope><name>elementary_particle_list</name></member>
      <member refid="class_universe_1a982502e46868a00a9111738ccc9355c2" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>ExtendLife</name></member>
      <member refid="class_cognitive_network_1a6bb3fc06029c260dd658d0db072625a7" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>GetCapacity</name></member>
      <member refid="class_cognitive_network_1ab67da8690b83618d88f88411121d7071" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>GetChannelMax</name></member>
      <member refid="class_cognitive_network_1ad7f5cc836340017d38c22b57e177fc91" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>GetChannelMin</name></member>
      <member refid="class_cognitive_network_1a2ff68a0d11cdb29af2f05a69a11911a4" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>GetCognitiveInput</name></member>
      <member refid="class_cognitive_network_1a92b896643b881e4030401e0f7fd256bf" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>GetCognitiveInputs</name></member>
      <member refid="class_universe_1a1ea2b7e438bfdc7dd599aa59c310b126" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>GetCognitiveNetwork</name></member>
      <member refid="class_cognitive_network_1af33f3ff9dd829da73d183d2624f24964" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>GetCognitiveNetworkDeviceTag</name></member>
      <member refid="class_universe_1a06968a24194280a43f077c5b77379ea8" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>GetCognitiveNetworks</name></member>
      <member refid="class_cognitive_network_1a947fa4c50fecc4008d2bcfc96a272ffc" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>GetCognitiveOutput</name></member>
      <member refid="class_cognitive_network_1acdf847165899c36d6d9d6843ecc27218" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>GetCognitiveOutputs</name></member>
      <member refid="class_universe_1a3e2acc1d75765a6e8e852fca919c5b96" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>GetCompositeForceParticle</name></member>
      <member refid="class_universe_1aed37d7224b4e31bdfb0632e39bf19694" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>GetCompositeForceParticles</name></member>
      <member refid="class_cognitive_network_1a160bb447671609eb14b1b8043639ac74" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>GetCounter</name></member>
      <member refid="class_universe_1ab79a380dee684c6dc304b571f4d28645" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>GetDimension</name></member>
      <member refid="class_universe_1a1869fc7bf43827378bab5a701f7f917a" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>GetDimensions</name></member>
      <member refid="class_cognitive_network_1aa64c93ecec84b57b25e1fdb173795f9b" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>GetDisabled</name></member>
      <member refid="class_cognitive_network_1a09e5a1c774c84529a7adfe56fadb7467" prot="public" virt="virtual"><scope>CognitiveNetwork</scope><name>GetElectromagnetic</name></member>
      <member refid="class_cognitive_network_1a8c4e0454068f714691ae250f795cdb67" prot="public" virt="virtual"><scope>CognitiveNetwork</scope><name>GetElectromagneticElectroweak</name></member>
      <member refid="class_universe_1a9506017d944cb64e67567477c1505a53" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>GetElementaryForce</name></member>
      <member refid="class_universe_1a6a8ed579b2eedd3aceebda9f3d78aa0e" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>GetElementaryForces</name></member>
      <member refid="class_universe_1acef54e17666d17078c522388f8f6e4f9" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>GetElementaryParticle</name></member>
      <member refid="class_universe_1a168fd9bf7602adcba1de5dd93a212775" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>GetElementaryParticles</name></member>
      <member refid="class_cognitive_network_1af23b9bce2587ccf3c8204be33fc76c61" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>GetEnergy</name></member>
      <member refid="class_cognitive_network_1a3a9be1c6697d063b0836cdcdc7a2600c" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>GetGateKeeper</name></member>
      <member refid="class_cognitive_network_1a4b5150310288c52f00ecb745ae9e7f86" prot="public" virt="virtual"><scope>CognitiveNetwork</scope><name>GetGravitation</name></member>
      <member refid="class_cognitive_network_1a0119d61e86ea6b84ad7f69f88d59d008" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>GetInterneuronSpace</name></member>
      <member refid="class_cognitive_network_1a4daf966882d527b784bd359794ad39ca" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>GetInterneuronSpaces</name></member>
      <member refid="class_universe_1a69de663cf2e32e65ed28c44ae666db3a" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>GetMatter</name></member>
      <member refid="class_universe_1a4307a62e183fed8cf2b92be0f6014688" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>GetMatters</name></member>
      <member refid="class_universe_1aaa03fb8178d790afd992dd094bb64b47" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>GetMonomer</name></member>
      <member refid="class_universe_1aca82a914e0f8bd7cd1ec80a7220f0a0e" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>GetMonomers</name></member>
      <member refid="class_cognitive_network_1ac12f0af92d878d45dca7303dc065c383" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>GetNeuron</name></member>
      <member refid="class_cognitive_network_1af81132245e486c496a055f54a5a520d0" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>GetNeuronPool</name></member>
      <member refid="class_cognitive_network_1a0e9e37e976a7ca5ee625e2d7b36fd7ea" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>GetNeurons</name></member>
      <member refid="class_cognitive_network_1a85890c201376061b1ffbe8fdfc1a8633" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>GetNeurotransmitter</name></member>
      <member refid="class_cognitive_network_1a4e5b1d60cda4ddb4bd04d8dca42b7a5b" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>GetNeurotransmitterPool</name></member>
      <member refid="class_cognitive_network_1ac56b1585864b372c8897dcb5720d00a7" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>GetNeurotransmitters</name></member>
      <member refid="class_cognitive_network_1a1c92a8f6c42788cf8ca890f062f853a3" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>GetObjectType</name></member>
      <member refid="class_cognitive_network_1a69655ef1e12bac5f74c2eb85c72720f4" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>GetOrbital</name></member>
      <member refid="class_cognitive_network_1af5995eaa4ba35c555a6b65d895451f25" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>GetOrbitalPool</name></member>
      <member refid="class_cognitive_network_1aa21d28ffc3b507236a7dad64663f6c42" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>GetOrbitals</name></member>
      <member refid="class_universe_1a3774f14a13a55827a1a4eea0a404edcb" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>GetPoint</name></member>
      <member refid="class_universe_1a765c6c658b7a465cd92418690db846ae" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>GetPoints</name></member>
      <member refid="class_universe_1a2d5d3924a7d7ffd2a5f47be9f137d86e" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>GetPolymer</name></member>
      <member refid="class_universe_1aac5d1c1a3a3ba56c8ca7115a85b2c239" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>GetPolymers</name></member>
      <member refid="class_cognitive_network_1a03d744f9d0d420c1e044646bc6bd2552" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>GetRestingPotential</name></member>
      <member refid="class_universe_1a9f7b74fc21d45ddaa78aa18e9a337bcd" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>GetSolid</name></member>
      <member refid="class_universe_1a669fc068dd7820a5af309bfbe67199aa" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>GetSolids</name></member>
      <member refid="class_cognitive_network_1a277247686f8af159e7a7beb0ec379225" prot="public" virt="virtual"><scope>CognitiveNetwork</scope><name>GetStrong</name></member>
      <member refid="class_cognitive_network_1a942ca90561fedae46136de620accbfea" prot="public" virt="virtual"><scope>CognitiveNetwork</scope><name>GetStrongFundamental</name></member>
      <member refid="class_cognitive_network_1acfa5de663b3e686c4d9ea1a3bb483b11" prot="public" virt="virtual"><scope>CognitiveNetwork</scope><name>GetStrongResidual</name></member>
      <member refid="class_cognitive_network_1a1944aaa13667bc267e6ef44892da969d" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>GetSynapse</name></member>
      <member refid="class_cognitive_network_1ae0068b9df823e1b10fed3c73f1cb4702" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>GetSynapsePool</name></member>
      <member refid="class_cognitive_network_1aa3376f2e7aed9639c2b5ba27aa6fb314" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>GetSynapses</name></member>
      <member refid="class_cognitive_network_1ad293916cfa0e454ef40d7e228d0dcba3" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>GetUsage</name></member>
      <member refid="class_cognitive_network_1a761db75ac8eab7b4625e5a398891bd12" prot="public" virt="virtual"><scope>CognitiveNetwork</scope><name>GetWeak</name></member>
      <member refid="class_cognitive_network_1aa6342c390fe8e7c648b4c6bc8f93ba4a" prot="public" virt="virtual"><scope>CognitiveNetwork</scope><name>GetWeakElectroweak</name></member>
      <member refid="class_cognitive_network_1aaf69f6e0cc0084eb748ef1540c773f85" prot="protected" virt="non-virtual"><scope>CognitiveNetwork</scope><name>interneuronspace_list</name></member>
      <member refid="class_cognitive_network_1a9ac40480942ca8287c09533a6e5997cd" prot="private" virt="non-virtual"><scope>CognitiveNetwork</scope><name>interneuronspace_pool</name></member>
      <member refid="class_universe_1a8fdaa6d06584e1ef50c4c613b22b786e" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>IsDead</name></member>
      <member refid="class_cognitive_network_1afe2b8f2a9decc4aa34e349c4b31132ca" prot="private" virt="non-virtual"><scope>CognitiveNetwork</scope><name>m_addStatus</name></member>
      <member refid="class_cognitive_network_1aceec291fd547c96cc0acdceb0b8ac395" prot="private" virt="non-virtual"><scope>CognitiveNetwork</scope><name>m_ChannelMax</name></member>
      <member refid="class_cognitive_network_1a5571556d812abd789a682a606e6678c8" prot="private" virt="non-virtual"><scope>CognitiveNetwork</scope><name>m_ChannelMin</name></member>
      <member refid="class_cognitive_network_1a97e0dfbeec1fda74336a6a01991252ad" prot="private" virt="non-virtual"><scope>CognitiveNetwork</scope><name>m_Counter</name></member>
      <member refid="class_cognitive_network_1a790c699ecb3c98be0f3dada86f795e0b" prot="private" virt="non-virtual"><scope>CognitiveNetwork</scope><name>m_GateKeeper</name></member>
      <member refid="class_cognitive_network_1a79cf90e648303fbae25128053e1e74d2" prot="private" virt="non-virtual"><scope>CognitiveNetwork</scope><name>m_RestingPotential</name></member>
      <member refid="class_cognitive_network_1a6fca1826ad4e0140cb1f1060891a3322" prot="private" virt="non-virtual"><scope>CognitiveNetwork</scope><name>m_Spike</name></member>
      <member refid="class_cognitive_network_1ad6e12ec54ab456f6fad0ac33ee5836d3" prot="private" virt="non-virtual"><scope>CognitiveNetwork</scope><name>m_Tag</name></member>
      <member refid="class_cognitive_network_1a13ad3041f8dc46d58fd9ef6636fca04f" prot="private" virt="non-virtual"><scope>CognitiveNetwork</scope><name>m_TimeDilation</name></member>
      <member refid="class_cognitive_network_1adcdba17a98dffbbb12b199630d0cb83e" prot="private" virt="non-virtual"><scope>CognitiveNetwork</scope><name>m_TimeThreshold</name></member>
      <member refid="class_universe_1a409650bc0425fc22c7713487a2a6dd8e" prot="protected" virt="non-virtual"><scope>CognitiveNetwork</scope><name>matter_list</name></member>
      <member refid="class_universe_1a3d55ba29f95a9793b69c01f7942eca9f" prot="protected" virt="non-virtual"><scope>CognitiveNetwork</scope><name>monomer_list</name></member>
      <member refid="class_cognitive_network_1abbb9ff97e1b9cd61602d95f44c30132e" prot="protected" virt="non-virtual"><scope>CognitiveNetwork</scope><name>neuron_list</name></member>
      <member refid="class_cognitive_network_1a8873930c11fbe7e1c8f1850961cc73ec" prot="private" virt="non-virtual"><scope>CognitiveNetwork</scope><name>neuron_pool</name></member>
      <member refid="class_cognitive_network_1a7018bee3dbf538c3d0c81a64aa002ab8" prot="protected" virt="non-virtual"><scope>CognitiveNetwork</scope><name>neurotransmitter_list</name></member>
      <member refid="class_cognitive_network_1a8fdef3aed1bd95b0980885c77f423a12" prot="private" virt="non-virtual"><scope>CognitiveNetwork</scope><name>neurotransmitter_pool</name></member>
      <member refid="class_cognitive_network_1a1bfe6f5f289e2fe876f3f7ccd459cbc6" prot="private" virt="non-virtual"><scope>CognitiveNetwork</scope><name>object_disabled</name></member>
      <member refid="class_cognitive_network_1a121f4a2db12d5fbaf8d7b4f38d2b8af5" prot="private" virt="non-virtual"><scope>CognitiveNetwork</scope><name>object_energy</name></member>
      <member refid="class_cognitive_network_1a261409a3a19a76858743769605508278" prot="private" virt="non-virtual"><scope>CognitiveNetwork</scope><name>object_energy_threshold</name></member>
      <member refid="class_cognitive_network_1ae9c10ceb2a44c5458f93d4e66d02b245" prot="private" virt="non-virtual"><scope>CognitiveNetwork</scope><name>object_initialised</name></member>
      <member refid="class_cognitive_network_1a2d5ffaceb2676eeb45ed2879dc9be9ff" prot="private" virt="non-virtual"><scope>CognitiveNetwork</scope><name>object_size</name></member>
      <member refid="class_cognitive_network_1aaae2978be9a9acb8d7ff0de6495ec9b0" prot="private" virt="non-virtual"><scope>CognitiveNetwork</scope><name>orbital_connection_list</name></member>
      <member refid="class_cognitive_network_1a263efd10857d5507c0e889e48f7329fe" prot="protected" virt="non-virtual"><scope>CognitiveNetwork</scope><name>orbital_list</name></member>
      <member refid="class_cognitive_network_1a58920f62f4c0dc71bb62b1480c78a356" prot="private" virt="non-virtual"><scope>CognitiveNetwork</scope><name>orbital_pool</name></member>
      <member refid="class_universe_1a9dc8abd2f8f84318722184f38e1b8cc7" prot="protected" virt="non-virtual"><scope>CognitiveNetwork</scope><name>point_list</name></member>
      <member refid="class_cognitive_network_1ac97c08a0af7dc0d02fbe059827b6be87" prot="public" virt="virtual"><scope>CognitiveNetwork</scope><name>PollElementaryForce</name></member>
      <member refid="class_universe_1a4d898757f2d67ca5ab5d504388d6199a" prot="protected" virt="non-virtual"><scope>CognitiveNetwork</scope><name>polymer_list</name></member>
      <member refid="class_cognitive_network_1a8b20f9cf5c0857072278036c26541de5" prot="private" virt="non-virtual"><scope>CognitiveNetwork</scope><name>previous_event_time</name></member>
      <member refid="class_cognitive_network_1af79bf7f8b61d5392df7a87bd444eb550" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>RemoveCognitiveInput</name></member>
      <member refid="class_cognitive_network_1aaaf93e7c732b1e1e81060f82ff73c93a" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>RemoveCognitiveInputs</name></member>
      <member refid="class_cognitive_network_1a9874b11ac465c84ccf7baab0a40fb84e" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>RemoveCognitiveOutput</name></member>
      <member refid="class_cognitive_network_1a2f4956b004c828f0165f28c03e089144" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>RemoveCognitiveOutputs</name></member>
      <member refid="class_cognitive_network_1a04e38cea356f1c7ac31c4df5e19d759c" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>RemoveInterneuronSpace</name></member>
      <member refid="class_cognitive_network_1a994c5f93447a82429809c89aa08d3dc1" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>RemoveInterneuronSpaces</name></member>
      <member refid="class_cognitive_network_1a33e911ec87d902a8fd8bb6d9e23c4261" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>RemoveNeuron</name></member>
      <member refid="class_cognitive_network_1a130985ff0aa14b2a17fc2c589e65f868" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>RemoveNeurons</name></member>
      <member refid="class_cognitive_network_1ac0728c12a6d4bb87b6e8c9163435c8e6" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>RemoveNeurotransmitter</name></member>
      <member refid="class_cognitive_network_1a5e706084296ce84ff6884c1506213b03" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>RemoveNeurotransmitters</name></member>
      <member refid="class_cognitive_network_1a6ed0e198f6dcfdd45d57df5d3ad5754c" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>RemoveOrbital</name></member>
      <member refid="class_cognitive_network_1af7834d400995607c2a5a5eac7b5e006d" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>RemoveOrbitals</name></member>
      <member refid="class_cognitive_network_1a0764ede1c23caa7022a01657a0e3726b" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>RemoveSynapse</name></member>
      <member refid="class_cognitive_network_1a87d6628f388baed1edb8efda9062c443" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>RemoveSynapses</name></member>
      <member refid="class_cognitive_network_1a8af8ed2605263e57a32e457aba2af99d" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>ResetParameters</name></member>
      <member refid="class_universe_1aeda74e3902c0e56c0c09779854045cde" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>ReturnEnergy</name></member>
      <member refid="class_cognitive_network_1a055b3711835b8d134356298f8975f04d" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>SetCapacity</name></member>
      <member refid="class_cognitive_network_1a9c208d66ee284adfceb3b2dd76532a00" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>SetChannelMax</name></member>
      <member refid="class_cognitive_network_1a6e2a6ced4ede9a4eef721d6c5aac433c" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>SetChannelMin</name></member>
      <member refid="class_cognitive_network_1a99f801aeca299186cc706696696749b1" prot="public" virt="virtual"><scope>CognitiveNetwork</scope><name>SetCharge</name></member>
      <member refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>SetCognitiveNetworkDeviceTag</name></member>
      <member refid="class_cognitive_network_1a23c6a11d9f15a141f69a9779f174bfb3" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>SetCounter</name></member>
      <member refid="class_universe_1aa22202ae740eb1355529afcb13285e91" prot="public" virt="virtual" ambiguityscope="Universe::"><scope>CognitiveNetwork</scope><name>SetCounter</name></member>
      <member refid="class_cognitive_network_1ac29e676c84244f5b64c0083a0efead28" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>SetDisabled</name></member>
      <member refid="class_cognitive_network_1a31764cd5746369d16b45f2ff74806a0b" prot="public" virt="virtual"><scope>CognitiveNetwork</scope><name>SetElectromagnetic</name></member>
      <member refid="class_cognitive_network_1a270f6842ec14b3e5b80dedf7b48ea6f4" prot="public" virt="virtual"><scope>CognitiveNetwork</scope><name>SetElectromagneticElectroweak</name></member>
      <member refid="class_cognitive_network_1af2f96107858445a0b7be2be6af5b5c01" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>SetEnergy</name></member>
      <member refid="class_cognitive_network_1a83bc4047721417212fa1bbbfa64da5ee" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>SetGateKeeper</name></member>
      <member refid="class_cognitive_network_1af9f082a70f0cc25a3f818d9eace5a527" prot="public" virt="virtual"><scope>CognitiveNetwork</scope><name>SetGravitation</name></member>
      <member refid="class_universe_1ac3443dd59b61ae3110f07f681f63ed0a" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>SetLifespan</name></member>
      <member refid="class_cognitive_network_1aeb59b511e2ef526c43df1d24a468b571" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>SetNeuronPool</name></member>
      <member refid="class_cognitive_network_1aaa10c36c0b0024fa717d8d61a4a06920" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>SetNeurotransmitterPool</name></member>
      <member refid="class_cognitive_network_1ad95a0b25c7f61fc52322938eb13c9e3e" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>SetObjectType</name></member>
      <member refid="class_cognitive_network_1aaa3929bfba068659e9681f85deaf79cb" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>SetOrbitalPool</name></member>
      <member refid="class_cognitive_network_1a3fc6d08413bfd4350f94d6f2627eedc7" prot="public" virt="virtual"><scope>CognitiveNetwork</scope><name>SetSpin</name></member>
      <member refid="class_cognitive_network_1a50f2a12c9873e623d6247318b041ba30" prot="public" virt="virtual"><scope>CognitiveNetwork</scope><name>SetStrong</name></member>
      <member refid="class_cognitive_network_1ac54286eea279f5caa98b642b9084fd55" prot="public" virt="virtual"><scope>CognitiveNetwork</scope><name>SetStrongFundamental</name></member>
      <member refid="class_cognitive_network_1a6f7210dd8c2786518329faa61b6e14d5" prot="public" virt="virtual"><scope>CognitiveNetwork</scope><name>SetStrongResidual</name></member>
      <member refid="class_cognitive_network_1a30f35d1bff2e1e3a5a2d921791cfe6b8" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>SetSynapsePool</name></member>
      <member refid="class_cognitive_network_1a8b6b4afc47df279604be13bce77f5b0a" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>SetUsage</name></member>
      <member refid="class_cognitive_network_1ab39c9eed50da6d3630c4498ae64b804e" prot="public" virt="virtual"><scope>CognitiveNetwork</scope><name>SetWeak</name></member>
      <member refid="class_cognitive_network_1a116f6818986a622e4a318857859e2495" prot="public" virt="virtual"><scope>CognitiveNetwork</scope><name>SetWeakElectroweak</name></member>
      <member refid="class_universe_1a747f9d3cf0b2caada4461cb7b12ea17b" prot="protected" virt="non-virtual"><scope>CognitiveNetwork</scope><name>solid_list</name></member>
      <member refid="class_cognitive_network_1a9218de9d63b10b313df289d1312c81e0" prot="protected" virt="non-virtual"><scope>CognitiveNetwork</scope><name>synapse_list</name></member>
      <member refid="class_cognitive_network_1acce7f5451dd50c27689d2239fbd66394" prot="private" virt="non-virtual"><scope>CognitiveNetwork</scope><name>synapse_pool</name></member>
      <member refid="class_universe_1aa220508c4cc12b02c6fe494622ebb58d" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>TheCalculatedTimeNow</name></member>
      <member refid="class_universe_1ae54d34c5d695917e074b8e07e8820bdb" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>TheTimeNow</name></member>
      <member refid="class_universe_1a3ce4365c727cb6eb5b650146a4188b9b" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>time_dimension_pointer</name></member>
      <member refid="class_cognitive_network_1a00751b9bc40bf22efd7a86a58478c760" prot="private" virt="non-virtual"><scope>CognitiveNetwork</scope><name>time_object_created</name></member>
      <member refid="class_cognitive_network_1abeac08d7cbf9df4b36de40aa9301e978" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>toggleDisabled</name></member>
      <member refid="class_universe_1a4d137a146dd3c2514dfb692dfbab6984" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>Universe</name></member>
      <member refid="class_universe_1a1210ce56049f1fc67f53aeda223bb82b" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>Universe</name></member>
      <member refid="class_universe_1a03af7455263d3028b55ca5dc93ebb6ba" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>Universe</name></member>
      <member refid="class_cognitive_network_1a05dccc7759456df13a732899a8f1f4c4" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>Update</name></member>
      <member refid="class_cognitive_network_1aa37dda869174e4eef986cca4ce3e55d2" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>UpdateCycle</name></member>
      <member refid="class_universe_1a0d79e614e1af951c06b78cb5768f9c8e" prot="public" virt="non-virtual" ambiguityscope="Universe::"><scope>CognitiveNetwork</scope><name>UpdateCycle</name></member>
      <member refid="class_universe_1a63e878aaf03f1800b255e9a089a72a8b" prot="public" virt="non-virtual"><scope>CognitiveNetwork</scope><name>UseEnergy</name></member>
      <member refid="class_cognitive_network_1a17142cc6f0bb3894e63f6c66fa401778" prot="public" virt="virtual"><scope>CognitiveNetwork</scope><name>~CognitiveNetwork</name></member>
      <member refid="class_universe_1ad4d90f6f2727992762c6b409d3d3d228" prot="public" virt="virtual"><scope>CognitiveNetwork</scope><name>~Universe</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
