<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="class_neuron" kind="class" language="C++" prot="public">
    <compoundname>Neuron</compoundname>
    <basecompoundref refid="class_cognitive_network" prot="public" virt="non-virtual">CognitiveNetwork</basecompoundref>
    <derivedcompoundref refid="class_membrane" prot="public" virt="non-virtual">Membrane</derivedcompoundref>
    <derivedcompoundref refid="class_soma" prot="public" virt="non-virtual">Soma</derivedcompoundref>
    <includes refid="neuron_8h" local="no">neuron.h</includes>
    <innerclass refid="struct_neuron_1_1_object_connection" prot="protected">Neuron::ObjectConnection</innerclass>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_neuron_1a2ae3e36fe53bb2c406559e5a7c309027" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Orbital</definition>
        <argsstring></argsstring>
        <name>Orbital</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="16" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="16" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_neuron_1abb3745c6a8727f4ceb8db9e2258b90b5" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_neuron" kindref="compound">Neuron</ref> * &gt;</type>
        <definition>std::vector&lt;Neuron*&gt; Neuron::soma_list</definition>
        <argsstring></argsstring>
        <name>soma_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="133" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="133" bodyend="-1"/>
        <referencedby refid="class_neuron_1a32593a869b25c778c1856c36704f49cf" compoundref="neuron_8cc" startline="105" endline="114">CreateSoma</referencedby>
        <referencedby refid="class_neuron_1a2016d83b02bfe9e5548d5c24ef31dded" compoundref="neuron_8cc" startline="116" endline="139">CreateSomas</referencedby>
        <referencedby refid="class_neuron_1a6198fa352056e3bbe1e979adf088b900" compoundref="neuron_8cc" startline="162" endline="171">AddSoma</referencedby>
        <referencedby refid="class_neuron_1a78a0f48a669b6ea20280829304e51de2" compoundref="neuron_8cc" startline="173" endline="192">AddSomas</referencedby>
        <referencedby refid="class_neuron_1a8539a7965349078a7b1c1265895daefa" compoundref="neuron_8cc" startline="206" endline="209">GetSoma</referencedby>
        <referencedby refid="class_neuron_1a867fbd498b54c115a2c8769f83c48020" compoundref="neuron_8cc" startline="211" endline="214">GetSomas</referencedby>
        <referencedby refid="class_neuron_1a4d1dc3a9f30196fe2b09dfbfc0a567bb" compoundref="neuron_8cc" startline="387" endline="444">Update</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_neuron_1a878a5a42025ba8205adeb9a50b2c1457" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_neuron" kindref="compound">Neuron</ref> * &gt;</type>
        <definition>std::vector&lt;Neuron*&gt; Neuron::membrane_list</definition>
        <argsstring></argsstring>
        <name>membrane_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="134" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="134" bodyend="-1"/>
        <referencedby refid="class_neuron_1af06efbcc1a96af0290673e9e048267cf" compoundref="neuron_8cc" startline="217" endline="226">CreateMembrane</referencedby>
        <referencedby refid="class_neuron_1a5f6f460c6a98319a05c3ba06d14e6f60" compoundref="neuron_8cc" startline="228" endline="247">CreateMembranes</referencedby>
        <referencedby refid="class_neuron_1a99d4b64f128e2bfbffec3c5d476a2ca3" compoundref="neuron_8cc" startline="270" endline="279">AddMembrane</referencedby>
        <referencedby refid="class_neuron_1a9e1f79bf8e991893f4ef318841932a13" compoundref="neuron_8cc" startline="281" endline="300">AddMembranes</referencedby>
        <referencedby refid="class_neuron_1a5bc4e67c5f2d8a3bcd160aa3f5086aec" compoundref="neuron_8cc" startline="314" endline="317">GetMembrane</referencedby>
        <referencedby refid="class_neuron_1ac759d9589c0505332e8238cafbc8fa66" compoundref="neuron_8cc" startline="319" endline="322">GetMembranes</referencedby>
        <referencedby refid="class_neuron_1a4d1dc3a9f30196fe2b09dfbfc0a567bb" compoundref="neuron_8cc" startline="387" endline="444">Update</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_neuron_1a00b1e2e5f9d224759df1aa54093092ba" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_universe" kindref="compound">Universe</ref> * &gt;</type>
        <definition>std::vector&lt;Universe*&gt; Neuron::visualisation_list</definition>
        <argsstring></argsstring>
        <name>visualisation_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="135" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="135" bodyend="-1"/>
        <referencedby refid="class_axon_1a472ee760a1727072afaff0035d1eedd9" compoundref="axon_8cc" startline="197" endline="243">Axon::Update</referencedby>
        <referencedby refid="class_axon_bouton_1a26f89bac681b8f0894fe1ae249733917" compoundref="axonbouton_8cc" startline="184" endline="251">AxonBouton::Update</referencedby>
        <referencedby refid="class_axon_branch_1a5a80bcccdc2be9f77fca25131937b52f" compoundref="axonbranch_8cc" startline="196" endline="235">AxonBranch::Update</referencedby>
        <referencedby refid="class_axon_hillock_1a5a6a6a93a98b32c303b9ee6320c09909" compoundref="axonhillock_8cc" startline="197" endline="255">AxonHillock::Update</referencedby>
        <referencedby refid="class_dendrite_1a2e7bfde37bc7aec2547253ad038aaa04" compoundref="dendrite_8cc" startline="197" endline="276">Dendrite::Update</referencedby>
        <referencedby refid="class_dendrite_branch_1a8540dfafeb5bd45f782ab31b8231b10f" compoundref="dendritebranch_8cc" startline="197" endline="251">DendriteBranch::Update</referencedby>
        <referencedby refid="class_dendrite_cleft_1a3a75af4d6fd97c9635134509f170a04e" compoundref="dendritecleft_8cc" startline="202" endline="260">DendriteCleft::Update</referencedby>
        <referencedby refid="class_neuron_1a4d1dc3a9f30196fe2b09dfbfc0a567bb" compoundref="neuron_8cc" startline="387" endline="444">Update</referencedby>
        <referencedby refid="class_neuron_1a9af31418d1232135bf5074f6a3d5dbf1" compoundref="neuron_8h" startline="130" endline="130">GetVisualisationList</referencedby>
        <referencedby refid="class_soma_1a211587ef21a7932c2f8f0345b1d32f57" compoundref="soma_8cc" startline="332" endline="411">Soma::Update</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_neuron_1a8259952162df5c8bb66eb78126feafe6" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="struct_neuron_1_1_object_connection" kindref="compound">ObjectConnection</ref> &gt;</type>
        <definition>std::vector&lt;ObjectConnection&gt; Neuron::object_connection_list</definition>
        <argsstring></argsstring>
        <name>object_connection_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="148" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_neuron_1a182d8061d0beac5ede8b5ea9ac21a1c9" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Neuron::neuron_type</definition>
        <argsstring></argsstring>
        <name>neuron_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="151" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_neuron_1a8d900856e69534603cd984fef05811be" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Neuron::m_Tag</definition>
        <argsstring></argsstring>
        <name>m_Tag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="152" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_neuron_1abf8b1f840cd466fb23f2e778edef0a92" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Neuron::membrane_pool</definition>
        <argsstring></argsstring>
        <name>membrane_pool</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="153" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_neuron_1ada166022e3abc5a5e32db25343f8f765" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Neuron::object_size</definition>
        <argsstring></argsstring>
        <name>object_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="154" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_neuron_1a225fc0b7f0586a11fb62fee76f3f1acb" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Neuron::m_RestingPotential</definition>
        <argsstring></argsstring>
        <name>m_RestingPotential</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="155" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_neuron_1ad936ed27ba3b0f5d8fe18d1dd2fd5fcf" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Neuron::object_initialised</definition>
        <argsstring></argsstring>
        <name>object_initialised</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="156" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_neuron_1a09ea127c2427653e15bfce989c717b3f" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Neuron::object_disabled</definition>
        <argsstring></argsstring>
        <name>object_disabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="157" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_neuron_1aac5b1f8a26738f915778ebf25183f258" prot="private" static="no" mutable="no">
        <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
        <definition>std::chrono::time_point&lt;Clock&gt; Neuron::time_object_created</definition>
        <argsstring></argsstring>
        <name>time_object_created</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="158" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_neuron_1ab66c0975e682e5339cabc50981732ae5" prot="private" static="no" mutable="no">
        <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
        <definition>std::chrono::time_point&lt;Clock&gt; Neuron::previous_event_time</definition>
        <argsstring></argsstring>
        <name>previous_event_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="159" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_neuron_1ab3cea312e56a8b3bb4707a1c2654fc36" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Neuron::duration_since_last_event</definition>
        <argsstring></argsstring>
        <name>duration_since_last_event</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="160" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_neuron_1a82f1de3ea8317c97f4968a06d13ec8ca" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Neuron::m_addStatus</definition>
        <argsstring></argsstring>
        <name>m_addStatus</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="161" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_neuron_1ad6955bbce8c9b6c6ccde10c8022d9a07" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Neuron::m_Counter</definition>
        <argsstring></argsstring>
        <name>m_Counter</name>
        <briefdescription>
<para>Member variable &quot;m_Counter&quot;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="162" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_neuron_1a2dba550b29497723039a3aa193934ab2" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Neuron::object_energy</definition>
        <argsstring></argsstring>
        <name>object_energy</name>
        <briefdescription>
<para>Member variable &quot;object_energy&quot;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="163" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_neuron_1ad0dd6393bdd85a09e35179cabd1083a2" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Neuron::object_energy_threshold</definition>
        <argsstring></argsstring>
        <name>object_energy_threshold</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="164" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_neuron_1ab35fb4d7f3cc2b9491a2d9eb9d75c39a" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Neuron::m_Spike</definition>
        <argsstring></argsstring>
        <name>m_Spike</name>
        <briefdescription>
<para>Member variable &quot;m_Spike&quot;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="165" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_neuron_1a44d4be63f49259ad3f475c695e38aa88" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Neuron::m_GateKeeper</definition>
        <argsstring></argsstring>
        <name>m_GateKeeper</name>
        <briefdescription>
<para>Member variable &quot;m_GateKeeper&quot;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="166" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_neuron_1aaba16c243f6b227b44609475e4e9a8cc" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Neuron::m_ChannelMin</definition>
        <argsstring></argsstring>
        <name>m_ChannelMin</name>
        <briefdescription>
<para>Member variable &quot;m_ChannelMin&quot;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="167" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_neuron_1a79b66d9cd9cc28601bffe154bee05525" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Neuron::m_ChannelMax</definition>
        <argsstring></argsstring>
        <name>m_ChannelMax</name>
        <briefdescription>
<para>Member variable &quot;m_ChannelMax&quot;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="168" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_neuron_1aa7f0b4aaf00fa2f9b8de0a0932d5fb65" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Neuron::m_TimeDilation</definition>
        <argsstring></argsstring>
        <name>m_TimeDilation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="170" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_neuron_1a6e0b63b5c0aada57da5f5e4fe71f3955" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Neuron::m_TimeThreshold</definition>
        <argsstring></argsstring>
        <name>m_TimeThreshold</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="171" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_neuron_1a2ca1ab8d7891fbd10646a936e272cb7d" prot="private" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int Neuron::neuronCounter</definition>
        <argsstring></argsstring>
        <name>neuronCounter</name>
        <briefdescription>
<para>Member variable &quot;elementaryParticleCounter&quot;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="173" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_neuron_1a56cdde5298abf121898ebd4ea99a738b" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Neuron::neuronCapacity</definition>
        <argsstring></argsstring>
        <name>neuronCapacity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="174" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_neuron_1a785cf2a73a206d056db9633d447dbfb3" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Neuron::neuronUsage</definition>
        <argsstring></argsstring>
        <name>neuronUsage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="175" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_neuron_1a575bb396a026333541f5ff3ec1a90602" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Neuron::soma_pool</definition>
        <argsstring></argsstring>
        <name>soma_pool</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="177" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="177" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_neuron_1a823487d01615fadb8ac19a2768dd9d96" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Neuron::Neuron</definition>
        <argsstring>()</argsstring>
        <name>Neuron</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="18" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="18" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1acbc433cac4f27aa7f4e05be26c336aa5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Neuron::Neuron</definition>
        <argsstring>(unsigned int object_type)</argsstring>
        <name>Neuron</name>
        <param>
          <type>unsigned int</type>
          <declname>object_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="20" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="20" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1a4611499895417d44250c452d0fc719a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Neuron::Neuron</definition>
        <argsstring>(unsigned int object_type, std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>Neuron</name>
        <param>
          <type>unsigned int</type>
          <declname>object_type</declname>
        </param>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="22" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="22" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1a6839febd20fb8f776151e00142411a56" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Neuron::Neuron</definition>
        <argsstring>(unsigned int object_type, std::chrono::time_point&lt; Clock &gt; event_time, CognitiveNetwork &amp;cognitivenetwork_connector)</argsstring>
        <name>Neuron</name>
        <param>
          <type>unsigned int</type>
          <declname>object_type</declname>
        </param>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> &amp;</type>
          <declname>cognitivenetwork_connector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="24" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="24" bodyend="35"/>
        <references refid="class_neuron_1a4c154fecb0b689d7da9d8d274f067ccf" compoundref="neuron_8cc" startline="27" endline="85">ResetParameters</references>
        <references refid="class_universe_1a28615baf47d4558cbe5eebeed6575024" compoundref="universe_8cc" startline="57" endline="61">Universe::Creation</references>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1aecd41febe74ef417230cd74af0c8b801" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual Neuron::~Neuron</definition>
        <argsstring>()</argsstring>
        <name>~Neuron</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default destructor </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="38" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="38" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1a0b5fe55bf939808986b3697d18a834f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int Neuron::GetCounter</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>GetCounter</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="40" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="40" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1a93cce70c19c8e70accaa31908d3f29f6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int Neuron::GetCapacity</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>GetCapacity</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="41" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="41" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1a8f5766ea61dc46b7a25361df540755ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Neuron::SetCapacity</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int val)</argsstring>
        <name>SetCapacity</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="42" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="42" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1a745b090da1b8f8fc7e3cf0ca06dfb117" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int Neuron::GetUsage</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>GetUsage</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="43" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="43" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1abf99856ac41b5c9c4948b3204bbc1590" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Neuron::SetUsage</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int val)</argsstring>
        <name>SetUsage</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="44" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="44" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1a91dd5325856e246d98c2864e1c955972" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Neuron::GetEnergy</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>GetEnergy</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="46" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="46" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1a94accac3223afdecd1edf25e6db59ace" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Neuron::GetGateKeeper</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>GetGateKeeper</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="47" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="47" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1a794c8fa270ea0600dab4fd13c25912fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Neuron::GetChannelMin</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>GetChannelMin</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="48" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="48" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1ae8b6c47bebe302e62721dc4a6e447ca2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Neuron::GetChannelMax</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>GetChannelMax</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="49" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="49" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1adfee1a62df820344b84fe2020451b24f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Neuron::GetDisabled</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>GetDisabled</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="50" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="50" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1a98f326ea86e6e8371b639609a4495c37" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int Neuron::GetNeuronType</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>GetNeuronType</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="51" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="51" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1a0573244d3c78a22a45c249db536cbb68" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Neuron::GetRestingPotential</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>GetRestingPotential</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="52" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1aff3a33f5d8ef5dacdec9c03df50f168c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int Neuron::GetNeuronDeviceTag</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>GetNeuronDeviceTag</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="53" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="53" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1aa6f1237ed89c48eb57610083edf43efa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int Neuron::GetSomaPool</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>GetSomaPool</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="55" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="55" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1a14bef0cc064213659b38c93b002e8956" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int Neuron::SetSomaPool</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int set_pool)</argsstring>
        <name>SetSomaPool</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>set_pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="56" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="56" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1a92f942f6f0bd783c39bb550cf4bb8fd0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Neuron::SetCounter</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int val)</argsstring>
        <name>SetCounter</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="58" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="58" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1a5efa690ce4d8ff2f8dfb1fbfd84c5279" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Neuron::SetEnergy</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, double val)</argsstring>
        <name>SetEnergy</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="59" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="59" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1a492f597021faf1b74942bc75364c3c22" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Neuron::SetGateKeeper</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, double val)</argsstring>
        <name>SetGateKeeper</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="60" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="60" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1ae463ad8173c63e7970a5f4594667d481" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Neuron::SetChannelMin</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, double val)</argsstring>
        <name>SetChannelMin</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="61" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="61" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1aed1ba99e24b905cd91a519c33b5a62b0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Neuron::SetChannelMax</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, double val)</argsstring>
        <name>SetChannelMax</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="62" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="62" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1af9ad96e27f7692e9e328d90e4c96977a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Neuron::SetDisabled</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, bool val)</argsstring>
        <name>SetDisabled</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="63" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="63" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1a32fe82aa21f8a68392d696eea3a34c99" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Neuron::toggleDisabled</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>toggleDisabled</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="64" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="64" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1afc685a0444425fceab6685a6ee004b65" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Neuron::SetNeuronType</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int val)</argsstring>
        <name>SetNeuronType</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="65" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="65" bodyend="65"/>
        <references refid="class_neuron_1a4c154fecb0b689d7da9d8d274f067ccf" compoundref="neuron_8cc" startline="27" endline="85">ResetParameters</references>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1aa06d0f1a129e4a901a60e7343bc43533" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Neuron::SetNeuronDeviceTag</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int val)</argsstring>
        <name>SetNeuronDeviceTag</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="66" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="66" bodyend="66"/>
        <references refid="class_neuron_1ab371e2dacf2cdde8db5547b72fb45ca1" compoundref="neuron_8cc" startline="21" endline="25">SetObjectType</references>
        <references refid="class_neuron_1a4c154fecb0b689d7da9d8d274f067ccf" compoundref="neuron_8cc" startline="27" endline="85">ResetParameters</references>
        <references refid="class_neuron_1a82d0a4739244d79ff929be01eeb0be28" compoundref="neuron_8cc" startline="88" endline="103">OpenGate</references>
        <references refid="class_neuron_1a32593a869b25c778c1856c36704f49cf" compoundref="neuron_8cc" startline="105" endline="114">CreateSoma</references>
        <references refid="class_neuron_1a2016d83b02bfe9e5548d5c24ef31dded" compoundref="neuron_8cc" startline="116" endline="139">CreateSomas</references>
        <references refid="class_neuron_1a7706e0f722c70138458423c07b6b153b" compoundref="neuron_8cc" startline="147" endline="150">CloneSoma</references>
        <references refid="class_neuron_1a508841fa635a6e89609c514a79ea59da" compoundref="neuron_8cc" startline="142" endline="145">CloneSomas</references>
        <references refid="class_neuron_1a6ff7510f73e29c31003b016bdcb4a70e" compoundref="neuron_8cc" startline="157" endline="160">DestroySoma</references>
        <references refid="class_neuron_1a32b3a98eec58dc66481a2b877a7592cb" compoundref="neuron_8cc" startline="152" endline="155">DestroySomas</references>
        <references refid="class_neuron_1a6198fa352056e3bbe1e979adf088b900" compoundref="neuron_8cc" startline="162" endline="171">AddSoma</references>
        <references refid="class_neuron_1a78a0f48a669b6ea20280829304e51de2" compoundref="neuron_8cc" startline="173" endline="192">AddSomas</references>
        <references refid="class_neuron_1a4f8c2f0c1b294493a7c581a7f46c2863" compoundref="neuron_8cc" startline="195" endline="199">RemoveSoma</references>
        <references refid="class_neuron_1a976b1bab63d0bd21b1c8c8e1cfbd17fe" compoundref="neuron_8cc" startline="201" endline="204">RemoveSomas</references>
        <references refid="class_neuron_1a8539a7965349078a7b1c1265895daefa" compoundref="neuron_8cc" startline="206" endline="209">GetSoma</references>
        <references refid="class_neuron_1a867fbd498b54c115a2c8769f83c48020" compoundref="neuron_8cc" startline="211" endline="214">GetSomas</references>
        <references refid="class_neuron_1af06efbcc1a96af0290673e9e048267cf" compoundref="neuron_8cc" startline="217" endline="226">CreateMembrane</references>
        <references refid="class_neuron_1a5f6f460c6a98319a05c3ba06d14e6f60" compoundref="neuron_8cc" startline="228" endline="247">CreateMembranes</references>
        <references refid="class_neuron_1ab85f7c42466657095efb3aca5a9ee71d" compoundref="neuron_8cc" startline="255" endline="258">CloneMembrane</references>
        <references refid="class_neuron_1ae119d77522a4f11f5d9b1e935a9c80ba" compoundref="neuron_8cc" startline="250" endline="253">CloneMembranes</references>
        <references refid="class_neuron_1a127d1b915e976c63e731a94b7d27e0b1" compoundref="neuron_8cc" startline="265" endline="268">DestroyMembrane</references>
        <references refid="class_neuron_1ab77feff95ed7127400a4e02648641ff7" compoundref="neuron_8cc" startline="260" endline="263">DestroyMembranes</references>
        <references refid="class_neuron_1a99d4b64f128e2bfbffec3c5d476a2ca3" compoundref="neuron_8cc" startline="270" endline="279">AddMembrane</references>
        <references refid="class_neuron_1a9e1f79bf8e991893f4ef318841932a13" compoundref="neuron_8cc" startline="281" endline="300">AddMembranes</references>
        <references refid="class_neuron_1a190ae0628482048bef95c8b318939322" compoundref="neuron_8cc" startline="303" endline="307">RemoveMembrane</references>
        <references refid="class_neuron_1a3cd5fc6f1a354d99bb8768df7ee40552" compoundref="neuron_8cc" startline="309" endline="312">RemoveMembranes</references>
        <references refid="class_neuron_1a5bc4e67c5f2d8a3bcd160aa3f5086aec" compoundref="neuron_8cc" startline="314" endline="317">GetMembrane</references>
        <references refid="class_neuron_1ac759d9589c0505332e8238cafbc8fa66" compoundref="neuron_8cc" startline="319" endline="322">GetMembranes</references>
        <references refid="class_neuron_1a82b34717999a29e5413ebfcfa58c9356" compoundref="neuron_8cc" startline="325" endline="344">Growth</references>
        <references refid="class_neuron_1a06f45a5d1de890da84d3644fe58ea0a9" compoundref="neuron_8cc" startline="346" endline="367">UpdateCycle</references>
        <references refid="class_neuron_1a55c72e8066caf1ad8e25a2b0b453ee69" compoundref="neuron_8cc" startline="369" endline="385">UpdateCycle2</references>
        <references refid="class_neuron_1a4d1dc3a9f30196fe2b09dfbfc0a567bb" compoundref="neuron_8cc" startline="387" endline="444">Update</references>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1ab371e2dacf2cdde8db5547b72fb45ca1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Neuron::SetObjectType</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int object_type)</argsstring>
        <name>SetObjectType</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>object_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="67" column="1" bodyfile="BrainHarmonics/neuron.cc" bodystart="21" bodyend="25"/>
        <references refid="class_neuron_1a4c154fecb0b689d7da9d8d274f067ccf" compoundref="neuron_8cc" startline="27" endline="85">ResetParameters</references>
        <referencedby refid="class_neuron_1aa06d0f1a129e4a901a60e7343bc43533" compoundref="neuron_8h" startline="66" endline="66">SetNeuronDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1a4c154fecb0b689d7da9d8d274f067ccf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Neuron::ResetParameters</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>ResetParameters</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="69" column="1" bodyfile="BrainHarmonics/neuron.cc" bodystart="27" bodyend="85"/>
        <references refid="class_universe_1a3ce4365c727cb6eb5b650146a4188b9b" compoundref="universe_8h" startline="284">Universe::time_dimension_pointer</references>
        <references refid="class_universe_1a6326158c47bf3f7fe9297299a9b5b7b7" compoundref="universe_8cc" startline="166" endline="172">Universe::AddDimension</references>
        <references refid="class_universe_1a2274a54fbdc7504c897e4272162bf17a" compoundref="universe_8cc" startline="63" endline="67">Universe::SetObjectType</references>
        <references refid="class_universe_1ae54d34c5d695917e074b8e07e8820bdb" compoundref="universe_8cc" startline="111" endline="114">Universe::TheTimeNow</references>
        <referencedby refid="class_neuron_1ab371e2dacf2cdde8db5547b72fb45ca1" compoundref="neuron_8cc" startline="21" endline="25">SetObjectType</referencedby>
        <referencedby refid="class_neuron_1a4d1dc3a9f30196fe2b09dfbfc0a567bb" compoundref="neuron_8cc" startline="387" endline="444">Update</referencedby>
        <referencedby refid="class_neuron_1a6839febd20fb8f776151e00142411a56" compoundref="neuron_8h" startline="24" endline="35">Neuron</referencedby>
        <referencedby refid="class_neuron_1afc685a0444425fceab6685a6ee004b65" compoundref="neuron_8h" startline="65" endline="65">SetNeuronType</referencedby>
        <referencedby refid="class_neuron_1aa06d0f1a129e4a901a60e7343bc43533" compoundref="neuron_8h" startline="66" endline="66">SetNeuronDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1a82d0a4739244d79ff929be01eeb0be28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Neuron::OpenGate</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, double val)</argsstring>
        <name>OpenGate</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="71" column="1" bodyfile="BrainHarmonics/neuron.cc" bodystart="88" bodyend="103"/>
        <referencedby refid="class_neuron_1aa06d0f1a129e4a901a60e7343bc43533" compoundref="neuron_8h" startline="66" endline="66">SetNeuronDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1a32593a869b25c778c1856c36704f49cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_neuron" kindref="compound">Neuron</ref> *</type>
        <definition>Neuron * Neuron::CreateSoma</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>CreateSoma</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="73" column="1" bodyfile="BrainHarmonics/neuron.cc" bodystart="105" bodyend="114"/>
        <references refid="class_neuron_1abb3745c6a8727f4ceb8db9e2258b90b5" compoundref="neuron_8h" startline="133">soma_list</references>
        <referencedby refid="class_neuron_1a2016d83b02bfe9e5548d5c24ef31dded" compoundref="neuron_8cc" startline="116" endline="139">CreateSomas</referencedby>
        <referencedby refid="class_neuron_1aa06d0f1a129e4a901a60e7343bc43533" compoundref="neuron_8h" startline="66" endline="66">SetNeuronDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1a2016d83b02bfe9e5548d5c24ef31dded" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_neuron" kindref="compound">Neuron</ref> * &gt;</type>
        <definition>std::vector&lt; Neuron * &gt; Neuron::CreateSomas</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int quantity)</argsstring>
        <name>CreateSomas</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>quantity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="75" column="1" bodyfile="BrainHarmonics/neuron.cc" bodystart="116" bodyend="139"/>
        <references refid="class_neuron_1abb3745c6a8727f4ceb8db9e2258b90b5" compoundref="neuron_8h" startline="133">soma_list</references>
        <references refid="class_neuron_1a32593a869b25c778c1856c36704f49cf" compoundref="neuron_8cc" startline="105" endline="114">CreateSoma</references>
        <referencedby refid="class_neuron_1a4d1dc3a9f30196fe2b09dfbfc0a567bb" compoundref="neuron_8cc" startline="387" endline="444">Update</referencedby>
        <referencedby refid="class_neuron_1aa06d0f1a129e4a901a60e7343bc43533" compoundref="neuron_8h" startline="66" endline="66">SetNeuronDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1a7706e0f722c70138458423c07b6b153b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_neuron" kindref="compound">Neuron</ref> *</type>
        <definition>Neuron * Neuron::CloneSoma</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, Neuron *clone_object, double perfection_membership)</argsstring>
        <name>CloneSoma</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type><ref refid="class_neuron" kindref="compound">Neuron</ref> *</type>
          <declname>clone_object</declname>
        </param>
        <param>
          <type>double</type>
          <declname>perfection_membership</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="77" column="1" bodyfile="BrainHarmonics/neuron.cc" bodystart="147" bodyend="150"/>
        <referencedby refid="class_neuron_1aa06d0f1a129e4a901a60e7343bc43533" compoundref="neuron_8h" startline="66" endline="66">SetNeuronDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1a508841fa635a6e89609c514a79ea59da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_neuron" kindref="compound">Neuron</ref> * &gt;</type>
        <definition>std::vector&lt; Neuron * &gt; Neuron::CloneSomas</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, std::vector&lt; Neuron *&gt; cloning_list, double perfection_membership)</argsstring>
        <name>CloneSomas</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_neuron" kindref="compound">Neuron</ref> *&gt;</type>
          <declname>cloning_list</declname>
        </param>
        <param>
          <type>double</type>
          <declname>perfection_membership</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="79" column="1" bodyfile="BrainHarmonics/neuron.cc" bodystart="142" bodyend="145"/>
        <referencedby refid="class_neuron_1aa06d0f1a129e4a901a60e7343bc43533" compoundref="neuron_8h" startline="66" endline="66">SetNeuronDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1a6ff7510f73e29c31003b016bdcb4a70e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_neuron" kindref="compound">Neuron</ref> *</type>
        <definition>Neuron * Neuron::DestroySoma</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, Neuron *destroy_object)</argsstring>
        <name>DestroySoma</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type><ref refid="class_neuron" kindref="compound">Neuron</ref> *</type>
          <declname>destroy_object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="81" column="1" bodyfile="BrainHarmonics/neuron.cc" bodystart="157" bodyend="160"/>
        <referencedby refid="class_neuron_1aa06d0f1a129e4a901a60e7343bc43533" compoundref="neuron_8h" startline="66" endline="66">SetNeuronDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1a32b3a98eec58dc66481a2b877a7592cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_neuron" kindref="compound">Neuron</ref> * &gt;</type>
        <definition>std::vector&lt; Neuron * &gt; Neuron::DestroySomas</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, std::vector&lt; Neuron *&gt; destruction_list)</argsstring>
        <name>DestroySomas</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_neuron" kindref="compound">Neuron</ref> *&gt;</type>
          <declname>destruction_list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="83" column="1" bodyfile="BrainHarmonics/neuron.cc" bodystart="152" bodyend="155"/>
        <referencedby refid="class_neuron_1aa06d0f1a129e4a901a60e7343bc43533" compoundref="neuron_8h" startline="66" endline="66">SetNeuronDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1a6198fa352056e3bbe1e979adf088b900" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_neuron" kindref="compound">Neuron</ref> *</type>
        <definition>Neuron * Neuron::AddSoma</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, Neuron *add_object)</argsstring>
        <name>AddSoma</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type><ref refid="class_neuron" kindref="compound">Neuron</ref> *</type>
          <declname>add_object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="85" column="1" bodyfile="BrainHarmonics/neuron.cc" bodystart="162" bodyend="171"/>
        <references refid="class_neuron_1abb3745c6a8727f4ceb8db9e2258b90b5" compoundref="neuron_8h" startline="133">soma_list</references>
        <referencedby refid="class_neuron_1a78a0f48a669b6ea20280829304e51de2" compoundref="neuron_8cc" startline="173" endline="192">AddSomas</referencedby>
        <referencedby refid="class_neuron_1aa06d0f1a129e4a901a60e7343bc43533" compoundref="neuron_8h" startline="66" endline="66">SetNeuronDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1a78a0f48a669b6ea20280829304e51de2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_neuron" kindref="compound">Neuron</ref> * &gt;</type>
        <definition>std::vector&lt; Neuron * &gt; Neuron::AddSomas</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, std::vector&lt; Neuron *&gt; add_objects)</argsstring>
        <name>AddSomas</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_neuron" kindref="compound">Neuron</ref> *&gt;</type>
          <declname>add_objects</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="87" column="1" bodyfile="BrainHarmonics/neuron.cc" bodystart="173" bodyend="192"/>
        <references refid="class_neuron_1abb3745c6a8727f4ceb8db9e2258b90b5" compoundref="neuron_8h" startline="133">soma_list</references>
        <references refid="class_neuron_1a6198fa352056e3bbe1e979adf088b900" compoundref="neuron_8cc" startline="162" endline="171">AddSoma</references>
        <referencedby refid="class_neuron_1aa06d0f1a129e4a901a60e7343bc43533" compoundref="neuron_8h" startline="66" endline="66">SetNeuronDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1a4f8c2f0c1b294493a7c581a7f46c2863" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_neuron" kindref="compound">Neuron</ref> *</type>
        <definition>Neuron * Neuron::RemoveSoma</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>RemoveSoma</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="89" column="1" bodyfile="BrainHarmonics/neuron.cc" bodystart="195" bodyend="199"/>
        <referencedby refid="class_neuron_1aa06d0f1a129e4a901a60e7343bc43533" compoundref="neuron_8h" startline="66" endline="66">SetNeuronDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1a976b1bab63d0bd21b1c8c8e1cfbd17fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_neuron" kindref="compound">Neuron</ref> * &gt;</type>
        <definition>std::vector&lt; Neuron * &gt; Neuron::RemoveSomas</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int quantity)</argsstring>
        <name>RemoveSomas</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>quantity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="91" column="1" bodyfile="BrainHarmonics/neuron.cc" bodystart="201" bodyend="204"/>
        <referencedby refid="class_neuron_1aa06d0f1a129e4a901a60e7343bc43533" compoundref="neuron_8h" startline="66" endline="66">SetNeuronDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1a8539a7965349078a7b1c1265895daefa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_neuron" kindref="compound">Neuron</ref> *</type>
        <definition>Neuron * Neuron::GetSoma</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int selector)</argsstring>
        <name>GetSoma</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>selector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="93" column="1" bodyfile="BrainHarmonics/neuron.cc" bodystart="206" bodyend="209"/>
        <references refid="class_neuron_1abb3745c6a8727f4ceb8db9e2258b90b5" compoundref="neuron_8h" startline="133">soma_list</references>
        <referencedby refid="class_neuron_1aa06d0f1a129e4a901a60e7343bc43533" compoundref="neuron_8h" startline="66" endline="66">SetNeuronDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1a867fbd498b54c115a2c8769f83c48020" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_neuron" kindref="compound">Neuron</ref> * &gt;</type>
        <definition>std::vector&lt; Neuron * &gt; Neuron::GetSomas</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>GetSomas</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="95" column="1" bodyfile="BrainHarmonics/neuron.cc" bodystart="211" bodyend="214"/>
        <references refid="class_neuron_1abb3745c6a8727f4ceb8db9e2258b90b5" compoundref="neuron_8h" startline="133">soma_list</references>
        <referencedby refid="class_neuron_1aa06d0f1a129e4a901a60e7343bc43533" compoundref="neuron_8h" startline="66" endline="66">SetNeuronDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1af06efbcc1a96af0290673e9e048267cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_neuron" kindref="compound">Neuron</ref> *</type>
        <definition>Neuron * Neuron::CreateMembrane</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>CreateMembrane</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="98" column="1" bodyfile="BrainHarmonics/neuron.cc" bodystart="217" bodyend="226"/>
        <references refid="class_neuron_1a878a5a42025ba8205adeb9a50b2c1457" compoundref="neuron_8h" startline="134">membrane_list</references>
        <referencedby refid="class_neuron_1a5f6f460c6a98319a05c3ba06d14e6f60" compoundref="neuron_8cc" startline="228" endline="247">CreateMembranes</referencedby>
        <referencedby refid="class_neuron_1aa06d0f1a129e4a901a60e7343bc43533" compoundref="neuron_8h" startline="66" endline="66">SetNeuronDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1a5f6f460c6a98319a05c3ba06d14e6f60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_neuron" kindref="compound">Neuron</ref> * &gt;</type>
        <definition>std::vector&lt; Neuron * &gt; Neuron::CreateMembranes</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int quantity)</argsstring>
        <name>CreateMembranes</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>quantity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="100" column="1" bodyfile="BrainHarmonics/neuron.cc" bodystart="228" bodyend="247"/>
        <references refid="class_neuron_1a878a5a42025ba8205adeb9a50b2c1457" compoundref="neuron_8h" startline="134">membrane_list</references>
        <references refid="class_neuron_1af06efbcc1a96af0290673e9e048267cf" compoundref="neuron_8cc" startline="217" endline="226">CreateMembrane</references>
        <referencedby refid="class_neuron_1a4d1dc3a9f30196fe2b09dfbfc0a567bb" compoundref="neuron_8cc" startline="387" endline="444">Update</referencedby>
        <referencedby refid="class_neuron_1aa06d0f1a129e4a901a60e7343bc43533" compoundref="neuron_8h" startline="66" endline="66">SetNeuronDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1ab85f7c42466657095efb3aca5a9ee71d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_neuron" kindref="compound">Neuron</ref> *</type>
        <definition>Neuron * Neuron::CloneMembrane</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, Neuron *clone_object, double perfection_membership)</argsstring>
        <name>CloneMembrane</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type><ref refid="class_neuron" kindref="compound">Neuron</ref> *</type>
          <declname>clone_object</declname>
        </param>
        <param>
          <type>double</type>
          <declname>perfection_membership</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="102" column="1" bodyfile="BrainHarmonics/neuron.cc" bodystart="255" bodyend="258"/>
        <referencedby refid="class_neuron_1aa06d0f1a129e4a901a60e7343bc43533" compoundref="neuron_8h" startline="66" endline="66">SetNeuronDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1ae119d77522a4f11f5d9b1e935a9c80ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_neuron" kindref="compound">Neuron</ref> * &gt;</type>
        <definition>std::vector&lt; Neuron * &gt; Neuron::CloneMembranes</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, std::vector&lt; Neuron *&gt; cloning_list, double perfection_membership)</argsstring>
        <name>CloneMembranes</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_neuron" kindref="compound">Neuron</ref> *&gt;</type>
          <declname>cloning_list</declname>
        </param>
        <param>
          <type>double</type>
          <declname>perfection_membership</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="104" column="1" bodyfile="BrainHarmonics/neuron.cc" bodystart="250" bodyend="253"/>
        <referencedby refid="class_neuron_1aa06d0f1a129e4a901a60e7343bc43533" compoundref="neuron_8h" startline="66" endline="66">SetNeuronDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1a127d1b915e976c63e731a94b7d27e0b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_neuron" kindref="compound">Neuron</ref> *</type>
        <definition>Neuron * Neuron::DestroyMembrane</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, Neuron *destroy_object)</argsstring>
        <name>DestroyMembrane</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type><ref refid="class_neuron" kindref="compound">Neuron</ref> *</type>
          <declname>destroy_object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="106" column="1" bodyfile="BrainHarmonics/neuron.cc" bodystart="265" bodyend="268"/>
        <referencedby refid="class_neuron_1aa06d0f1a129e4a901a60e7343bc43533" compoundref="neuron_8h" startline="66" endline="66">SetNeuronDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1ab77feff95ed7127400a4e02648641ff7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_neuron" kindref="compound">Neuron</ref> * &gt;</type>
        <definition>std::vector&lt; Neuron * &gt; Neuron::DestroyMembranes</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, std::vector&lt; Neuron *&gt; destruction_list)</argsstring>
        <name>DestroyMembranes</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_neuron" kindref="compound">Neuron</ref> *&gt;</type>
          <declname>destruction_list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="108" column="1" bodyfile="BrainHarmonics/neuron.cc" bodystart="260" bodyend="263"/>
        <referencedby refid="class_neuron_1aa06d0f1a129e4a901a60e7343bc43533" compoundref="neuron_8h" startline="66" endline="66">SetNeuronDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1a99d4b64f128e2bfbffec3c5d476a2ca3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_neuron" kindref="compound">Neuron</ref> *</type>
        <definition>Neuron * Neuron::AddMembrane</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, Neuron *add_object)</argsstring>
        <name>AddMembrane</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type><ref refid="class_neuron" kindref="compound">Neuron</ref> *</type>
          <declname>add_object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="110" column="1" bodyfile="BrainHarmonics/neuron.cc" bodystart="270" bodyend="279"/>
        <references refid="class_neuron_1a878a5a42025ba8205adeb9a50b2c1457" compoundref="neuron_8h" startline="134">membrane_list</references>
        <referencedby refid="class_neuron_1a9e1f79bf8e991893f4ef318841932a13" compoundref="neuron_8cc" startline="281" endline="300">AddMembranes</referencedby>
        <referencedby refid="class_neuron_1aa06d0f1a129e4a901a60e7343bc43533" compoundref="neuron_8h" startline="66" endline="66">SetNeuronDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1a9e1f79bf8e991893f4ef318841932a13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_neuron" kindref="compound">Neuron</ref> * &gt;</type>
        <definition>std::vector&lt; Neuron * &gt; Neuron::AddMembranes</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, std::vector&lt; Neuron *&gt; add_objects)</argsstring>
        <name>AddMembranes</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_neuron" kindref="compound">Neuron</ref> *&gt;</type>
          <declname>add_objects</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="112" column="1" bodyfile="BrainHarmonics/neuron.cc" bodystart="281" bodyend="300"/>
        <references refid="class_neuron_1a878a5a42025ba8205adeb9a50b2c1457" compoundref="neuron_8h" startline="134">membrane_list</references>
        <references refid="class_neuron_1a99d4b64f128e2bfbffec3c5d476a2ca3" compoundref="neuron_8cc" startline="270" endline="279">AddMembrane</references>
        <referencedby refid="class_neuron_1aa06d0f1a129e4a901a60e7343bc43533" compoundref="neuron_8h" startline="66" endline="66">SetNeuronDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1a190ae0628482048bef95c8b318939322" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_neuron" kindref="compound">Neuron</ref> *</type>
        <definition>Neuron * Neuron::RemoveMembrane</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>RemoveMembrane</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="114" column="1" bodyfile="BrainHarmonics/neuron.cc" bodystart="303" bodyend="307"/>
        <referencedby refid="class_neuron_1aa06d0f1a129e4a901a60e7343bc43533" compoundref="neuron_8h" startline="66" endline="66">SetNeuronDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1a3cd5fc6f1a354d99bb8768df7ee40552" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_neuron" kindref="compound">Neuron</ref> * &gt;</type>
        <definition>std::vector&lt; Neuron * &gt; Neuron::RemoveMembranes</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int quantity)</argsstring>
        <name>RemoveMembranes</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>quantity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="116" column="1" bodyfile="BrainHarmonics/neuron.cc" bodystart="309" bodyend="312"/>
        <referencedby refid="class_neuron_1aa06d0f1a129e4a901a60e7343bc43533" compoundref="neuron_8h" startline="66" endline="66">SetNeuronDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1a5bc4e67c5f2d8a3bcd160aa3f5086aec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_neuron" kindref="compound">Neuron</ref> *</type>
        <definition>Neuron * Neuron::GetMembrane</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int selector)</argsstring>
        <name>GetMembrane</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>selector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="118" column="1" bodyfile="BrainHarmonics/neuron.cc" bodystart="314" bodyend="317"/>
        <references refid="class_neuron_1a878a5a42025ba8205adeb9a50b2c1457" compoundref="neuron_8h" startline="134">membrane_list</references>
        <referencedby refid="class_neuron_1aa06d0f1a129e4a901a60e7343bc43533" compoundref="neuron_8h" startline="66" endline="66">SetNeuronDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1ac759d9589c0505332e8238cafbc8fa66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_neuron" kindref="compound">Neuron</ref> * &gt;</type>
        <definition>std::vector&lt; Neuron * &gt; Neuron::GetMembranes</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>GetMembranes</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="120" column="1" bodyfile="BrainHarmonics/neuron.cc" bodystart="319" bodyend="322"/>
        <references refid="class_neuron_1a878a5a42025ba8205adeb9a50b2c1457" compoundref="neuron_8h" startline="134">membrane_list</references>
        <referencedby refid="class_neuron_1aa06d0f1a129e4a901a60e7343bc43533" compoundref="neuron_8h" startline="66" endline="66">SetNeuronDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1a82b34717999a29e5413ebfcfa58c9356" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Neuron::Growth</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>Growth</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="122" column="1" bodyfile="BrainHarmonics/neuron.cc" bodystart="325" bodyend="344"/>
        <referencedby refid="class_neuron_1a4d1dc3a9f30196fe2b09dfbfc0a567bb" compoundref="neuron_8cc" startline="387" endline="444">Update</referencedby>
        <referencedby refid="class_neuron_1aa06d0f1a129e4a901a60e7343bc43533" compoundref="neuron_8h" startline="66" endline="66">SetNeuronDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1a06f45a5d1de890da84d3644fe58ea0a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Neuron::UpdateCycle</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, std::vector&lt; Neuron *&gt; set_of_update_pointers, unsigned int pointer_type)</argsstring>
        <name>UpdateCycle</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_neuron" kindref="compound">Neuron</ref> *&gt;</type>
          <declname>set_of_update_pointers</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>pointer_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="124" column="1" bodyfile="BrainHarmonics/neuron.cc" bodystart="346" bodyend="367"/>
        <references refid="class_soma_1a211587ef21a7932c2f8f0345b1d32f57" compoundref="soma_8cc" startline="332" endline="411">Soma::Update</references>
        <references refid="class_membrane_1a4af9710ea7f0bc6f1b6b6b6462612d51" compoundref="membrane_8cc" startline="215" endline="275">Membrane::Update</references>
        <referencedby refid="class_neuron_1a4d1dc3a9f30196fe2b09dfbfc0a567bb" compoundref="neuron_8cc" startline="387" endline="444">Update</referencedby>
        <referencedby refid="class_neuron_1aa06d0f1a129e4a901a60e7343bc43533" compoundref="neuron_8h" startline="66" endline="66">SetNeuronDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1a55c72e8066caf1ad8e25a2b0b453ee69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Neuron::UpdateCycle2</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, std::vector&lt; Universe *&gt; set_of_update_pointers, unsigned int pointer_type)</argsstring>
        <name>UpdateCycle2</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_universe" kindref="compound">Universe</ref> *&gt;</type>
          <declname>set_of_update_pointers</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>pointer_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="126" column="1" bodyfile="BrainHarmonics/neuron.cc" bodystart="369" bodyend="385"/>
        <references refid="class_universe_1a64ee5a2c7e86c56fa426acb750438ce9" compoundref="universe_8cc" startline="481" endline="598">Universe::Update</references>
        <referencedby refid="class_neuron_1a4d1dc3a9f30196fe2b09dfbfc0a567bb" compoundref="neuron_8cc" startline="387" endline="444">Update</referencedby>
        <referencedby refid="class_neuron_1aa06d0f1a129e4a901a60e7343bc43533" compoundref="neuron_8h" startline="66" endline="66">SetNeuronDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1a4d1dc3a9f30196fe2b09dfbfc0a567bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Neuron::Update</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>Update</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="128" column="1" bodyfile="BrainHarmonics/neuron.cc" bodystart="387" bodyend="444"/>
        <references refid="class_neuron_1a4c154fecb0b689d7da9d8d274f067ccf" compoundref="neuron_8cc" startline="27" endline="85">ResetParameters</references>
        <references refid="class_universe_1a598799e2fcdf9ed60e83e9f5a61bfc05" compoundref="universe_8cc" startline="351" endline="354">Universe::AddSolid</references>
        <references refid="class_solid_1af6fe46af0be9a9533e114b1c0f186bfc" compoundref="solid_8cc" startline="100" endline="107">Solid::SetObjectType</references>
        <references refid="universe_8h_1af195d08bd4333e3ed6abac93c1620318" compoundref="universe_8h" startline="48">TYPE_SOLID_NEURON_GEN1</references>
        <references refid="class_neuron_1a00b1e2e5f9d224759df1aa54093092ba" compoundref="neuron_8h" startline="135">visualisation_list</references>
        <references refid="class_neuron_1a2016d83b02bfe9e5548d5c24ef31dded" compoundref="neuron_8cc" startline="116" endline="139">CreateSomas</references>
        <references refid="class_soma_1a85b4708eb51ab0962a6128b87aff0700" compoundref="soma_8cc" startline="21" endline="25">Soma::SetObjectType</references>
        <references refid="universe_8h_1ac14d822125dcc246f9e6af61152f7bdc" compoundref="universe_8h" startline="40">TYPE_NEURON_PYRAMIDAL_SOMA_GEN1</references>
        <references refid="class_neuron_1abb3745c6a8727f4ceb8db9e2258b90b5" compoundref="neuron_8h" startline="133">soma_list</references>
        <references refid="class_neuron_1a5f6f460c6a98319a05c3ba06d14e6f60" compoundref="neuron_8cc" startline="228" endline="247">CreateMembranes</references>
        <references refid="class_membrane_1a5ba2bcb906f3984b28f1030207e106ad" compoundref="membrane_8cc" startline="20" endline="24">Membrane::SetObjectType</references>
        <references refid="universe_8h_1af01e6a08d02b5ef0e585f464dd6c18b4" compoundref="universe_8h" startline="39">TYPE_NEURON_PYRAMIDAL_MEMBRANE_GEN1</references>
        <references refid="class_neuron_1a878a5a42025ba8205adeb9a50b2c1457" compoundref="neuron_8h" startline="134">membrane_list</references>
        <references refid="class_neuron_1a06f45a5d1de890da84d3644fe58ea0a9" compoundref="neuron_8cc" startline="346" endline="367">UpdateCycle</references>
        <references refid="class_neuron_1a55c72e8066caf1ad8e25a2b0b453ee69" compoundref="neuron_8cc" startline="369" endline="385">UpdateCycle2</references>
        <references refid="class_neuron_1a82b34717999a29e5413ebfcfa58c9356" compoundref="neuron_8cc" startline="325" endline="344">Growth</references>
        <referencedby refid="class_neuron_1aa06d0f1a129e4a901a60e7343bc43533" compoundref="neuron_8h" startline="66" endline="66">SetNeuronDeviceTag</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_neuron_1a9af31418d1232135bf5074f6a3d5dbf1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_universe" kindref="compound">Universe</ref> * &gt;</type>
        <definition>std::vector&lt;Universe*&gt; Neuron::GetVisualisationList</definition>
        <argsstring>()</argsstring>
        <name>GetVisualisationList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/neuron.h" line="130" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="130" bodyend="130"/>
        <references refid="class_neuron_1a00b1e2e5f9d224759df1aa54093092ba" compoundref="neuron_8h" startline="135">visualisation_list</references>
        <referencedby refid="class_soma_1a211587ef21a7932c2f8f0345b1d32f57" compoundref="soma_8cc" startline="332" endline="411">Soma::Update</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="242">
        <label>Universe</label>
        <link refid="class_universe"/>
      </node>
      <node id="247">
        <label>Axon</label>
        <link refid="class_axon"/>
        <childnode refid="246" relation="public-inheritance">
        </childnode>
      </node>
      <node id="240">
        <label>Neuron</label>
        <link refid="class_neuron"/>
        <childnode refid="241" relation="public-inheritance">
        </childnode>
      </node>
      <node id="241">
        <label>CognitiveNetwork</label>
        <link refid="class_cognitive_network"/>
        <childnode refid="242" relation="public-inheritance">
        </childnode>
      </node>
      <node id="243">
        <label>Membrane</label>
        <link refid="class_membrane"/>
        <childnode refid="240" relation="public-inheritance">
        </childnode>
      </node>
      <node id="250">
        <label>SynapticVesicle</label>
        <link refid="class_synaptic_vesicle"/>
        <childnode refid="249" relation="public-inheritance">
        </childnode>
      </node>
      <node id="248">
        <label>AxonBranch</label>
        <link refid="class_axon_branch"/>
        <childnode refid="247" relation="public-inheritance">
        </childnode>
      </node>
      <node id="253">
        <label>DendriteCleft</label>
        <link refid="class_dendrite_cleft"/>
        <childnode refid="252" relation="public-inheritance">
        </childnode>
      </node>
      <node id="252">
        <label>DendriteBranch</label>
        <link refid="class_dendrite_branch"/>
        <childnode refid="251" relation="public-inheritance">
        </childnode>
      </node>
      <node id="251">
        <label>Dendrite</label>
        <link refid="class_dendrite"/>
        <childnode refid="245" relation="public-inheritance">
        </childnode>
      </node>
      <node id="249">
        <label>AxonBouton</label>
        <link refid="class_axon_bouton"/>
        <childnode refid="248" relation="public-inheritance">
        </childnode>
      </node>
      <node id="246">
        <label>AxonHillock</label>
        <link refid="class_axon_hillock"/>
        <childnode refid="245" relation="public-inheritance">
        </childnode>
      </node>
      <node id="245">
        <label>Soma</label>
        <link refid="class_soma"/>
        <childnode refid="240" relation="public-inheritance">
        </childnode>
      </node>
      <node id="244">
        <label>MembraneChannel</label>
        <link refid="class_membrane_channel"/>
        <childnode refid="243" relation="public-inheritance">
        </childnode>
      </node>
      <node id="254">
        <label>Neuroreceptor</label>
        <link refid="class_neuroreceptor"/>
        <childnode refid="253" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="257">
        <label>Universe</label>
        <link refid="class_universe"/>
        <childnode refid="257" relation="usage">
          <edgelabel>time_dimension_pointer</edgelabel>
        </childnode>
      </node>
      <node id="255">
        <label>Neuron</label>
        <link refid="class_neuron"/>
        <childnode refid="256" relation="public-inheritance">
        </childnode>
      </node>
      <node id="256">
        <label>CognitiveNetwork</label>
        <link refid="class_cognitive_network"/>
        <childnode refid="257" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="BrainHarmonics/neuron.h" line="15" column="1" bodyfile="BrainHarmonics/neuron.h" bodystart="14" bodyend="179"/>
    <listofallmembers>
      <member refid="class_cognitive_network_1a6af57693982286ac6a6831ca3010b760" prot="public" virt="non-virtual"><scope>Neuron</scope><name>AddCognitiveInput</name></member>
      <member refid="class_cognitive_network_1afc92c9b378e7e0873d0164bc4f2635df" prot="public" virt="non-virtual"><scope>Neuron</scope><name>AddCognitiveInputs</name></member>
      <member refid="class_universe_1ab682307c963836cd81b35b5604bd7064" prot="public" virt="non-virtual"><scope>Neuron</scope><name>AddCognitiveNetwork</name></member>
      <member refid="class_universe_1a5199f6c27b1a97c8b8c9847b8be686cf" prot="public" virt="non-virtual"><scope>Neuron</scope><name>AddCognitiveNetworks</name></member>
      <member refid="class_cognitive_network_1a8a9b533b89b7d62b21cf41bdf957ef14" prot="public" virt="non-virtual"><scope>Neuron</scope><name>AddCognitiveOutput</name></member>
      <member refid="class_cognitive_network_1a6299433811b76f0ccb97cf69fe9bfb66" prot="public" virt="non-virtual"><scope>Neuron</scope><name>AddCognitiveOutputs</name></member>
      <member refid="class_universe_1ab2671c2218c98f0f1f487c5b3bb96e3c" prot="public" virt="non-virtual"><scope>Neuron</scope><name>AddCompositeForceParticle</name></member>
      <member refid="class_universe_1a23d74e377203fca7cb74e0ffee7244b6" prot="public" virt="non-virtual"><scope>Neuron</scope><name>AddCompositeForceParticles</name></member>
      <member refid="class_universe_1a6326158c47bf3f7fe9297299a9b5b7b7" prot="public" virt="non-virtual"><scope>Neuron</scope><name>AddDimension</name></member>
      <member refid="class_universe_1a03bdf5f7fea4209241e9bf5316d45517" prot="public" virt="non-virtual"><scope>Neuron</scope><name>AddDimensions</name></member>
      <member refid="class_universe_1a90c573dec55f2b3ad5680015356f5f25" prot="public" virt="non-virtual"><scope>Neuron</scope><name>AddElementaryForce</name></member>
      <member refid="class_universe_1a81d294300346e9f901836ab609cce942" prot="public" virt="non-virtual"><scope>Neuron</scope><name>AddElementaryForces</name></member>
      <member refid="class_universe_1ab9c84e0576de50aa4fa46655832ce5e4" prot="public" virt="non-virtual"><scope>Neuron</scope><name>AddElementaryParticle</name></member>
      <member refid="class_universe_1a857cf7f208cd11c80736e82fa523feb5" prot="public" virt="non-virtual"><scope>Neuron</scope><name>AddElementaryParticles</name></member>
      <member refid="class_cognitive_network_1ac6a7e01f097d0cb6434eb8fa7640c214" prot="public" virt="non-virtual"><scope>Neuron</scope><name>AddInterneuronSpace</name></member>
      <member refid="class_cognitive_network_1aeafe16b9f44ae1316c072a85e726ee83" prot="public" virt="non-virtual"><scope>Neuron</scope><name>AddInterneuronSpaces</name></member>
      <member refid="class_universe_1a090d9ad1b88d81364e872e17d65edca4" prot="public" virt="non-virtual"><scope>Neuron</scope><name>AddMatter</name></member>
      <member refid="class_universe_1ae00d10b2a23c9cedf1ff89e9da875563" prot="public" virt="non-virtual"><scope>Neuron</scope><name>AddMatters</name></member>
      <member refid="class_neuron_1a99d4b64f128e2bfbffec3c5d476a2ca3" prot="public" virt="non-virtual"><scope>Neuron</scope><name>AddMembrane</name></member>
      <member refid="class_neuron_1a9e1f79bf8e991893f4ef318841932a13" prot="public" virt="non-virtual"><scope>Neuron</scope><name>AddMembranes</name></member>
      <member refid="class_universe_1a062a9472f0400e566ecc7dc056d989d9" prot="public" virt="non-virtual"><scope>Neuron</scope><name>AddMonomer</name></member>
      <member refid="class_universe_1a95fe7f99971bb2048121a7c4e87b9f79" prot="public" virt="non-virtual"><scope>Neuron</scope><name>AddMonomers</name></member>
      <member refid="class_cognitive_network_1a8457342637fde2d814c54942c3367416" prot="public" virt="non-virtual"><scope>Neuron</scope><name>AddNeuron</name></member>
      <member refid="class_cognitive_network_1ade928e3355db97d3c5d99501ff4a3b69" prot="public" virt="non-virtual"><scope>Neuron</scope><name>AddNeurons</name></member>
      <member refid="class_cognitive_network_1ab80ffdc75ad4754463c356d36fb81ab4" prot="public" virt="non-virtual"><scope>Neuron</scope><name>AddNeurotransmitter</name></member>
      <member refid="class_cognitive_network_1a085f61ab94b71406a0a5e11d789ed69c" prot="public" virt="non-virtual"><scope>Neuron</scope><name>AddNeurotransmitters</name></member>
      <member refid="class_cognitive_network_1ab6caa285c25568259ae935cf9e746af4" prot="public" virt="non-virtual"><scope>Neuron</scope><name>AddOrbital</name></member>
      <member refid="class_cognitive_network_1a9dbf4a9fab3b806d2bd6b2701b7a9548" prot="public" virt="non-virtual"><scope>Neuron</scope><name>AddOrbitals</name></member>
      <member refid="class_universe_1a8508b791c6997d8abcdcc037a6776734" prot="public" virt="non-virtual"><scope>Neuron</scope><name>AddPoint</name></member>
      <member refid="class_universe_1aa48ced2078ba863723050d8283b3fa67" prot="public" virt="non-virtual"><scope>Neuron</scope><name>AddPoints</name></member>
      <member refid="class_universe_1a4ea0af5d2eb7b5070a83f7da29526fbd" prot="public" virt="non-virtual"><scope>Neuron</scope><name>AddPolymer</name></member>
      <member refid="class_universe_1aed7cb25507d516a2821ebb69d5345c54" prot="public" virt="non-virtual"><scope>Neuron</scope><name>AddPolymers</name></member>
      <member refid="class_universe_1a598799e2fcdf9ed60e83e9f5a61bfc05" prot="public" virt="non-virtual"><scope>Neuron</scope><name>AddSolid</name></member>
      <member refid="class_universe_1a410d5ba2224fe90584b1f1aa5b38b41c" prot="public" virt="non-virtual"><scope>Neuron</scope><name>AddSolids</name></member>
      <member refid="class_neuron_1a6198fa352056e3bbe1e979adf088b900" prot="public" virt="non-virtual"><scope>Neuron</scope><name>AddSoma</name></member>
      <member refid="class_neuron_1a78a0f48a669b6ea20280829304e51de2" prot="public" virt="non-virtual"><scope>Neuron</scope><name>AddSomas</name></member>
      <member refid="class_cognitive_network_1a4bfdcd2affdfe2adb2da68dba60dff0e" prot="public" virt="non-virtual"><scope>Neuron</scope><name>AddSynapse</name></member>
      <member refid="class_cognitive_network_1a09d9e01cbd8596af7fac626ce2753643" prot="public" virt="non-virtual"><scope>Neuron</scope><name>AddSynapses</name></member>
      <member refid="class_universe_1a901e16db5e8af258c66af7ac75662fe0" prot="public" virt="virtual"><scope>Neuron</scope><name>AddTemporalAdjustment</name></member>
      <member refid="class_universe_1a15aa20218286fd11ecb9b792dfb63be3" prot="public" virt="virtual"><scope>Neuron</scope><name>AdjustCounters</name></member>
      <member refid="class_cognitive_network_1ae590ecb77db0a876425b9b74bcfe2bce" prot="public" virt="virtual"><scope>Neuron</scope><name>ApplyElectromagnetic</name></member>
      <member refid="class_cognitive_network_1a9753f52c9e36ad44e9fac1d3e38a0770" prot="public" virt="virtual"><scope>Neuron</scope><name>ApplyElectromagneticElectroweak</name></member>
      <member refid="class_cognitive_network_1a7d3252977440a9a5c004f748647ce885" prot="public" virt="virtual"><scope>Neuron</scope><name>ApplyGravitation</name></member>
      <member refid="class_cognitive_network_1a7a55750d3c42a277c4ffe04a87ab3b19" prot="public" virt="virtual"><scope>Neuron</scope><name>ApplyStrong</name></member>
      <member refid="class_cognitive_network_1af25bbd4f4d8f370cd2a48fd6db8302b9" prot="public" virt="virtual"><scope>Neuron</scope><name>ApplyStrongFundamental</name></member>
      <member refid="class_cognitive_network_1a8b60fdb81d89a3a74d6c06cb29e7aad3" prot="public" virt="virtual"><scope>Neuron</scope><name>ApplyStrongResidual</name></member>
      <member refid="class_cognitive_network_1a46a15b24bd61049fa1c4f635268086a1" prot="public" virt="virtual"><scope>Neuron</scope><name>ApplyWeak</name></member>
      <member refid="class_cognitive_network_1ab8bc213d2806f0dc49c1284bf934fc24" prot="public" virt="virtual"><scope>Neuron</scope><name>ApplyWeakElectroweak</name></member>
      <member refid="class_cognitive_network_1a058cb2b044d56268e36f153fac21084e" prot="public" virt="non-virtual"><scope>Neuron</scope><name>CloneCognitiveInput</name></member>
      <member refid="class_cognitive_network_1aeaf2883b25dbf1eefd11c2d92efe8816" prot="public" virt="non-virtual"><scope>Neuron</scope><name>CloneCognitiveInputs</name></member>
      <member refid="class_cognitive_network_1ab24f74115c11275f365245a4bb826c91" prot="public" virt="non-virtual"><scope>Neuron</scope><name>CloneCognitiveOutput</name></member>
      <member refid="class_cognitive_network_1a5734aa5378e9b701dca5e98017c1ea35" prot="public" virt="non-virtual"><scope>Neuron</scope><name>CloneCognitiveOutputs</name></member>
      <member refid="class_cognitive_network_1a1eef76439fffb9daaa3edc4e3c012831" prot="public" virt="non-virtual"><scope>Neuron</scope><name>CloneInterneuronSpace</name></member>
      <member refid="class_cognitive_network_1a5ee1d7b6df5bfe0048b4aea317c1974c" prot="public" virt="non-virtual"><scope>Neuron</scope><name>CloneInterneuronSpaces</name></member>
      <member refid="class_neuron_1ab85f7c42466657095efb3aca5a9ee71d" prot="public" virt="non-virtual"><scope>Neuron</scope><name>CloneMembrane</name></member>
      <member refid="class_neuron_1ae119d77522a4f11f5d9b1e935a9c80ba" prot="public" virt="non-virtual"><scope>Neuron</scope><name>CloneMembranes</name></member>
      <member refid="class_cognitive_network_1abf42d64965d64836d6fcbd7ce33c8db4" prot="public" virt="non-virtual"><scope>Neuron</scope><name>CloneNeuron</name></member>
      <member refid="class_cognitive_network_1a8852409e92434523ddbd48d699c5609f" prot="public" virt="non-virtual"><scope>Neuron</scope><name>CloneNeurons</name></member>
      <member refid="class_cognitive_network_1af78d31471a121844e4735d809c900502" prot="public" virt="non-virtual"><scope>Neuron</scope><name>CloneNeurotransmitter</name></member>
      <member refid="class_cognitive_network_1a2b2d40d179f95ff96e9aa0559234cc31" prot="public" virt="non-virtual"><scope>Neuron</scope><name>CloneNeurotransmitters</name></member>
      <member refid="class_cognitive_network_1aa8992740f25d46b0be3d9d8344c39f67" prot="public" virt="non-virtual"><scope>Neuron</scope><name>CloneOrbital</name></member>
      <member refid="class_cognitive_network_1a266b7baf2fd9d6b5c5652e251830020a" prot="public" virt="non-virtual"><scope>Neuron</scope><name>CloneOrbitals</name></member>
      <member refid="class_neuron_1a7706e0f722c70138458423c07b6b153b" prot="public" virt="non-virtual"><scope>Neuron</scope><name>CloneSoma</name></member>
      <member refid="class_neuron_1a508841fa635a6e89609c514a79ea59da" prot="public" virt="non-virtual"><scope>Neuron</scope><name>CloneSomas</name></member>
      <member refid="class_cognitive_network_1a40f88d3ce9d386ee4db5c1e0ad84dad2" prot="public" virt="non-virtual"><scope>Neuron</scope><name>CloneSynapse</name></member>
      <member refid="class_cognitive_network_1a82fe792704bcbf7df56b3023266f5f70" prot="public" virt="non-virtual"><scope>Neuron</scope><name>CloneSynapses</name></member>
      <member refid="class_universe_1a7a0e9796ff0d650a8b1fbde5fa5b761f" prot="protected" virt="non-virtual"><scope>Neuron</scope><name>cognitive_network_list</name></member>
      <member refid="class_cognitive_network_1a5a46cefb188858fdc023df3abbac0a47" prot="protected" virt="non-virtual"><scope>Neuron</scope><name>cognitiveinput_list</name></member>
      <member refid="class_cognitive_network_1a3daddb316744336648d317e7f71ed371" prot="public" virt="non-virtual"><scope>Neuron</scope><name>CognitiveNetwork</name></member>
      <member refid="class_cognitive_network_1a167b15e33bcbca43cb0a516159e890f2" prot="public" virt="non-virtual"><scope>Neuron</scope><name>CognitiveNetwork</name></member>
      <member refid="class_cognitive_network_1ac7ba285d3468a929dac88756a2c4e4f9" prot="public" virt="non-virtual"><scope>Neuron</scope><name>CognitiveNetwork</name></member>
      <member refid="class_cognitive_network_1a6ec49dcc8cc58cded71983291629179c" prot="public" virt="non-virtual"><scope>Neuron</scope><name>CognitiveNetwork</name></member>
      <member refid="class_cognitive_network_1a7a57ad82736c0d8b03e7607b5c603b00" prot="protected" virt="non-virtual"><scope>Neuron</scope><name>cognitiveoutput_list</name></member>
      <member refid="class_universe_1ae9795d06e406c4322637825aa545aa2f" prot="protected" virt="non-virtual"><scope>Neuron</scope><name>composite_forceparticle_list</name></member>
      <member refid="class_cognitive_network_1add96197c3dc51d94d06edb480fbc4a38" prot="public" virt="non-virtual"><scope>Neuron</scope><name>CreateCognitiveInput</name></member>
      <member refid="class_cognitive_network_1a0833f7b587f14e0c0778661a56bce957" prot="public" virt="non-virtual"><scope>Neuron</scope><name>CreateCognitiveInputs</name></member>
      <member refid="class_cognitive_network_1ac220350499bd323bd8f24ff0050cd60d" prot="public" virt="non-virtual"><scope>Neuron</scope><name>CreateCognitiveOutput</name></member>
      <member refid="class_cognitive_network_1a002df11f4389a122fc140c186ab665c9" prot="public" virt="non-virtual"><scope>Neuron</scope><name>CreateCognitiveOutputs</name></member>
      <member refid="class_cognitive_network_1af0dc86c7905baae6f2b5efb3a65b8819" prot="public" virt="non-virtual"><scope>Neuron</scope><name>CreateInterneuronSpace</name></member>
      <member refid="class_cognitive_network_1a2d671451d659079d5efb5cda10e48827" prot="public" virt="non-virtual"><scope>Neuron</scope><name>CreateInterneuronSpaces</name></member>
      <member refid="class_neuron_1af06efbcc1a96af0290673e9e048267cf" prot="public" virt="non-virtual"><scope>Neuron</scope><name>CreateMembrane</name></member>
      <member refid="class_neuron_1a5f6f460c6a98319a05c3ba06d14e6f60" prot="public" virt="non-virtual"><scope>Neuron</scope><name>CreateMembranes</name></member>
      <member refid="class_cognitive_network_1a9b5fcaf824d5b587775e7c44630affe6" prot="public" virt="non-virtual"><scope>Neuron</scope><name>CreateNeuron</name></member>
      <member refid="class_cognitive_network_1af9b2a136584c962e44114a7ee3d2804a" prot="public" virt="non-virtual"><scope>Neuron</scope><name>CreateNeurons</name></member>
      <member refid="class_cognitive_network_1a53d1047ae3ec721540b64b05abe01559" prot="public" virt="non-virtual"><scope>Neuron</scope><name>CreateNeurotransmitter</name></member>
      <member refid="class_cognitive_network_1ad877c495c9efdb582613a5af8d854ac3" prot="public" virt="non-virtual"><scope>Neuron</scope><name>CreateNeurotransmitters</name></member>
      <member refid="class_cognitive_network_1a5e0a782afc45d75d57fef91dd5513546" prot="public" virt="non-virtual"><scope>Neuron</scope><name>CreateOrbital</name></member>
      <member refid="class_cognitive_network_1a46d4189cf3e6b9af6190abe7b79539b4" prot="public" virt="non-virtual"><scope>Neuron</scope><name>CreateOrbitals</name></member>
      <member refid="class_neuron_1a32593a869b25c778c1856c36704f49cf" prot="public" virt="non-virtual"><scope>Neuron</scope><name>CreateSoma</name></member>
      <member refid="class_neuron_1a2016d83b02bfe9e5548d5c24ef31dded" prot="public" virt="non-virtual"><scope>Neuron</scope><name>CreateSomas</name></member>
      <member refid="class_cognitive_network_1ade8e9295b35790b136dca9084a1b7aa9" prot="public" virt="non-virtual"><scope>Neuron</scope><name>CreateSynapse</name></member>
      <member refid="class_cognitive_network_1ae6ae16f401e7699032ac9459132763c0" prot="public" virt="non-virtual"><scope>Neuron</scope><name>CreateSynapses</name></member>
      <member refid="class_universe_1a28615baf47d4558cbe5eebeed6575024" prot="public" virt="non-virtual"><scope>Neuron</scope><name>Creation</name></member>
      <member refid="class_cognitive_network_1a12e085cd47b7661190527fe55b6da8dc" prot="public" virt="non-virtual"><scope>Neuron</scope><name>DestroyCognitiveInput</name></member>
      <member refid="class_cognitive_network_1a00aa44de67dd0593a2498ce7a3b4c0f2" prot="public" virt="non-virtual"><scope>Neuron</scope><name>DestroyCognitiveInputs</name></member>
      <member refid="class_cognitive_network_1a8475cf7277d25532bb31926e768600e8" prot="public" virt="non-virtual"><scope>Neuron</scope><name>DestroyCognitiveOutput</name></member>
      <member refid="class_cognitive_network_1ad08191cbab02f26f69d25bc7e6b5c1ee" prot="public" virt="non-virtual"><scope>Neuron</scope><name>DestroyCognitiveOutputs</name></member>
      <member refid="class_cognitive_network_1acdda154177d3b3a92885c10f6b3dc274" prot="public" virt="non-virtual"><scope>Neuron</scope><name>DestroyInterneuronSpace</name></member>
      <member refid="class_cognitive_network_1a718833496332e0471186c9a886005c4a" prot="public" virt="non-virtual"><scope>Neuron</scope><name>DestroyInterneuronSpaces</name></member>
      <member refid="class_neuron_1a127d1b915e976c63e731a94b7d27e0b1" prot="public" virt="non-virtual"><scope>Neuron</scope><name>DestroyMembrane</name></member>
      <member refid="class_neuron_1ab77feff95ed7127400a4e02648641ff7" prot="public" virt="non-virtual"><scope>Neuron</scope><name>DestroyMembranes</name></member>
      <member refid="class_cognitive_network_1ab3318f517da206ad4286b6cc22acf520" prot="public" virt="non-virtual"><scope>Neuron</scope><name>DestroyNeuron</name></member>
      <member refid="class_cognitive_network_1af2f706043a0c227b93877e29b056f3c9" prot="public" virt="non-virtual"><scope>Neuron</scope><name>DestroyNeurons</name></member>
      <member refid="class_cognitive_network_1a0f943978df49ef879c43c15c81682a8a" prot="public" virt="non-virtual"><scope>Neuron</scope><name>DestroyNeurotransmitter</name></member>
      <member refid="class_cognitive_network_1a7f705e562562e9778ee0b5260dda9f09" prot="public" virt="non-virtual"><scope>Neuron</scope><name>DestroyNeurotransmitters</name></member>
      <member refid="class_cognitive_network_1aefecb3a2464f7f21449e522af5119c63" prot="public" virt="non-virtual"><scope>Neuron</scope><name>DestroyOrbital</name></member>
      <member refid="class_cognitive_network_1a0ee8259d26e30779bf06471fb8a10bb5" prot="public" virt="non-virtual"><scope>Neuron</scope><name>DestroyOrbitals</name></member>
      <member refid="class_neuron_1a6ff7510f73e29c31003b016bdcb4a70e" prot="public" virt="non-virtual"><scope>Neuron</scope><name>DestroySoma</name></member>
      <member refid="class_neuron_1a32b3a98eec58dc66481a2b877a7592cb" prot="public" virt="non-virtual"><scope>Neuron</scope><name>DestroySomas</name></member>
      <member refid="class_cognitive_network_1a08b87aa9a0823355ef7cef77414dc6dc" prot="public" virt="non-virtual"><scope>Neuron</scope><name>DestroySynapse</name></member>
      <member refid="class_cognitive_network_1a141e9e8e6337d42fc19edd75bb50e47b" prot="public" virt="non-virtual"><scope>Neuron</scope><name>DestroySynapses</name></member>
      <member refid="class_cognitive_network_1a79f0541fde6dd50f8e87f3f46d849b95" prot="protected" virt="non-virtual"><scope>Neuron</scope><name>dimension_list</name></member>
      <member refid="class_neuron_1ab3cea312e56a8b3bb4707a1c2654fc36" prot="private" virt="non-virtual"><scope>Neuron</scope><name>duration_since_last_event</name></member>
      <member refid="class_universe_1a015b19f6d5ad84ebaa9e3e7c8352389c" prot="protected" virt="non-virtual"><scope>Neuron</scope><name>elementary_force_list</name></member>
      <member refid="class_universe_1aeb2e63cf49f0b5595e6c15109863bd3b" prot="protected" virt="non-virtual"><scope>Neuron</scope><name>elementary_particle_list</name></member>
      <member refid="class_universe_1a982502e46868a00a9111738ccc9355c2" prot="public" virt="non-virtual"><scope>Neuron</scope><name>ExtendLife</name></member>
      <member refid="class_neuron_1a93cce70c19c8e70accaa31908d3f29f6" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetCapacity</name></member>
      <member refid="class_neuron_1ae8b6c47bebe302e62721dc4a6e447ca2" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetChannelMax</name></member>
      <member refid="class_neuron_1a794c8fa270ea0600dab4fd13c25912fd" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetChannelMin</name></member>
      <member refid="class_cognitive_network_1a2ff68a0d11cdb29af2f05a69a11911a4" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetCognitiveInput</name></member>
      <member refid="class_cognitive_network_1a92b896643b881e4030401e0f7fd256bf" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetCognitiveInputs</name></member>
      <member refid="class_universe_1a1ea2b7e438bfdc7dd599aa59c310b126" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetCognitiveNetwork</name></member>
      <member refid="class_cognitive_network_1af33f3ff9dd829da73d183d2624f24964" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetCognitiveNetworkDeviceTag</name></member>
      <member refid="class_universe_1a06968a24194280a43f077c5b77379ea8" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetCognitiveNetworks</name></member>
      <member refid="class_cognitive_network_1a947fa4c50fecc4008d2bcfc96a272ffc" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetCognitiveOutput</name></member>
      <member refid="class_cognitive_network_1acdf847165899c36d6d9d6843ecc27218" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetCognitiveOutputs</name></member>
      <member refid="class_universe_1a3e2acc1d75765a6e8e852fca919c5b96" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetCompositeForceParticle</name></member>
      <member refid="class_universe_1aed37d7224b4e31bdfb0632e39bf19694" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetCompositeForceParticles</name></member>
      <member refid="class_neuron_1a0b5fe55bf939808986b3697d18a834f4" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetCounter</name></member>
      <member refid="class_universe_1ab79a380dee684c6dc304b571f4d28645" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetDimension</name></member>
      <member refid="class_universe_1a1869fc7bf43827378bab5a701f7f917a" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetDimensions</name></member>
      <member refid="class_neuron_1adfee1a62df820344b84fe2020451b24f" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetDisabled</name></member>
      <member refid="class_cognitive_network_1a09e5a1c774c84529a7adfe56fadb7467" prot="public" virt="virtual"><scope>Neuron</scope><name>GetElectromagnetic</name></member>
      <member refid="class_cognitive_network_1a8c4e0454068f714691ae250f795cdb67" prot="public" virt="virtual"><scope>Neuron</scope><name>GetElectromagneticElectroweak</name></member>
      <member refid="class_universe_1a9506017d944cb64e67567477c1505a53" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetElementaryForce</name></member>
      <member refid="class_universe_1a6a8ed579b2eedd3aceebda9f3d78aa0e" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetElementaryForces</name></member>
      <member refid="class_universe_1acef54e17666d17078c522388f8f6e4f9" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetElementaryParticle</name></member>
      <member refid="class_universe_1a168fd9bf7602adcba1de5dd93a212775" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetElementaryParticles</name></member>
      <member refid="class_neuron_1a91dd5325856e246d98c2864e1c955972" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetEnergy</name></member>
      <member refid="class_neuron_1a94accac3223afdecd1edf25e6db59ace" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetGateKeeper</name></member>
      <member refid="class_cognitive_network_1a4b5150310288c52f00ecb745ae9e7f86" prot="public" virt="virtual"><scope>Neuron</scope><name>GetGravitation</name></member>
      <member refid="class_cognitive_network_1a0119d61e86ea6b84ad7f69f88d59d008" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetInterneuronSpace</name></member>
      <member refid="class_cognitive_network_1a4daf966882d527b784bd359794ad39ca" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetInterneuronSpaces</name></member>
      <member refid="class_universe_1a69de663cf2e32e65ed28c44ae666db3a" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetMatter</name></member>
      <member refid="class_universe_1a4307a62e183fed8cf2b92be0f6014688" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetMatters</name></member>
      <member refid="class_neuron_1a5bc4e67c5f2d8a3bcd160aa3f5086aec" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetMembrane</name></member>
      <member refid="class_neuron_1ac759d9589c0505332e8238cafbc8fa66" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetMembranes</name></member>
      <member refid="class_universe_1aaa03fb8178d790afd992dd094bb64b47" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetMonomer</name></member>
      <member refid="class_universe_1aca82a914e0f8bd7cd1ec80a7220f0a0e" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetMonomers</name></member>
      <member refid="class_cognitive_network_1ac12f0af92d878d45dca7303dc065c383" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetNeuron</name></member>
      <member refid="class_neuron_1aff3a33f5d8ef5dacdec9c03df50f168c" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetNeuronDeviceTag</name></member>
      <member refid="class_cognitive_network_1af81132245e486c496a055f54a5a520d0" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetNeuronPool</name></member>
      <member refid="class_cognitive_network_1a0e9e37e976a7ca5ee625e2d7b36fd7ea" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetNeurons</name></member>
      <member refid="class_neuron_1a98f326ea86e6e8371b639609a4495c37" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetNeuronType</name></member>
      <member refid="class_cognitive_network_1a85890c201376061b1ffbe8fdfc1a8633" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetNeurotransmitter</name></member>
      <member refid="class_cognitive_network_1a4e5b1d60cda4ddb4bd04d8dca42b7a5b" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetNeurotransmitterPool</name></member>
      <member refid="class_cognitive_network_1ac56b1585864b372c8897dcb5720d00a7" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetNeurotransmitters</name></member>
      <member refid="class_cognitive_network_1a1c92a8f6c42788cf8ca890f062f853a3" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetObjectType</name></member>
      <member refid="class_cognitive_network_1a69655ef1e12bac5f74c2eb85c72720f4" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetOrbital</name></member>
      <member refid="class_cognitive_network_1af5995eaa4ba35c555a6b65d895451f25" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetOrbitalPool</name></member>
      <member refid="class_cognitive_network_1aa21d28ffc3b507236a7dad64663f6c42" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetOrbitals</name></member>
      <member refid="class_universe_1a3774f14a13a55827a1a4eea0a404edcb" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetPoint</name></member>
      <member refid="class_universe_1a765c6c658b7a465cd92418690db846ae" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetPoints</name></member>
      <member refid="class_universe_1a2d5d3924a7d7ffd2a5f47be9f137d86e" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetPolymer</name></member>
      <member refid="class_universe_1aac5d1c1a3a3ba56c8ca7115a85b2c239" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetPolymers</name></member>
      <member refid="class_neuron_1a0573244d3c78a22a45c249db536cbb68" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetRestingPotential</name></member>
      <member refid="class_universe_1a9f7b74fc21d45ddaa78aa18e9a337bcd" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetSolid</name></member>
      <member refid="class_universe_1a669fc068dd7820a5af309bfbe67199aa" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetSolids</name></member>
      <member refid="class_neuron_1a8539a7965349078a7b1c1265895daefa" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetSoma</name></member>
      <member refid="class_neuron_1aa6f1237ed89c48eb57610083edf43efa" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetSomaPool</name></member>
      <member refid="class_neuron_1a867fbd498b54c115a2c8769f83c48020" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetSomas</name></member>
      <member refid="class_cognitive_network_1a277247686f8af159e7a7beb0ec379225" prot="public" virt="virtual"><scope>Neuron</scope><name>GetStrong</name></member>
      <member refid="class_cognitive_network_1a942ca90561fedae46136de620accbfea" prot="public" virt="virtual"><scope>Neuron</scope><name>GetStrongFundamental</name></member>
      <member refid="class_cognitive_network_1acfa5de663b3e686c4d9ea1a3bb483b11" prot="public" virt="virtual"><scope>Neuron</scope><name>GetStrongResidual</name></member>
      <member refid="class_cognitive_network_1a1944aaa13667bc267e6ef44892da969d" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetSynapse</name></member>
      <member refid="class_cognitive_network_1ae0068b9df823e1b10fed3c73f1cb4702" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetSynapsePool</name></member>
      <member refid="class_cognitive_network_1aa3376f2e7aed9639c2b5ba27aa6fb314" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetSynapses</name></member>
      <member refid="class_neuron_1a745b090da1b8f8fc7e3cf0ca06dfb117" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetUsage</name></member>
      <member refid="class_neuron_1a9af31418d1232135bf5074f6a3d5dbf1" prot="public" virt="non-virtual"><scope>Neuron</scope><name>GetVisualisationList</name></member>
      <member refid="class_cognitive_network_1a761db75ac8eab7b4625e5a398891bd12" prot="public" virt="virtual"><scope>Neuron</scope><name>GetWeak</name></member>
      <member refid="class_cognitive_network_1aa6342c390fe8e7c648b4c6bc8f93ba4a" prot="public" virt="virtual"><scope>Neuron</scope><name>GetWeakElectroweak</name></member>
      <member refid="class_neuron_1a82b34717999a29e5413ebfcfa58c9356" prot="public" virt="non-virtual"><scope>Neuron</scope><name>Growth</name></member>
      <member refid="class_cognitive_network_1aaf69f6e0cc0084eb748ef1540c773f85" prot="protected" virt="non-virtual"><scope>Neuron</scope><name>interneuronspace_list</name></member>
      <member refid="class_universe_1a8fdaa6d06584e1ef50c4c613b22b786e" prot="public" virt="non-virtual"><scope>Neuron</scope><name>IsDead</name></member>
      <member refid="class_neuron_1a82f1de3ea8317c97f4968a06d13ec8ca" prot="private" virt="non-virtual"><scope>Neuron</scope><name>m_addStatus</name></member>
      <member refid="class_neuron_1a79b66d9cd9cc28601bffe154bee05525" prot="private" virt="non-virtual"><scope>Neuron</scope><name>m_ChannelMax</name></member>
      <member refid="class_neuron_1aaba16c243f6b227b44609475e4e9a8cc" prot="private" virt="non-virtual"><scope>Neuron</scope><name>m_ChannelMin</name></member>
      <member refid="class_neuron_1ad6955bbce8c9b6c6ccde10c8022d9a07" prot="private" virt="non-virtual"><scope>Neuron</scope><name>m_Counter</name></member>
      <member refid="class_neuron_1a44d4be63f49259ad3f475c695e38aa88" prot="private" virt="non-virtual"><scope>Neuron</scope><name>m_GateKeeper</name></member>
      <member refid="class_neuron_1a225fc0b7f0586a11fb62fee76f3f1acb" prot="private" virt="non-virtual"><scope>Neuron</scope><name>m_RestingPotential</name></member>
      <member refid="class_neuron_1ab35fb4d7f3cc2b9491a2d9eb9d75c39a" prot="private" virt="non-virtual"><scope>Neuron</scope><name>m_Spike</name></member>
      <member refid="class_neuron_1a8d900856e69534603cd984fef05811be" prot="private" virt="non-virtual"><scope>Neuron</scope><name>m_Tag</name></member>
      <member refid="class_neuron_1aa7f0b4aaf00fa2f9b8de0a0932d5fb65" prot="private" virt="non-virtual"><scope>Neuron</scope><name>m_TimeDilation</name></member>
      <member refid="class_neuron_1a6e0b63b5c0aada57da5f5e4fe71f3955" prot="private" virt="non-virtual"><scope>Neuron</scope><name>m_TimeThreshold</name></member>
      <member refid="class_universe_1a409650bc0425fc22c7713487a2a6dd8e" prot="protected" virt="non-virtual"><scope>Neuron</scope><name>matter_list</name></member>
      <member refid="class_neuron_1a878a5a42025ba8205adeb9a50b2c1457" prot="protected" virt="non-virtual"><scope>Neuron</scope><name>membrane_list</name></member>
      <member refid="class_neuron_1abf8b1f840cd466fb23f2e778edef0a92" prot="private" virt="non-virtual"><scope>Neuron</scope><name>membrane_pool</name></member>
      <member refid="class_universe_1a3d55ba29f95a9793b69c01f7942eca9f" prot="protected" virt="non-virtual"><scope>Neuron</scope><name>monomer_list</name></member>
      <member refid="class_neuron_1a823487d01615fadb8ac19a2768dd9d96" prot="public" virt="non-virtual"><scope>Neuron</scope><name>Neuron</name></member>
      <member refid="class_neuron_1acbc433cac4f27aa7f4e05be26c336aa5" prot="public" virt="non-virtual"><scope>Neuron</scope><name>Neuron</name></member>
      <member refid="class_neuron_1a4611499895417d44250c452d0fc719a6" prot="public" virt="non-virtual"><scope>Neuron</scope><name>Neuron</name></member>
      <member refid="class_neuron_1a6839febd20fb8f776151e00142411a56" prot="public" virt="non-virtual"><scope>Neuron</scope><name>Neuron</name></member>
      <member refid="class_cognitive_network_1abbb9ff97e1b9cd61602d95f44c30132e" prot="protected" virt="non-virtual"><scope>Neuron</scope><name>neuron_list</name></member>
      <member refid="class_neuron_1a182d8061d0beac5ede8b5ea9ac21a1c9" prot="private" virt="non-virtual"><scope>Neuron</scope><name>neuron_type</name></member>
      <member refid="class_neuron_1a56cdde5298abf121898ebd4ea99a738b" prot="private" virt="non-virtual"><scope>Neuron</scope><name>neuronCapacity</name></member>
      <member refid="class_neuron_1a2ca1ab8d7891fbd10646a936e272cb7d" prot="private" virt="non-virtual"><scope>Neuron</scope><name>neuronCounter</name></member>
      <member refid="class_neuron_1a785cf2a73a206d056db9633d447dbfb3" prot="private" virt="non-virtual"><scope>Neuron</scope><name>neuronUsage</name></member>
      <member refid="class_cognitive_network_1a7018bee3dbf538c3d0c81a64aa002ab8" prot="protected" virt="non-virtual"><scope>Neuron</scope><name>neurotransmitter_list</name></member>
      <member refid="class_neuron_1a8259952162df5c8bb66eb78126feafe6" prot="protected" virt="non-virtual"><scope>Neuron</scope><name>object_connection_list</name></member>
      <member refid="class_neuron_1a09ea127c2427653e15bfce989c717b3f" prot="private" virt="non-virtual"><scope>Neuron</scope><name>object_disabled</name></member>
      <member refid="class_neuron_1a2dba550b29497723039a3aa193934ab2" prot="private" virt="non-virtual"><scope>Neuron</scope><name>object_energy</name></member>
      <member refid="class_neuron_1ad0dd6393bdd85a09e35179cabd1083a2" prot="private" virt="non-virtual"><scope>Neuron</scope><name>object_energy_threshold</name></member>
      <member refid="class_neuron_1ad936ed27ba3b0f5d8fe18d1dd2fd5fcf" prot="private" virt="non-virtual"><scope>Neuron</scope><name>object_initialised</name></member>
      <member refid="class_neuron_1ada166022e3abc5a5e32db25343f8f765" prot="private" virt="non-virtual"><scope>Neuron</scope><name>object_size</name></member>
      <member refid="class_neuron_1a82d0a4739244d79ff929be01eeb0be28" prot="public" virt="non-virtual"><scope>Neuron</scope><name>OpenGate</name></member>
      <member refid="class_neuron_1a2ae3e36fe53bb2c406559e5a7c309027" prot="private" virt="non-virtual"><scope>Neuron</scope><name>Orbital</name></member>
      <member refid="class_cognitive_network_1a263efd10857d5507c0e889e48f7329fe" prot="protected" virt="non-virtual"><scope>Neuron</scope><name>orbital_list</name></member>
      <member refid="class_universe_1a9dc8abd2f8f84318722184f38e1b8cc7" prot="protected" virt="non-virtual"><scope>Neuron</scope><name>point_list</name></member>
      <member refid="class_cognitive_network_1ac97c08a0af7dc0d02fbe059827b6be87" prot="public" virt="virtual"><scope>Neuron</scope><name>PollElementaryForce</name></member>
      <member refid="class_universe_1a4d898757f2d67ca5ab5d504388d6199a" prot="protected" virt="non-virtual"><scope>Neuron</scope><name>polymer_list</name></member>
      <member refid="class_neuron_1ab66c0975e682e5339cabc50981732ae5" prot="private" virt="non-virtual"><scope>Neuron</scope><name>previous_event_time</name></member>
      <member refid="class_cognitive_network_1af79bf7f8b61d5392df7a87bd444eb550" prot="public" virt="non-virtual"><scope>Neuron</scope><name>RemoveCognitiveInput</name></member>
      <member refid="class_cognitive_network_1aaaf93e7c732b1e1e81060f82ff73c93a" prot="public" virt="non-virtual"><scope>Neuron</scope><name>RemoveCognitiveInputs</name></member>
      <member refid="class_cognitive_network_1a9874b11ac465c84ccf7baab0a40fb84e" prot="public" virt="non-virtual"><scope>Neuron</scope><name>RemoveCognitiveOutput</name></member>
      <member refid="class_cognitive_network_1a2f4956b004c828f0165f28c03e089144" prot="public" virt="non-virtual"><scope>Neuron</scope><name>RemoveCognitiveOutputs</name></member>
      <member refid="class_cognitive_network_1a04e38cea356f1c7ac31c4df5e19d759c" prot="public" virt="non-virtual"><scope>Neuron</scope><name>RemoveInterneuronSpace</name></member>
      <member refid="class_cognitive_network_1a994c5f93447a82429809c89aa08d3dc1" prot="public" virt="non-virtual"><scope>Neuron</scope><name>RemoveInterneuronSpaces</name></member>
      <member refid="class_neuron_1a190ae0628482048bef95c8b318939322" prot="public" virt="non-virtual"><scope>Neuron</scope><name>RemoveMembrane</name></member>
      <member refid="class_neuron_1a3cd5fc6f1a354d99bb8768df7ee40552" prot="public" virt="non-virtual"><scope>Neuron</scope><name>RemoveMembranes</name></member>
      <member refid="class_cognitive_network_1a33e911ec87d902a8fd8bb6d9e23c4261" prot="public" virt="non-virtual"><scope>Neuron</scope><name>RemoveNeuron</name></member>
      <member refid="class_cognitive_network_1a130985ff0aa14b2a17fc2c589e65f868" prot="public" virt="non-virtual"><scope>Neuron</scope><name>RemoveNeurons</name></member>
      <member refid="class_cognitive_network_1ac0728c12a6d4bb87b6e8c9163435c8e6" prot="public" virt="non-virtual"><scope>Neuron</scope><name>RemoveNeurotransmitter</name></member>
      <member refid="class_cognitive_network_1a5e706084296ce84ff6884c1506213b03" prot="public" virt="non-virtual"><scope>Neuron</scope><name>RemoveNeurotransmitters</name></member>
      <member refid="class_cognitive_network_1a6ed0e198f6dcfdd45d57df5d3ad5754c" prot="public" virt="non-virtual"><scope>Neuron</scope><name>RemoveOrbital</name></member>
      <member refid="class_cognitive_network_1af7834d400995607c2a5a5eac7b5e006d" prot="public" virt="non-virtual"><scope>Neuron</scope><name>RemoveOrbitals</name></member>
      <member refid="class_neuron_1a4f8c2f0c1b294493a7c581a7f46c2863" prot="public" virt="non-virtual"><scope>Neuron</scope><name>RemoveSoma</name></member>
      <member refid="class_neuron_1a976b1bab63d0bd21b1c8c8e1cfbd17fe" prot="public" virt="non-virtual"><scope>Neuron</scope><name>RemoveSomas</name></member>
      <member refid="class_cognitive_network_1a0764ede1c23caa7022a01657a0e3726b" prot="public" virt="non-virtual"><scope>Neuron</scope><name>RemoveSynapse</name></member>
      <member refid="class_cognitive_network_1a87d6628f388baed1edb8efda9062c443" prot="public" virt="non-virtual"><scope>Neuron</scope><name>RemoveSynapses</name></member>
      <member refid="class_neuron_1a4c154fecb0b689d7da9d8d274f067ccf" prot="public" virt="non-virtual"><scope>Neuron</scope><name>ResetParameters</name></member>
      <member refid="class_universe_1aeda74e3902c0e56c0c09779854045cde" prot="public" virt="non-virtual"><scope>Neuron</scope><name>ReturnEnergy</name></member>
      <member refid="class_neuron_1a8f5766ea61dc46b7a25361df540755ec" prot="public" virt="non-virtual"><scope>Neuron</scope><name>SetCapacity</name></member>
      <member refid="class_neuron_1aed1ba99e24b905cd91a519c33b5a62b0" prot="public" virt="non-virtual"><scope>Neuron</scope><name>SetChannelMax</name></member>
      <member refid="class_neuron_1ae463ad8173c63e7970a5f4594667d481" prot="public" virt="non-virtual"><scope>Neuron</scope><name>SetChannelMin</name></member>
      <member refid="class_cognitive_network_1a99f801aeca299186cc706696696749b1" prot="public" virt="virtual"><scope>Neuron</scope><name>SetCharge</name></member>
      <member refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" prot="public" virt="non-virtual"><scope>Neuron</scope><name>SetCognitiveNetworkDeviceTag</name></member>
      <member refid="class_neuron_1a92f942f6f0bd783c39bb550cf4bb8fd0" prot="public" virt="non-virtual"><scope>Neuron</scope><name>SetCounter</name></member>
      <member refid="class_universe_1aa22202ae740eb1355529afcb13285e91" prot="public" virt="virtual" ambiguityscope="Universe::"><scope>Neuron</scope><name>SetCounter</name></member>
      <member refid="class_neuron_1af9ad96e27f7692e9e328d90e4c96977a" prot="public" virt="non-virtual"><scope>Neuron</scope><name>SetDisabled</name></member>
      <member refid="class_cognitive_network_1a31764cd5746369d16b45f2ff74806a0b" prot="public" virt="virtual"><scope>Neuron</scope><name>SetElectromagnetic</name></member>
      <member refid="class_cognitive_network_1a270f6842ec14b3e5b80dedf7b48ea6f4" prot="public" virt="virtual"><scope>Neuron</scope><name>SetElectromagneticElectroweak</name></member>
      <member refid="class_neuron_1a5efa690ce4d8ff2f8dfb1fbfd84c5279" prot="public" virt="non-virtual"><scope>Neuron</scope><name>SetEnergy</name></member>
      <member refid="class_neuron_1a492f597021faf1b74942bc75364c3c22" prot="public" virt="non-virtual"><scope>Neuron</scope><name>SetGateKeeper</name></member>
      <member refid="class_cognitive_network_1af9f082a70f0cc25a3f818d9eace5a527" prot="public" virt="virtual"><scope>Neuron</scope><name>SetGravitation</name></member>
      <member refid="class_universe_1ac3443dd59b61ae3110f07f681f63ed0a" prot="public" virt="non-virtual"><scope>Neuron</scope><name>SetLifespan</name></member>
      <member refid="class_neuron_1aa06d0f1a129e4a901a60e7343bc43533" prot="public" virt="non-virtual"><scope>Neuron</scope><name>SetNeuronDeviceTag</name></member>
      <member refid="class_cognitive_network_1aeb59b511e2ef526c43df1d24a468b571" prot="public" virt="non-virtual"><scope>Neuron</scope><name>SetNeuronPool</name></member>
      <member refid="class_neuron_1afc685a0444425fceab6685a6ee004b65" prot="public" virt="non-virtual"><scope>Neuron</scope><name>SetNeuronType</name></member>
      <member refid="class_cognitive_network_1aaa10c36c0b0024fa717d8d61a4a06920" prot="public" virt="non-virtual"><scope>Neuron</scope><name>SetNeurotransmitterPool</name></member>
      <member refid="class_neuron_1ab371e2dacf2cdde8db5547b72fb45ca1" prot="public" virt="non-virtual"><scope>Neuron</scope><name>SetObjectType</name></member>
      <member refid="class_cognitive_network_1aaa3929bfba068659e9681f85deaf79cb" prot="public" virt="non-virtual"><scope>Neuron</scope><name>SetOrbitalPool</name></member>
      <member refid="class_neuron_1a14bef0cc064213659b38c93b002e8956" prot="public" virt="non-virtual"><scope>Neuron</scope><name>SetSomaPool</name></member>
      <member refid="class_cognitive_network_1a3fc6d08413bfd4350f94d6f2627eedc7" prot="public" virt="virtual"><scope>Neuron</scope><name>SetSpin</name></member>
      <member refid="class_cognitive_network_1a50f2a12c9873e623d6247318b041ba30" prot="public" virt="virtual"><scope>Neuron</scope><name>SetStrong</name></member>
      <member refid="class_cognitive_network_1ac54286eea279f5caa98b642b9084fd55" prot="public" virt="virtual"><scope>Neuron</scope><name>SetStrongFundamental</name></member>
      <member refid="class_cognitive_network_1a6f7210dd8c2786518329faa61b6e14d5" prot="public" virt="virtual"><scope>Neuron</scope><name>SetStrongResidual</name></member>
      <member refid="class_cognitive_network_1a30f35d1bff2e1e3a5a2d921791cfe6b8" prot="public" virt="non-virtual"><scope>Neuron</scope><name>SetSynapsePool</name></member>
      <member refid="class_neuron_1abf99856ac41b5c9c4948b3204bbc1590" prot="public" virt="non-virtual"><scope>Neuron</scope><name>SetUsage</name></member>
      <member refid="class_cognitive_network_1ab39c9eed50da6d3630c4498ae64b804e" prot="public" virt="virtual"><scope>Neuron</scope><name>SetWeak</name></member>
      <member refid="class_cognitive_network_1a116f6818986a622e4a318857859e2495" prot="public" virt="virtual"><scope>Neuron</scope><name>SetWeakElectroweak</name></member>
      <member refid="class_universe_1a747f9d3cf0b2caada4461cb7b12ea17b" prot="protected" virt="non-virtual"><scope>Neuron</scope><name>solid_list</name></member>
      <member refid="class_neuron_1abb3745c6a8727f4ceb8db9e2258b90b5" prot="protected" virt="non-virtual"><scope>Neuron</scope><name>soma_list</name></member>
      <member refid="class_neuron_1a575bb396a026333541f5ff3ec1a90602" prot="private" virt="non-virtual"><scope>Neuron</scope><name>soma_pool</name></member>
      <member refid="class_cognitive_network_1a9218de9d63b10b313df289d1312c81e0" prot="protected" virt="non-virtual"><scope>Neuron</scope><name>synapse_list</name></member>
      <member refid="class_universe_1aa220508c4cc12b02c6fe494622ebb58d" prot="public" virt="non-virtual"><scope>Neuron</scope><name>TheCalculatedTimeNow</name></member>
      <member refid="class_universe_1ae54d34c5d695917e074b8e07e8820bdb" prot="public" virt="non-virtual"><scope>Neuron</scope><name>TheTimeNow</name></member>
      <member refid="class_universe_1a3ce4365c727cb6eb5b650146a4188b9b" prot="public" virt="non-virtual"><scope>Neuron</scope><name>time_dimension_pointer</name></member>
      <member refid="class_neuron_1aac5b1f8a26738f915778ebf25183f258" prot="private" virt="non-virtual"><scope>Neuron</scope><name>time_object_created</name></member>
      <member refid="class_neuron_1a32fe82aa21f8a68392d696eea3a34c99" prot="public" virt="non-virtual"><scope>Neuron</scope><name>toggleDisabled</name></member>
      <member refid="class_universe_1a4d137a146dd3c2514dfb692dfbab6984" prot="public" virt="non-virtual"><scope>Neuron</scope><name>Universe</name></member>
      <member refid="class_universe_1a1210ce56049f1fc67f53aeda223bb82b" prot="public" virt="non-virtual"><scope>Neuron</scope><name>Universe</name></member>
      <member refid="class_universe_1a03af7455263d3028b55ca5dc93ebb6ba" prot="public" virt="non-virtual"><scope>Neuron</scope><name>Universe</name></member>
      <member refid="class_neuron_1a4d1dc3a9f30196fe2b09dfbfc0a567bb" prot="public" virt="non-virtual"><scope>Neuron</scope><name>Update</name></member>
      <member refid="class_neuron_1a06f45a5d1de890da84d3644fe58ea0a9" prot="public" virt="non-virtual"><scope>Neuron</scope><name>UpdateCycle</name></member>
      <member refid="class_cognitive_network_1aa37dda869174e4eef986cca4ce3e55d2" prot="public" virt="non-virtual" ambiguityscope="CognitiveNetwork::"><scope>Neuron</scope><name>UpdateCycle</name></member>
      <member refid="class_universe_1a0d79e614e1af951c06b78cb5768f9c8e" prot="public" virt="non-virtual" ambiguityscope="Universe::"><scope>Neuron</scope><name>UpdateCycle</name></member>
      <member refid="class_neuron_1a55c72e8066caf1ad8e25a2b0b453ee69" prot="public" virt="non-virtual"><scope>Neuron</scope><name>UpdateCycle2</name></member>
      <member refid="class_universe_1a63e878aaf03f1800b255e9a089a72a8b" prot="public" virt="non-virtual"><scope>Neuron</scope><name>UseEnergy</name></member>
      <member refid="class_neuron_1a00b1e2e5f9d224759df1aa54093092ba" prot="protected" virt="non-virtual"><scope>Neuron</scope><name>visualisation_list</name></member>
      <member refid="class_cognitive_network_1a17142cc6f0bb3894e63f6c66fa401778" prot="public" virt="virtual"><scope>Neuron</scope><name>~CognitiveNetwork</name></member>
      <member refid="class_neuron_1aecd41febe74ef417230cd74af0c8b801" prot="public" virt="virtual"><scope>Neuron</scope><name>~Neuron</name></member>
      <member refid="class_universe_1ad4d90f6f2727992762c6b409d3d3d228" prot="public" virt="virtual"><scope>Neuron</scope><name>~Universe</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
