<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="class_membrane_channel" kind="class" language="C++" prot="public">
    <compoundname>MembraneChannel</compoundname>
    <basecompoundref refid="class_membrane" prot="public" virt="non-virtual">Membrane</basecompoundref>
    <includes refid="membranechannel_8h" local="no">membranechannel.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_membrane_channel_1ad603f58813157b33ca81b919cf9c2897" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt;CognitiveNetwork*&gt; MembraneChannel::neurotransmitter_list</definition>
        <argsstring></argsstring>
        <name>neurotransmitter_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="102" column="1" bodyfile="BrainHarmonics/membranechannel.h" bodystart="102" bodyend="-1"/>
        <referencedby refid="class_membrane_channel_1aa8e78a1b0dd7c6b81cac09d33f01e6c2" compoundref="membranechannel_8cc" startline="74" endline="83">CreateNeurotransmitter</referencedby>
        <referencedby refid="class_membrane_channel_1a24c791e6cfd906d49e0ceb8a24eeb4cb" compoundref="membranechannel_8cc" startline="85" endline="104">CreateNeurotransmitters</referencedby>
        <referencedby refid="class_membrane_channel_1ae483c6bc45f73390070b824296762d4c" compoundref="membranechannel_8cc" startline="127" endline="136">AddNeurotransmitter</referencedby>
        <referencedby refid="class_membrane_channel_1a01fb5f3176cfa3423bb10a04bf69da01" compoundref="membranechannel_8cc" startline="138" endline="157">AddNeurotransmitters</referencedby>
        <referencedby refid="class_membrane_channel_1a91ce6506a8e82905de7cd031ed5d63f5" compoundref="membranechannel_8cc" startline="171" endline="174">GetNeurotransmitter</referencedby>
        <referencedby refid="class_membrane_channel_1a9fdb20eb7d3f9ebad864d07aaa835716" compoundref="membranechannel_8cc" startline="176" endline="179">GetNeurotransmitters</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_membrane_channel_1aa8beeb2908b603d7b568442b635f4164" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int MembraneChannel::m_NeuronType</definition>
        <argsstring></argsstring>
        <name>m_NeuronType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="105" column="1" bodyfile="BrainHarmonics/membranechannel.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_membrane_channel_1a99646a50163299948faa5a5f0da60add" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int MembraneChannel::membranechannel_type</definition>
        <argsstring></argsstring>
        <name>membranechannel_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="106" column="1" bodyfile="BrainHarmonics/membranechannel.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_membrane_channel_1a79af5f43970e9496ea293c9ac8bb73f6" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int MembraneChannel::neurotransmitter_pool</definition>
        <argsstring></argsstring>
        <name>neurotransmitter_pool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="107" column="1" bodyfile="BrainHarmonics/membranechannel.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_membrane_channel_1aaabe065df6250159df3ee8b9ea3f824f" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int MembraneChannel::m_addStatus</definition>
        <argsstring></argsstring>
        <name>m_addStatus</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="108" column="1" bodyfile="BrainHarmonics/membranechannel.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_membrane_channel_1a05a2ea08d814a99d1c349dab4b5f3266" prot="private" static="no" mutable="no">
        <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
        <definition>std::chrono::time_point&lt;Clock&gt; MembraneChannel::previous_event_time</definition>
        <argsstring></argsstring>
        <name>previous_event_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="109" column="1" bodyfile="BrainHarmonics/membranechannel.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_membrane_channel_1a16fbba2c7aaf591b3a1d012b745ee97a" prot="private" static="no" mutable="no">
        <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
        <definition>std::chrono::time_point&lt;Clock&gt; MembraneChannel::time_object_created</definition>
        <argsstring></argsstring>
        <name>time_object_created</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="110" column="1" bodyfile="BrainHarmonics/membranechannel.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_membrane_channel_1ad6b972a3874ddc236b63c7145123e0c2" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int MembraneChannel::duration_since_last_event</definition>
        <argsstring></argsstring>
        <name>duration_since_last_event</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="111" column="1" bodyfile="BrainHarmonics/membranechannel.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_membrane_channel_1af542b034258dce62f0666b0397fdd2fb" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double MembraneChannel::m_Volume</definition>
        <argsstring></argsstring>
        <name>m_Volume</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="112" column="1" bodyfile="BrainHarmonics/membranechannel.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_membrane_channel_1a85b55287517ff9d5cacb98bacf79a0d3" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double MembraneChannel::m_SurfaceArea</definition>
        <argsstring></argsstring>
        <name>m_SurfaceArea</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="113" column="1" bodyfile="BrainHarmonics/membranechannel.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_membrane_channel_1a0df3b8e24bd5d496d2832b486b35aab1" prot="private" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int MembraneChannel::m_Counter</definition>
        <argsstring></argsstring>
        <name>m_Counter</name>
        <briefdescription>
<para>Member variable &quot;m_Counter&quot;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="114" column="1" bodyfile="BrainHarmonics/membranechannel.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_membrane_channel_1a3615bab719d4a6c43a1d5d3e64d0079c" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double MembraneChannel::object_energy</definition>
        <argsstring></argsstring>
        <name>object_energy</name>
        <briefdescription>
<para>Member variable &quot;object_energy&quot;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="115" column="1" bodyfile="BrainHarmonics/membranechannel.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_membrane_channel_1acb697781909d7e8bd2e69fbb1268b2f2" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double MembraneChannel::object_energy_threshold</definition>
        <argsstring></argsstring>
        <name>object_energy_threshold</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="116" column="1" bodyfile="BrainHarmonics/membranechannel.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_membrane_channel_1a1c843660b2ea25ca2506f967dbd7e0d2" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double MembraneChannel::m_TimeDilation</definition>
        <argsstring></argsstring>
        <name>m_TimeDilation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="117" column="1" bodyfile="BrainHarmonics/membranechannel.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_membrane_channel_1a71a07468f3add9783acfbe2ca0df2101" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double MembraneChannel::m_TimeThreshold</definition>
        <argsstring></argsstring>
        <name>m_TimeThreshold</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="118" column="1" bodyfile="BrainHarmonics/membranechannel.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_membrane_channel_1aa3bd560d7c7c6c5b452d11f18bca30b1" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double MembraneChannel::m_Length</definition>
        <argsstring></argsstring>
        <name>m_Length</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="120" column="1" bodyfile="BrainHarmonics/membranechannel.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_membrane_channel_1a9cd227ac36102ed8958973ae46163e1c" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool MembraneChannel::object_initialised</definition>
        <argsstring></argsstring>
        <name>object_initialised</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="121" column="1" bodyfile="BrainHarmonics/membranechannel.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_membrane_channel_1acd2bbf349255bbeb5ee2304f05e14ff6" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool MembraneChannel::object_disabled</definition>
        <argsstring></argsstring>
        <name>object_disabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="122" column="1" bodyfile="BrainHarmonics/membranechannel.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_membrane_channel_1abc68fa8d4693c6512c15a230b9bc8744" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double MembraneChannel::object_size</definition>
        <argsstring></argsstring>
        <name>object_size</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="123" column="1" bodyfile="BrainHarmonics/membranechannel.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_membrane_channel_1a41896472da1942a6be07eb8d6e8e508f" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double MembraneChannel::object_energyFull</definition>
        <argsstring></argsstring>
        <name>object_energyFull</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="124" column="1" bodyfile="BrainHarmonics/membranechannel.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_membrane_channel_1afe6cbd4b6eeca252fde5c1b3b23f4717" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int MembraneChannel::m_Ions</definition>
        <argsstring></argsstring>
        <name>m_Ions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="125" column="1" bodyfile="BrainHarmonics/membranechannel.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_membrane_channel_1ab257b77285836ce5dc0c16824116351b" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool MembraneChannel::m_boundReceptor</definition>
        <argsstring></argsstring>
        <name>m_boundReceptor</name>
        <briefdescription>
<para>Member variable &quot;m_boundReceptor&quot;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="126" column="1" bodyfile="BrainHarmonics/membranechannel.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_membrane_channel_1a21f2bf86c93a07d133d01927af48d96d" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int MembraneChannel::m_typeReceptor</definition>
        <argsstring></argsstring>
        <name>m_typeReceptor</name>
        <briefdescription>
<para>Member variable &quot;m_typeReceptor&quot;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="127" column="1" bodyfile="BrainHarmonics/membranechannel.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_membrane_channel_1acbc07cd5836394396b0c1944f43350d6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>MembraneChannel::MembraneChannel</definition>
        <argsstring>()</argsstring>
        <name>MembraneChannel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="36" column="1" bodyfile="BrainHarmonics/membranechannel.h" bodystart="36" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="class_membrane_channel_1a17cdd2064bebb7bd2568cf5ec92715fc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>MembraneChannel::MembraneChannel</definition>
        <argsstring>(unsigned int object_type)</argsstring>
        <name>MembraneChannel</name>
        <param>
          <type>unsigned int</type>
          <declname>object_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="38" column="1" bodyfile="BrainHarmonics/membranechannel.h" bodystart="38" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="class_membrane_channel_1aedc9eb52da9e7160850f552781df27b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>MembraneChannel::MembraneChannel</definition>
        <argsstring>(unsigned int object_type, std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>MembraneChannel</name>
        <param>
          <type>unsigned int</type>
          <declname>object_type</declname>
        </param>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="40" column="1" bodyfile="BrainHarmonics/membranechannel.h" bodystart="40" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="class_membrane_channel_1ac467743cbdebcdc6a77ad5ea0527e6f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>MembraneChannel::MembraneChannel</definition>
        <argsstring>(unsigned int object_type, std::chrono::time_point&lt; Clock &gt; event_time, Membrane &amp;membrane_connector)</argsstring>
        <name>MembraneChannel</name>
        <param>
          <type>unsigned int</type>
          <declname>object_type</declname>
        </param>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type><ref refid="class_membrane" kindref="compound">Membrane</ref> &amp;</type>
          <declname>membrane_connector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="42" column="1" bodyfile="BrainHarmonics/membranechannel.h" bodystart="42" bodyend="51"/>
        <references refid="class_universe_1a28615baf47d4558cbe5eebeed6575024" compoundref="universe_8cc" startline="57" endline="61">Universe::Creation</references>
      </memberdef>
      <memberdef kind="function" id="class_membrane_channel_1a925e7e98530ef9cc94616ea7a4dd0cbd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual MembraneChannel::~MembraneChannel</definition>
        <argsstring>()</argsstring>
        <name>~MembraneChannel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default destructor </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="53" column="1" bodyfile="BrainHarmonics/membranechannel.h" bodystart="53" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="class_membrane_channel_1ac856b74d47b28bd8638fce9c0f12dd20" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int MembraneChannel::GetCounter</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>GetCounter</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="55" column="1" bodyfile="BrainHarmonics/membranechannel.h" bodystart="55" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="class_membrane_channel_1a25b542d8156c42ed785eebbea0db21a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double MembraneChannel::GetEnergy</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>GetEnergy</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="56" column="1" bodyfile="BrainHarmonics/membranechannel.h" bodystart="56" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="class_membrane_channel_1a8eb115e2583e5bf0f37156f1fc974aa6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool MembraneChannel::GetReceptorBindingState</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>GetReceptorBindingState</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="57" column="1" bodyfile="BrainHarmonics/membranechannel.h" bodystart="57" bodyend="57"/>
        <referencedby refid="class_membrane_channel_1a34077828eee1c2457212f05217b09d6c" compoundref="membranechannel_8cc" startline="215" endline="289">Update</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_membrane_channel_1aa37056ebb4e757a5ed00252112b516aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int MembraneChannel::GetReceptorType</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>GetReceptorType</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="58" column="1" bodyfile="BrainHarmonics/membranechannel.h" bodystart="58" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="class_membrane_channel_1afde030429a160621a2255ab8a2d689b8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool MembraneChannel::GetDisabled</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>GetDisabled</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="59" column="1" bodyfile="BrainHarmonics/membranechannel.h" bodystart="59" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="class_membrane_channel_1af20c4ca6a3708c86122e7118a29952fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int MembraneChannel::GetIons</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>GetIons</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="60" column="1" bodyfile="BrainHarmonics/membranechannel.h" bodystart="60" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="class_membrane_channel_1a9f5c69ab1f4dce6113fceebaaa4f15f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="glad_8h_1a950fc91edb4504f62f1c577bf4727c29" kindref="member">void</ref></type>
        <definition>void MembraneChannel::setReceptorBindingState</definition>
        <argsstring>(bool val)</argsstring>
        <name>setReceptorBindingState</name>
        <param>
          <type>bool</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="62" column="1" bodyfile="BrainHarmonics/membranechannel.h" bodystart="62" bodyend="62"/>
        <referencedby refid="class_membrane_channel_1aabbadec31782704dd497848154dfe0fc" compoundref="membranechannel_8h" startline="64" endline="64">toggleDisabled</referencedby>
        <referencedby refid="class_membrane_channel_1aed2055857888506a35c09bdcc265799a" compoundref="membranechannel_8h" startline="65" endline="65">setDisabled</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_membrane_channel_1a289ec477e64eec5d2a1f88f4a677650c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="glad_8h_1a950fc91edb4504f62f1c577bf4727c29" kindref="member">void</ref></type>
        <definition>void MembraneChannel::toggleReceptorBindingState</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>toggleReceptorBindingState</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="63" column="1" bodyfile="BrainHarmonics/membranechannel.h" bodystart="63" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="class_membrane_channel_1aabbadec31782704dd497848154dfe0fc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="glad_8h_1a950fc91edb4504f62f1c577bf4727c29" kindref="member">void</ref></type>
        <definition>void MembraneChannel::toggleDisabled</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>toggleDisabled</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="64" column="1" bodyfile="BrainHarmonics/membranechannel.h" bodystart="64" bodyend="64"/>
        <references refid="class_membrane_channel_1a9f5c69ab1f4dce6113fceebaaa4f15f4" compoundref="membranechannel_8h" startline="62" endline="62">setReceptorBindingState</references>
      </memberdef>
      <memberdef kind="function" id="class_membrane_channel_1aed2055857888506a35c09bdcc265799a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="glad_8h_1a950fc91edb4504f62f1c577bf4727c29" kindref="member">void</ref></type>
        <definition>void MembraneChannel::setDisabled</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, bool val)</argsstring>
        <name>setDisabled</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="65" column="1" bodyfile="BrainHarmonics/membranechannel.h" bodystart="65" bodyend="65"/>
        <references refid="class_membrane_channel_1a9f5c69ab1f4dce6113fceebaaa4f15f4" compoundref="membranechannel_8h" startline="62" endline="62">setReceptorBindingState</references>
      </memberdef>
      <memberdef kind="function" id="class_membrane_channel_1a7f40594845bb0aa6a03fd9c08a836d7e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="glad_8h_1a950fc91edb4504f62f1c577bf4727c29" kindref="member">void</ref></type>
        <definition>void MembraneChannel::setReceptorType</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int val)</argsstring>
        <name>setReceptorType</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="66" column="1" bodyfile="BrainHarmonics/membranechannel.h" bodystart="66" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="class_membrane_channel_1a61931feff8f3bb485eeb5c80125bb732" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="glad_8h_1a950fc91edb4504f62f1c577bf4727c29" kindref="member">void</ref></type>
        <definition>void MembraneChannel::SetCounter</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, unsigned int val)</argsstring>
        <name>SetCounter</name>
        <reimplements refid="class_membrane_1a4bff43b38d7046867f220392a39cc272">SetCounter</reimplements>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="67" column="1" bodyfile="BrainHarmonics/membranechannel.h" bodystart="67" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="class_membrane_channel_1aaa2d816d3887b6292d995a83130a4834" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="glad_8h_1a950fc91edb4504f62f1c577bf4727c29" kindref="member">void</ref></type>
        <definition>void MembraneChannel::SetEnergy</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, double val)</argsstring>
        <name>SetEnergy</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="68" column="1" bodyfile="BrainHarmonics/membranechannel.h" bodystart="68" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="class_membrane_channel_1a1fe0c61eccbb6aa0d905ead27e8337bd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="glad_8h_1a950fc91edb4504f62f1c577bf4727c29" kindref="member">void</ref></type>
        <definition>void MembraneChannel::SetIons</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int val)</argsstring>
        <name>SetIons</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="69" column="1" bodyfile="BrainHarmonics/membranechannel.h" bodystart="69" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="class_membrane_channel_1a5982040b46efe5e2b824d1cf4dead25e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MembraneChannel::ResetParameters</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>ResetParameters</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="71" column="1" bodyfile="BrainHarmonics/membranechannel.cc" bodystart="20" bodyend="72"/>
        <references refid="class_universe_1ae54d34c5d695917e074b8e07e8820bdb" compoundref="universe_8cc" startline="111" endline="114">Universe::TheTimeNow</references>
        <referencedby refid="class_membrane_channel_1a34077828eee1c2457212f05217b09d6c" compoundref="membranechannel_8cc" startline="215" endline="289">Update</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_membrane_channel_1aa8e78a1b0dd7c6b81cac09d33f01e6c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
        <definition>CognitiveNetwork * MembraneChannel::CreateNeurotransmitter</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>CreateNeurotransmitter</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="73" column="1" bodyfile="BrainHarmonics/membranechannel.cc" bodystart="74" bodyend="83"/>
        <references refid="class_membrane_channel_1ad603f58813157b33ca81b919cf9c2897" compoundref="membranechannel_8h" startline="102">neurotransmitter_list</references>
        <referencedby refid="class_membrane_channel_1a24c791e6cfd906d49e0ceb8a24eeb4cb" compoundref="membranechannel_8cc" startline="85" endline="104">CreateNeurotransmitters</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_membrane_channel_1a24c791e6cfd906d49e0ceb8a24eeb4cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt; CognitiveNetwork * &gt; MembraneChannel::CreateNeurotransmitters</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int quantity)</argsstring>
        <name>CreateNeurotransmitters</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>quantity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="75" column="1" bodyfile="BrainHarmonics/membranechannel.cc" bodystart="85" bodyend="104"/>
        <references refid="class_membrane_channel_1ad603f58813157b33ca81b919cf9c2897" compoundref="membranechannel_8h" startline="102">neurotransmitter_list</references>
        <references refid="class_membrane_channel_1aa8e78a1b0dd7c6b81cac09d33f01e6c2" compoundref="membranechannel_8cc" startline="74" endline="83">CreateNeurotransmitter</references>
      </memberdef>
      <memberdef kind="function" id="class_membrane_channel_1af667720bd2214ea3a1e6d272b57d3a79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
        <definition>CognitiveNetwork * MembraneChannel::CloneNeurotransmitter</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, CognitiveNetwork *clone_object, double perfection_membership)</argsstring>
        <name>CloneNeurotransmitter</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
          <declname>clone_object</declname>
        </param>
        <param>
          <type>double</type>
          <declname>perfection_membership</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="77" column="1" bodyfile="BrainHarmonics/membranechannel.cc" bodystart="112" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="class_membrane_channel_1a6426185a0d73c967adcb72e3a22b48b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt; CognitiveNetwork * &gt; MembraneChannel::CloneNeurotransmitters</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, std::vector&lt; CognitiveNetwork *&gt; cloning_list, double perfection_membership)</argsstring>
        <name>CloneNeurotransmitters</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *&gt;</type>
          <declname>cloning_list</declname>
        </param>
        <param>
          <type>double</type>
          <declname>perfection_membership</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="79" column="1" bodyfile="BrainHarmonics/membranechannel.cc" bodystart="107" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="class_membrane_channel_1a985d8f93077b0f93daa9c311a22917a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
        <definition>CognitiveNetwork * MembraneChannel::DestroyNeurotransmitter</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, CognitiveNetwork *destroy_object)</argsstring>
        <name>DestroyNeurotransmitter</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
          <declname>destroy_object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="81" column="1" bodyfile="BrainHarmonics/membranechannel.cc" bodystart="122" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="class_membrane_channel_1ad5dfc13b89aff0c7383e052113da1d8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt; CognitiveNetwork * &gt; MembraneChannel::DestroyNeurotransmitters</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, std::vector&lt; CognitiveNetwork *&gt; destruction_list)</argsstring>
        <name>DestroyNeurotransmitters</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *&gt;</type>
          <declname>destruction_list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="83" column="1" bodyfile="BrainHarmonics/membranechannel.cc" bodystart="117" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="class_membrane_channel_1ae483c6bc45f73390070b824296762d4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
        <definition>CognitiveNetwork * MembraneChannel::AddNeurotransmitter</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, CognitiveNetwork *add_object)</argsstring>
        <name>AddNeurotransmitter</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
          <declname>add_object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="85" column="1" bodyfile="BrainHarmonics/membranechannel.cc" bodystart="127" bodyend="136"/>
        <references refid="class_membrane_channel_1ad603f58813157b33ca81b919cf9c2897" compoundref="membranechannel_8h" startline="102">neurotransmitter_list</references>
        <referencedby refid="class_membrane_channel_1a01fb5f3176cfa3423bb10a04bf69da01" compoundref="membranechannel_8cc" startline="138" endline="157">AddNeurotransmitters</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_membrane_channel_1a01fb5f3176cfa3423bb10a04bf69da01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt; CognitiveNetwork * &gt; MembraneChannel::AddNeurotransmitters</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, std::vector&lt; CognitiveNetwork *&gt; add_objects)</argsstring>
        <name>AddNeurotransmitters</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *&gt;</type>
          <declname>add_objects</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="87" column="1" bodyfile="BrainHarmonics/membranechannel.cc" bodystart="138" bodyend="157"/>
        <references refid="class_membrane_channel_1ad603f58813157b33ca81b919cf9c2897" compoundref="membranechannel_8h" startline="102">neurotransmitter_list</references>
        <references refid="class_membrane_channel_1ae483c6bc45f73390070b824296762d4c" compoundref="membranechannel_8cc" startline="127" endline="136">AddNeurotransmitter</references>
      </memberdef>
      <memberdef kind="function" id="class_membrane_channel_1a2252f222f4a41bf1975dc856569e0a22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
        <definition>CognitiveNetwork * MembraneChannel::RemoveNeurotransmitter</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>RemoveNeurotransmitter</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="89" column="1" bodyfile="BrainHarmonics/membranechannel.cc" bodystart="160" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="class_membrane_channel_1a37f22ddd877e3be7b353048149a7bbcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt; CognitiveNetwork * &gt; MembraneChannel::RemoveNeurotransmitters</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int quantity)</argsstring>
        <name>RemoveNeurotransmitters</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>quantity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="91" column="1" bodyfile="BrainHarmonics/membranechannel.cc" bodystart="166" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="class_membrane_channel_1a91ce6506a8e82905de7cd031ed5d63f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> *</type>
        <definition>CognitiveNetwork * MembraneChannel::GetNeurotransmitter</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int selector)</argsstring>
        <name>GetNeurotransmitter</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>selector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="93" column="1" bodyfile="BrainHarmonics/membranechannel.cc" bodystart="171" bodyend="174"/>
        <references refid="class_membrane_channel_1ad603f58813157b33ca81b919cf9c2897" compoundref="membranechannel_8h" startline="102">neurotransmitter_list</references>
      </memberdef>
      <memberdef kind="function" id="class_membrane_channel_1a9fdb20eb7d3f9ebad864d07aaa835716" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_cognitive_network" kindref="compound">CognitiveNetwork</ref> * &gt;</type>
        <definition>std::vector&lt; CognitiveNetwork * &gt; MembraneChannel::GetNeurotransmitters</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>GetNeurotransmitters</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="95" column="1" bodyfile="BrainHarmonics/membranechannel.cc" bodystart="176" bodyend="179"/>
        <references refid="class_membrane_channel_1ad603f58813157b33ca81b919cf9c2897" compoundref="membranechannel_8h" startline="102">neurotransmitter_list</references>
      </memberdef>
      <memberdef kind="function" id="class_membrane_channel_1a67496ca67ad3ecae38f6b987547b1b99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MembraneChannel::CompatibilityCheck</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time, int neurotransmitterType)</argsstring>
        <name>CompatibilityCheck</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>neurotransmitterType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="97" column="1" bodyfile="BrainHarmonics/membranechannel.cc" bodystart="182" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="class_membrane_channel_1a34077828eee1c2457212f05217b09d6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int MembraneChannel::Update</definition>
        <argsstring>(std::chrono::time_point&lt; Clock &gt; event_time)</argsstring>
        <name>Update</name>
        <param>
          <type>std::chrono::time_point&lt; <ref refid="universe_8h_1a0ef8d951d1ca5ab3cfaf7ab4c7a6fd80" kindref="member">Clock</ref> &gt;</type>
          <declname>event_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BrainHarmonics/membranechannel.h" line="99" column="1" bodyfile="BrainHarmonics/membranechannel.cc" bodystart="215" bodyend="289"/>
        <references refid="class_membrane_channel_1a5982040b46efe5e2b824d1cf4dead25e" compoundref="membranechannel_8cc" startline="20" endline="72">ResetParameters</references>
        <references refid="class_membrane_channel_1a8eb115e2583e5bf0f37156f1fc974aa6" compoundref="membranechannel_8h" startline="57" endline="57">GetReceptorBindingState</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="216">
        <label>Universe</label>
        <link refid="class_universe"/>
      </node>
      <node id="214">
        <label>Neuron</label>
        <link refid="class_neuron"/>
        <childnode refid="215" relation="public-inheritance">
        </childnode>
      </node>
      <node id="215">
        <label>CognitiveNetwork</label>
        <link refid="class_cognitive_network"/>
        <childnode refid="216" relation="public-inheritance">
        </childnode>
      </node>
      <node id="213">
        <label>Membrane</label>
        <link refid="class_membrane"/>
        <childnode refid="214" relation="public-inheritance">
        </childnode>
      </node>
      <node id="212">
        <label>MembraneChannel</label>
        <link refid="class_membrane_channel"/>
        <childnode refid="213" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="221">
        <label>Universe</label>
        <link refid="class_universe"/>
        <childnode refid="221" relation="usage">
          <edgelabel>time_dimension_pointer</edgelabel>
        </childnode>
      </node>
      <node id="219">
        <label>Neuron</label>
        <link refid="class_neuron"/>
        <childnode refid="220" relation="public-inheritance">
        </childnode>
      </node>
      <node id="220">
        <label>CognitiveNetwork</label>
        <link refid="class_cognitive_network"/>
        <childnode refid="221" relation="public-inheritance">
        </childnode>
      </node>
      <node id="218">
        <label>Membrane</label>
        <link refid="class_membrane"/>
        <childnode refid="219" relation="public-inheritance">
        </childnode>
      </node>
      <node id="217">
        <label>MembraneChannel</label>
        <link refid="class_membrane_channel"/>
        <childnode refid="218" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="BrainHarmonics/membranechannel.h" line="34" column="1" bodyfile="BrainHarmonics/membranechannel.h" bodystart="33" bodyend="129"/>
    <listofallmembers>
      <member refid="class_cognitive_network_1a6af57693982286ac6a6831ca3010b760" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>AddCognitiveInput</name></member>
      <member refid="class_cognitive_network_1afc92c9b378e7e0873d0164bc4f2635df" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>AddCognitiveInputs</name></member>
      <member refid="class_universe_1ab682307c963836cd81b35b5604bd7064" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>AddCognitiveNetwork</name></member>
      <member refid="class_universe_1a5199f6c27b1a97c8b8c9847b8be686cf" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>AddCognitiveNetworks</name></member>
      <member refid="class_cognitive_network_1a8a9b533b89b7d62b21cf41bdf957ef14" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>AddCognitiveOutput</name></member>
      <member refid="class_cognitive_network_1a6299433811b76f0ccb97cf69fe9bfb66" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>AddCognitiveOutputs</name></member>
      <member refid="class_universe_1ab2671c2218c98f0f1f487c5b3bb96e3c" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>AddCompositeForceParticle</name></member>
      <member refid="class_universe_1a23d74e377203fca7cb74e0ffee7244b6" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>AddCompositeForceParticles</name></member>
      <member refid="class_universe_1a6326158c47bf3f7fe9297299a9b5b7b7" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>AddDimension</name></member>
      <member refid="class_universe_1a03bdf5f7fea4209241e9bf5316d45517" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>AddDimensions</name></member>
      <member refid="class_universe_1a90c573dec55f2b3ad5680015356f5f25" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>AddElementaryForce</name></member>
      <member refid="class_universe_1a81d294300346e9f901836ab609cce942" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>AddElementaryForces</name></member>
      <member refid="class_universe_1ab9c84e0576de50aa4fa46655832ce5e4" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>AddElementaryParticle</name></member>
      <member refid="class_universe_1a857cf7f208cd11c80736e82fa523feb5" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>AddElementaryParticles</name></member>
      <member refid="class_cognitive_network_1ac6a7e01f097d0cb6434eb8fa7640c214" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>AddInterneuronSpace</name></member>
      <member refid="class_cognitive_network_1aeafe16b9f44ae1316c072a85e726ee83" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>AddInterneuronSpaces</name></member>
      <member refid="class_universe_1a090d9ad1b88d81364e872e17d65edca4" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>AddMatter</name></member>
      <member refid="class_universe_1ae00d10b2a23c9cedf1ff89e9da875563" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>AddMatters</name></member>
      <member refid="class_neuron_1a99d4b64f128e2bfbffec3c5d476a2ca3" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>AddMembrane</name></member>
      <member refid="class_membrane_1a3e3b4f55f028541e7513f826d01a689a" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>AddMembraneChannel</name></member>
      <member refid="class_membrane_1aab591875e3266d6c5af0f7c5f7f21e8f" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>AddMembraneChannels</name></member>
      <member refid="class_neuron_1a9e1f79bf8e991893f4ef318841932a13" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>AddMembranes</name></member>
      <member refid="class_universe_1a062a9472f0400e566ecc7dc056d989d9" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>AddMonomer</name></member>
      <member refid="class_universe_1a95fe7f99971bb2048121a7c4e87b9f79" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>AddMonomers</name></member>
      <member refid="class_cognitive_network_1a8457342637fde2d814c54942c3367416" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>AddNeuron</name></member>
      <member refid="class_cognitive_network_1ade928e3355db97d3c5d99501ff4a3b69" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>AddNeurons</name></member>
      <member refid="class_membrane_channel_1ae483c6bc45f73390070b824296762d4c" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>AddNeurotransmitter</name></member>
      <member refid="class_membrane_channel_1a01fb5f3176cfa3423bb10a04bf69da01" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>AddNeurotransmitters</name></member>
      <member refid="class_cognitive_network_1ab6caa285c25568259ae935cf9e746af4" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>AddOrbital</name></member>
      <member refid="class_cognitive_network_1a9dbf4a9fab3b806d2bd6b2701b7a9548" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>AddOrbitals</name></member>
      <member refid="class_universe_1a8508b791c6997d8abcdcc037a6776734" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>AddPoint</name></member>
      <member refid="class_universe_1aa48ced2078ba863723050d8283b3fa67" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>AddPoints</name></member>
      <member refid="class_universe_1a4ea0af5d2eb7b5070a83f7da29526fbd" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>AddPolymer</name></member>
      <member refid="class_universe_1aed7cb25507d516a2821ebb69d5345c54" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>AddPolymers</name></member>
      <member refid="class_universe_1a598799e2fcdf9ed60e83e9f5a61bfc05" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>AddSolid</name></member>
      <member refid="class_universe_1a410d5ba2224fe90584b1f1aa5b38b41c" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>AddSolids</name></member>
      <member refid="class_neuron_1a6198fa352056e3bbe1e979adf088b900" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>AddSoma</name></member>
      <member refid="class_neuron_1a78a0f48a669b6ea20280829304e51de2" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>AddSomas</name></member>
      <member refid="class_cognitive_network_1a4bfdcd2affdfe2adb2da68dba60dff0e" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>AddSynapse</name></member>
      <member refid="class_cognitive_network_1a09d9e01cbd8596af7fac626ce2753643" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>AddSynapses</name></member>
      <member refid="class_universe_1a901e16db5e8af258c66af7ac75662fe0" prot="public" virt="virtual"><scope>MembraneChannel</scope><name>AddTemporalAdjustment</name></member>
      <member refid="class_universe_1a15aa20218286fd11ecb9b792dfb63be3" prot="public" virt="virtual"><scope>MembraneChannel</scope><name>AdjustCounters</name></member>
      <member refid="class_cognitive_network_1ae590ecb77db0a876425b9b74bcfe2bce" prot="public" virt="virtual"><scope>MembraneChannel</scope><name>ApplyElectromagnetic</name></member>
      <member refid="class_cognitive_network_1a9753f52c9e36ad44e9fac1d3e38a0770" prot="public" virt="virtual"><scope>MembraneChannel</scope><name>ApplyElectromagneticElectroweak</name></member>
      <member refid="class_cognitive_network_1a7d3252977440a9a5c004f748647ce885" prot="public" virt="virtual"><scope>MembraneChannel</scope><name>ApplyGravitation</name></member>
      <member refid="class_cognitive_network_1a7a55750d3c42a277c4ffe04a87ab3b19" prot="public" virt="virtual"><scope>MembraneChannel</scope><name>ApplyStrong</name></member>
      <member refid="class_cognitive_network_1af25bbd4f4d8f370cd2a48fd6db8302b9" prot="public" virt="virtual"><scope>MembraneChannel</scope><name>ApplyStrongFundamental</name></member>
      <member refid="class_cognitive_network_1a8b60fdb81d89a3a74d6c06cb29e7aad3" prot="public" virt="virtual"><scope>MembraneChannel</scope><name>ApplyStrongResidual</name></member>
      <member refid="class_cognitive_network_1a46a15b24bd61049fa1c4f635268086a1" prot="public" virt="virtual"><scope>MembraneChannel</scope><name>ApplyWeak</name></member>
      <member refid="class_cognitive_network_1ab8bc213d2806f0dc49c1284bf934fc24" prot="public" virt="virtual"><scope>MembraneChannel</scope><name>ApplyWeakElectroweak</name></member>
      <member refid="class_cognitive_network_1a058cb2b044d56268e36f153fac21084e" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>CloneCognitiveInput</name></member>
      <member refid="class_cognitive_network_1aeaf2883b25dbf1eefd11c2d92efe8816" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>CloneCognitiveInputs</name></member>
      <member refid="class_cognitive_network_1ab24f74115c11275f365245a4bb826c91" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>CloneCognitiveOutput</name></member>
      <member refid="class_cognitive_network_1a5734aa5378e9b701dca5e98017c1ea35" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>CloneCognitiveOutputs</name></member>
      <member refid="class_cognitive_network_1a1eef76439fffb9daaa3edc4e3c012831" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>CloneInterneuronSpace</name></member>
      <member refid="class_cognitive_network_1a5ee1d7b6df5bfe0048b4aea317c1974c" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>CloneInterneuronSpaces</name></member>
      <member refid="class_neuron_1ab85f7c42466657095efb3aca5a9ee71d" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>CloneMembrane</name></member>
      <member refid="class_membrane_1a9514ca4d4378e6467d2059a9d5f9b99b" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>CloneMembraneChannel</name></member>
      <member refid="class_membrane_1aa9958ea461092c0d2aceb07c9c34373c" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>CloneMembraneChannels</name></member>
      <member refid="class_neuron_1ae119d77522a4f11f5d9b1e935a9c80ba" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>CloneMembranes</name></member>
      <member refid="class_cognitive_network_1abf42d64965d64836d6fcbd7ce33c8db4" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>CloneNeuron</name></member>
      <member refid="class_cognitive_network_1a8852409e92434523ddbd48d699c5609f" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>CloneNeurons</name></member>
      <member refid="class_membrane_channel_1af667720bd2214ea3a1e6d272b57d3a79" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>CloneNeurotransmitter</name></member>
      <member refid="class_membrane_channel_1a6426185a0d73c967adcb72e3a22b48b0" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>CloneNeurotransmitters</name></member>
      <member refid="class_cognitive_network_1aa8992740f25d46b0be3d9d8344c39f67" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>CloneOrbital</name></member>
      <member refid="class_cognitive_network_1a266b7baf2fd9d6b5c5652e251830020a" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>CloneOrbitals</name></member>
      <member refid="class_neuron_1a7706e0f722c70138458423c07b6b153b" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>CloneSoma</name></member>
      <member refid="class_neuron_1a508841fa635a6e89609c514a79ea59da" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>CloneSomas</name></member>
      <member refid="class_cognitive_network_1a40f88d3ce9d386ee4db5c1e0ad84dad2" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>CloneSynapse</name></member>
      <member refid="class_cognitive_network_1a82fe792704bcbf7df56b3023266f5f70" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>CloneSynapses</name></member>
      <member refid="class_universe_1a7a0e9796ff0d650a8b1fbde5fa5b761f" prot="protected" virt="non-virtual"><scope>MembraneChannel</scope><name>cognitive_network_list</name></member>
      <member refid="class_cognitive_network_1a5a46cefb188858fdc023df3abbac0a47" prot="protected" virt="non-virtual"><scope>MembraneChannel</scope><name>cognitiveinput_list</name></member>
      <member refid="class_cognitive_network_1a3daddb316744336648d317e7f71ed371" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>CognitiveNetwork</name></member>
      <member refid="class_cognitive_network_1a167b15e33bcbca43cb0a516159e890f2" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>CognitiveNetwork</name></member>
      <member refid="class_cognitive_network_1ac7ba285d3468a929dac88756a2c4e4f9" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>CognitiveNetwork</name></member>
      <member refid="class_cognitive_network_1a6ec49dcc8cc58cded71983291629179c" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>CognitiveNetwork</name></member>
      <member refid="class_cognitive_network_1a7a57ad82736c0d8b03e7607b5c603b00" prot="protected" virt="non-virtual"><scope>MembraneChannel</scope><name>cognitiveoutput_list</name></member>
      <member refid="class_membrane_channel_1a67496ca67ad3ecae38f6b987547b1b99" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>CompatibilityCheck</name></member>
      <member refid="class_universe_1ae9795d06e406c4322637825aa545aa2f" prot="protected" virt="non-virtual"><scope>MembraneChannel</scope><name>composite_forceparticle_list</name></member>
      <member refid="class_cognitive_network_1add96197c3dc51d94d06edb480fbc4a38" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>CreateCognitiveInput</name></member>
      <member refid="class_cognitive_network_1a0833f7b587f14e0c0778661a56bce957" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>CreateCognitiveInputs</name></member>
      <member refid="class_cognitive_network_1ac220350499bd323bd8f24ff0050cd60d" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>CreateCognitiveOutput</name></member>
      <member refid="class_cognitive_network_1a002df11f4389a122fc140c186ab665c9" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>CreateCognitiveOutputs</name></member>
      <member refid="class_cognitive_network_1af0dc86c7905baae6f2b5efb3a65b8819" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>CreateInterneuronSpace</name></member>
      <member refid="class_cognitive_network_1a2d671451d659079d5efb5cda10e48827" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>CreateInterneuronSpaces</name></member>
      <member refid="class_neuron_1af06efbcc1a96af0290673e9e048267cf" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>CreateMembrane</name></member>
      <member refid="class_membrane_1a589b56529ac634a52b2a5fc78d356973" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>CreateMembraneChannel</name></member>
      <member refid="class_membrane_1a72987fae41e552af5befcd9a62aa6e46" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>CreateMembraneChannels</name></member>
      <member refid="class_neuron_1a5f6f460c6a98319a05c3ba06d14e6f60" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>CreateMembranes</name></member>
      <member refid="class_cognitive_network_1a9b5fcaf824d5b587775e7c44630affe6" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>CreateNeuron</name></member>
      <member refid="class_cognitive_network_1af9b2a136584c962e44114a7ee3d2804a" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>CreateNeurons</name></member>
      <member refid="class_membrane_channel_1aa8e78a1b0dd7c6b81cac09d33f01e6c2" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>CreateNeurotransmitter</name></member>
      <member refid="class_membrane_channel_1a24c791e6cfd906d49e0ceb8a24eeb4cb" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>CreateNeurotransmitters</name></member>
      <member refid="class_cognitive_network_1a5e0a782afc45d75d57fef91dd5513546" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>CreateOrbital</name></member>
      <member refid="class_cognitive_network_1a46d4189cf3e6b9af6190abe7b79539b4" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>CreateOrbitals</name></member>
      <member refid="class_neuron_1a32593a869b25c778c1856c36704f49cf" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>CreateSoma</name></member>
      <member refid="class_neuron_1a2016d83b02bfe9e5548d5c24ef31dded" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>CreateSomas</name></member>
      <member refid="class_cognitive_network_1ade8e9295b35790b136dca9084a1b7aa9" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>CreateSynapse</name></member>
      <member refid="class_cognitive_network_1ae6ae16f401e7699032ac9459132763c0" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>CreateSynapses</name></member>
      <member refid="class_universe_1a28615baf47d4558cbe5eebeed6575024" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>Creation</name></member>
      <member refid="class_cognitive_network_1a12e085cd47b7661190527fe55b6da8dc" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>DestroyCognitiveInput</name></member>
      <member refid="class_cognitive_network_1a00aa44de67dd0593a2498ce7a3b4c0f2" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>DestroyCognitiveInputs</name></member>
      <member refid="class_cognitive_network_1a8475cf7277d25532bb31926e768600e8" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>DestroyCognitiveOutput</name></member>
      <member refid="class_cognitive_network_1ad08191cbab02f26f69d25bc7e6b5c1ee" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>DestroyCognitiveOutputs</name></member>
      <member refid="class_cognitive_network_1acdda154177d3b3a92885c10f6b3dc274" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>DestroyInterneuronSpace</name></member>
      <member refid="class_cognitive_network_1a718833496332e0471186c9a886005c4a" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>DestroyInterneuronSpaces</name></member>
      <member refid="class_neuron_1a127d1b915e976c63e731a94b7d27e0b1" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>DestroyMembrane</name></member>
      <member refid="class_membrane_1a12413d933a62b3bbb7931c6ab25de7de" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>DestroyMembraneChannel</name></member>
      <member refid="class_membrane_1aea71c4443f2fc22359ac3f770ff7755e" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>DestroyMembraneChannels</name></member>
      <member refid="class_neuron_1ab77feff95ed7127400a4e02648641ff7" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>DestroyMembranes</name></member>
      <member refid="class_cognitive_network_1ab3318f517da206ad4286b6cc22acf520" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>DestroyNeuron</name></member>
      <member refid="class_cognitive_network_1af2f706043a0c227b93877e29b056f3c9" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>DestroyNeurons</name></member>
      <member refid="class_membrane_channel_1a985d8f93077b0f93daa9c311a22917a1" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>DestroyNeurotransmitter</name></member>
      <member refid="class_membrane_channel_1ad5dfc13b89aff0c7383e052113da1d8f" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>DestroyNeurotransmitters</name></member>
      <member refid="class_cognitive_network_1aefecb3a2464f7f21449e522af5119c63" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>DestroyOrbital</name></member>
      <member refid="class_cognitive_network_1a0ee8259d26e30779bf06471fb8a10bb5" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>DestroyOrbitals</name></member>
      <member refid="class_neuron_1a6ff7510f73e29c31003b016bdcb4a70e" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>DestroySoma</name></member>
      <member refid="class_neuron_1a32b3a98eec58dc66481a2b877a7592cb" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>DestroySomas</name></member>
      <member refid="class_cognitive_network_1a08b87aa9a0823355ef7cef77414dc6dc" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>DestroySynapse</name></member>
      <member refid="class_cognitive_network_1a141e9e8e6337d42fc19edd75bb50e47b" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>DestroySynapses</name></member>
      <member refid="class_cognitive_network_1a79f0541fde6dd50f8e87f3f46d849b95" prot="protected" virt="non-virtual"><scope>MembraneChannel</scope><name>dimension_list</name></member>
      <member refid="class_membrane_channel_1ad6b972a3874ddc236b63c7145123e0c2" prot="private" virt="non-virtual"><scope>MembraneChannel</scope><name>duration_since_last_event</name></member>
      <member refid="class_universe_1a015b19f6d5ad84ebaa9e3e7c8352389c" prot="protected" virt="non-virtual"><scope>MembraneChannel</scope><name>elementary_force_list</name></member>
      <member refid="class_universe_1aeb2e63cf49f0b5595e6c15109863bd3b" prot="protected" virt="non-virtual"><scope>MembraneChannel</scope><name>elementary_particle_list</name></member>
      <member refid="class_universe_1a982502e46868a00a9111738ccc9355c2" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>ExtendLife</name></member>
      <member refid="class_neuron_1a93cce70c19c8e70accaa31908d3f29f6" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetCapacity</name></member>
      <member refid="class_neuron_1ae8b6c47bebe302e62721dc4a6e447ca2" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetChannelMax</name></member>
      <member refid="class_neuron_1a794c8fa270ea0600dab4fd13c25912fd" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetChannelMin</name></member>
      <member refid="class_cognitive_network_1a2ff68a0d11cdb29af2f05a69a11911a4" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetCognitiveInput</name></member>
      <member refid="class_cognitive_network_1a92b896643b881e4030401e0f7fd256bf" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetCognitiveInputs</name></member>
      <member refid="class_universe_1a1ea2b7e438bfdc7dd599aa59c310b126" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetCognitiveNetwork</name></member>
      <member refid="class_cognitive_network_1af33f3ff9dd829da73d183d2624f24964" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetCognitiveNetworkDeviceTag</name></member>
      <member refid="class_universe_1a06968a24194280a43f077c5b77379ea8" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetCognitiveNetworks</name></member>
      <member refid="class_cognitive_network_1a947fa4c50fecc4008d2bcfc96a272ffc" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetCognitiveOutput</name></member>
      <member refid="class_cognitive_network_1acdf847165899c36d6d9d6843ecc27218" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetCognitiveOutputs</name></member>
      <member refid="class_universe_1a3e2acc1d75765a6e8e852fca919c5b96" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetCompositeForceParticle</name></member>
      <member refid="class_universe_1aed37d7224b4e31bdfb0632e39bf19694" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetCompositeForceParticles</name></member>
      <member refid="class_membrane_channel_1ac856b74d47b28bd8638fce9c0f12dd20" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetCounter</name></member>
      <member refid="class_universe_1ab79a380dee684c6dc304b571f4d28645" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetDimension</name></member>
      <member refid="class_universe_1a1869fc7bf43827378bab5a701f7f917a" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetDimensions</name></member>
      <member refid="class_membrane_channel_1afde030429a160621a2255ab8a2d689b8" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetDisabled</name></member>
      <member refid="class_cognitive_network_1a09e5a1c774c84529a7adfe56fadb7467" prot="public" virt="virtual"><scope>MembraneChannel</scope><name>GetElectromagnetic</name></member>
      <member refid="class_cognitive_network_1a8c4e0454068f714691ae250f795cdb67" prot="public" virt="virtual"><scope>MembraneChannel</scope><name>GetElectromagneticElectroweak</name></member>
      <member refid="class_universe_1a9506017d944cb64e67567477c1505a53" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetElementaryForce</name></member>
      <member refid="class_universe_1a6a8ed579b2eedd3aceebda9f3d78aa0e" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetElementaryForces</name></member>
      <member refid="class_universe_1acef54e17666d17078c522388f8f6e4f9" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetElementaryParticle</name></member>
      <member refid="class_universe_1a168fd9bf7602adcba1de5dd93a212775" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetElementaryParticles</name></member>
      <member refid="class_membrane_channel_1a25b542d8156c42ed785eebbea0db21a7" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetEnergy</name></member>
      <member refid="class_membrane_1a874068c028004d4dde7ec41d999872eb" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetEnergyDec</name></member>
      <member refid="class_membrane_1a00e038f0023186139467d490c6cd38a3" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetEnergyInc</name></member>
      <member refid="class_membrane_1ac6c8d1f7348b24e448e8163260500b89" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetEnergyLeak</name></member>
      <member refid="class_membrane_1a7ce7398888bdad73ac848a2362261acf" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetEnergyThreshold</name></member>
      <member refid="class_neuron_1a94accac3223afdecd1edf25e6db59ace" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetGateKeeper</name></member>
      <member refid="class_cognitive_network_1a4b5150310288c52f00ecb745ae9e7f86" prot="public" virt="virtual"><scope>MembraneChannel</scope><name>GetGravitation</name></member>
      <member refid="class_cognitive_network_1a0119d61e86ea6b84ad7f69f88d59d008" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetInterneuronSpace</name></member>
      <member refid="class_cognitive_network_1a4daf966882d527b784bd359794ad39ca" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetInterneuronSpaces</name></member>
      <member refid="class_membrane_channel_1af20c4ca6a3708c86122e7118a29952fd" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetIons</name></member>
      <member refid="class_universe_1a69de663cf2e32e65ed28c44ae666db3a" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetMatter</name></member>
      <member refid="class_universe_1a4307a62e183fed8cf2b92be0f6014688" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetMatters</name></member>
      <member refid="class_neuron_1a5bc4e67c5f2d8a3bcd160aa3f5086aec" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetMembrane</name></member>
      <member refid="class_membrane_1a1e2bdb800f0f38254214ea7cbdc06941" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetMembraneChannel</name></member>
      <member refid="class_membrane_1a270278dd346edfe8c7bbd4c48929fdd5" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetMembraneChannelPool</name></member>
      <member refid="class_membrane_1a7fac2929241b7ff9b8b7f1ec955b2cc5" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetMembraneChannels</name></member>
      <member refid="class_neuron_1ac759d9589c0505332e8238cafbc8fa66" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetMembranes</name></member>
      <member refid="class_universe_1aaa03fb8178d790afd992dd094bb64b47" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetMonomer</name></member>
      <member refid="class_universe_1aca82a914e0f8bd7cd1ec80a7220f0a0e" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetMonomers</name></member>
      <member refid="class_cognitive_network_1ac12f0af92d878d45dca7303dc065c383" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetNeuron</name></member>
      <member refid="class_neuron_1aff3a33f5d8ef5dacdec9c03df50f168c" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetNeuronDeviceTag</name></member>
      <member refid="class_cognitive_network_1af81132245e486c496a055f54a5a520d0" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetNeuronPool</name></member>
      <member refid="class_cognitive_network_1a0e9e37e976a7ca5ee625e2d7b36fd7ea" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetNeurons</name></member>
      <member refid="class_neuron_1a98f326ea86e6e8371b639609a4495c37" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetNeuronType</name></member>
      <member refid="class_membrane_channel_1a91ce6506a8e82905de7cd031ed5d63f5" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetNeurotransmitter</name></member>
      <member refid="class_cognitive_network_1a4e5b1d60cda4ddb4bd04d8dca42b7a5b" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetNeurotransmitterPool</name></member>
      <member refid="class_membrane_channel_1a9fdb20eb7d3f9ebad864d07aaa835716" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetNeurotransmitters</name></member>
      <member refid="class_cognitive_network_1a1c92a8f6c42788cf8ca890f062f853a3" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetObjectType</name></member>
      <member refid="class_cognitive_network_1a69655ef1e12bac5f74c2eb85c72720f4" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetOrbital</name></member>
      <member refid="class_cognitive_network_1af5995eaa4ba35c555a6b65d895451f25" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetOrbitalPool</name></member>
      <member refid="class_cognitive_network_1aa21d28ffc3b507236a7dad64663f6c42" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetOrbitals</name></member>
      <member refid="class_universe_1a3774f14a13a55827a1a4eea0a404edcb" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetPoint</name></member>
      <member refid="class_universe_1a765c6c658b7a465cd92418690db846ae" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetPoints</name></member>
      <member refid="class_universe_1a2d5d3924a7d7ffd2a5f47be9f137d86e" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetPolymer</name></member>
      <member refid="class_universe_1aac5d1c1a3a3ba56c8ca7115a85b2c239" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetPolymers</name></member>
      <member refid="class_membrane_channel_1a8eb115e2583e5bf0f37156f1fc974aa6" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetReceptorBindingState</name></member>
      <member refid="class_membrane_channel_1aa37056ebb4e757a5ed00252112b516aa" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetReceptorType</name></member>
      <member refid="class_neuron_1a0573244d3c78a22a45c249db536cbb68" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetRestingPotential</name></member>
      <member refid="class_universe_1a9f7b74fc21d45ddaa78aa18e9a337bcd" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetSolid</name></member>
      <member refid="class_universe_1a669fc068dd7820a5af309bfbe67199aa" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetSolids</name></member>
      <member refid="class_neuron_1a8539a7965349078a7b1c1265895daefa" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetSoma</name></member>
      <member refid="class_neuron_1aa6f1237ed89c48eb57610083edf43efa" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetSomaPool</name></member>
      <member refid="class_neuron_1a867fbd498b54c115a2c8769f83c48020" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetSomas</name></member>
      <member refid="class_cognitive_network_1a277247686f8af159e7a7beb0ec379225" prot="public" virt="virtual"><scope>MembraneChannel</scope><name>GetStrong</name></member>
      <member refid="class_cognitive_network_1a942ca90561fedae46136de620accbfea" prot="public" virt="virtual"><scope>MembraneChannel</scope><name>GetStrongFundamental</name></member>
      <member refid="class_cognitive_network_1acfa5de663b3e686c4d9ea1a3bb483b11" prot="public" virt="virtual"><scope>MembraneChannel</scope><name>GetStrongResidual</name></member>
      <member refid="class_cognitive_network_1a1944aaa13667bc267e6ef44892da969d" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetSynapse</name></member>
      <member refid="class_cognitive_network_1ae0068b9df823e1b10fed3c73f1cb4702" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetSynapsePool</name></member>
      <member refid="class_cognitive_network_1aa3376f2e7aed9639c2b5ba27aa6fb314" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetSynapses</name></member>
      <member refid="class_neuron_1a745b090da1b8f8fc7e3cf0ca06dfb117" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetUsage</name></member>
      <member refid="class_neuron_1a9af31418d1232135bf5074f6a3d5dbf1" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>GetVisualisationList</name></member>
      <member refid="class_cognitive_network_1a761db75ac8eab7b4625e5a398891bd12" prot="public" virt="virtual"><scope>MembraneChannel</scope><name>GetWeak</name></member>
      <member refid="class_cognitive_network_1aa6342c390fe8e7c648b4c6bc8f93ba4a" prot="public" virt="virtual"><scope>MembraneChannel</scope><name>GetWeakElectroweak</name></member>
      <member refid="class_membrane_1a544742864485b9ac052f3b241ae5c6b4" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>Growth</name></member>
      <member refid="class_cognitive_network_1aaf69f6e0cc0084eb748ef1540c773f85" prot="protected" virt="non-virtual"><scope>MembraneChannel</scope><name>interneuronspace_list</name></member>
      <member refid="class_universe_1a8fdaa6d06584e1ef50c4c613b22b786e" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>IsDead</name></member>
      <member refid="class_membrane_channel_1aaabe065df6250159df3ee8b9ea3f824f" prot="private" virt="non-virtual"><scope>MembraneChannel</scope><name>m_addStatus</name></member>
      <member refid="class_membrane_channel_1ab257b77285836ce5dc0c16824116351b" prot="private" virt="non-virtual"><scope>MembraneChannel</scope><name>m_boundReceptor</name></member>
      <member refid="class_membrane_channel_1a0df3b8e24bd5d496d2832b486b35aab1" prot="private" virt="non-virtual"><scope>MembraneChannel</scope><name>m_Counter</name></member>
      <member refid="class_membrane_channel_1afe6cbd4b6eeca252fde5c1b3b23f4717" prot="private" virt="non-virtual"><scope>MembraneChannel</scope><name>m_Ions</name></member>
      <member refid="class_membrane_channel_1aa3bd560d7c7c6c5b452d11f18bca30b1" prot="private" virt="non-virtual"><scope>MembraneChannel</scope><name>m_Length</name></member>
      <member refid="class_membrane_channel_1aa8beeb2908b603d7b568442b635f4164" prot="private" virt="non-virtual"><scope>MembraneChannel</scope><name>m_NeuronType</name></member>
      <member refid="class_membrane_channel_1a85b55287517ff9d5cacb98bacf79a0d3" prot="private" virt="non-virtual"><scope>MembraneChannel</scope><name>m_SurfaceArea</name></member>
      <member refid="class_membrane_channel_1a1c843660b2ea25ca2506f967dbd7e0d2" prot="private" virt="non-virtual"><scope>MembraneChannel</scope><name>m_TimeDilation</name></member>
      <member refid="class_membrane_channel_1a71a07468f3add9783acfbe2ca0df2101" prot="private" virt="non-virtual"><scope>MembraneChannel</scope><name>m_TimeThreshold</name></member>
      <member refid="class_membrane_channel_1a21f2bf86c93a07d133d01927af48d96d" prot="private" virt="non-virtual"><scope>MembraneChannel</scope><name>m_typeReceptor</name></member>
      <member refid="class_membrane_channel_1af542b034258dce62f0666b0397fdd2fb" prot="private" virt="non-virtual"><scope>MembraneChannel</scope><name>m_Volume</name></member>
      <member refid="class_universe_1a409650bc0425fc22c7713487a2a6dd8e" prot="protected" virt="non-virtual"><scope>MembraneChannel</scope><name>matter_list</name></member>
      <member refid="class_membrane_1ae3db1e55d9a535226bfd41c2a9ac1f0c" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>Membrane</name></member>
      <member refid="class_membrane_1a9e45fcb5a4e791f2697fce4d9fa78a3f" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>Membrane</name></member>
      <member refid="class_membrane_1afeb8292866a69bdc2b9be6dcd902b519" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>Membrane</name></member>
      <member refid="class_membrane_1a8d61894d90a7f63e427cd8b1a5eca380" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>Membrane</name></member>
      <member refid="class_neuron_1a878a5a42025ba8205adeb9a50b2c1457" prot="protected" virt="non-virtual"><scope>MembraneChannel</scope><name>membrane_list</name></member>
      <member refid="class_membrane_channel_1acbc07cd5836394396b0c1944f43350d6" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>MembraneChannel</name></member>
      <member refid="class_membrane_channel_1a17cdd2064bebb7bd2568cf5ec92715fc" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>MembraneChannel</name></member>
      <member refid="class_membrane_channel_1aedc9eb52da9e7160850f552781df27b6" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>MembraneChannel</name></member>
      <member refid="class_membrane_channel_1ac467743cbdebcdc6a77ad5ea0527e6f0" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>MembraneChannel</name></member>
      <member refid="class_membrane_1ad41c9c20d5a1bc279f32f9001dee8c50" prot="protected" virt="non-virtual"><scope>MembraneChannel</scope><name>membranechannel_list</name></member>
      <member refid="class_membrane_channel_1a99646a50163299948faa5a5f0da60add" prot="private" virt="non-virtual"><scope>MembraneChannel</scope><name>membranechannel_type</name></member>
      <member refid="class_universe_1a3d55ba29f95a9793b69c01f7942eca9f" prot="protected" virt="non-virtual"><scope>MembraneChannel</scope><name>monomer_list</name></member>
      <member refid="class_neuron_1a823487d01615fadb8ac19a2768dd9d96" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>Neuron</name></member>
      <member refid="class_neuron_1acbc433cac4f27aa7f4e05be26c336aa5" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>Neuron</name></member>
      <member refid="class_neuron_1a4611499895417d44250c452d0fc719a6" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>Neuron</name></member>
      <member refid="class_neuron_1a6839febd20fb8f776151e00142411a56" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>Neuron</name></member>
      <member refid="class_cognitive_network_1abbb9ff97e1b9cd61602d95f44c30132e" prot="protected" virt="non-virtual"><scope>MembraneChannel</scope><name>neuron_list</name></member>
      <member refid="class_membrane_channel_1ad603f58813157b33ca81b919cf9c2897" prot="protected" virt="non-virtual"><scope>MembraneChannel</scope><name>neurotransmitter_list</name></member>
      <member refid="class_membrane_channel_1a79af5f43970e9496ea293c9ac8bb73f6" prot="private" virt="non-virtual"><scope>MembraneChannel</scope><name>neurotransmitter_pool</name></member>
      <member refid="class_neuron_1a8259952162df5c8bb66eb78126feafe6" prot="protected" virt="non-virtual"><scope>MembraneChannel</scope><name>object_connection_list</name></member>
      <member refid="class_membrane_channel_1acd2bbf349255bbeb5ee2304f05e14ff6" prot="private" virt="non-virtual"><scope>MembraneChannel</scope><name>object_disabled</name></member>
      <member refid="class_membrane_channel_1a3615bab719d4a6c43a1d5d3e64d0079c" prot="private" virt="non-virtual"><scope>MembraneChannel</scope><name>object_energy</name></member>
      <member refid="class_membrane_channel_1acb697781909d7e8bd2e69fbb1268b2f2" prot="private" virt="non-virtual"><scope>MembraneChannel</scope><name>object_energy_threshold</name></member>
      <member refid="class_membrane_channel_1a41896472da1942a6be07eb8d6e8e508f" prot="private" virt="non-virtual"><scope>MembraneChannel</scope><name>object_energyFull</name></member>
      <member refid="class_membrane_channel_1a9cd227ac36102ed8958973ae46163e1c" prot="private" virt="non-virtual"><scope>MembraneChannel</scope><name>object_initialised</name></member>
      <member refid="class_membrane_channel_1abc68fa8d4693c6512c15a230b9bc8744" prot="private" virt="non-virtual"><scope>MembraneChannel</scope><name>object_size</name></member>
      <member refid="class_neuron_1a82d0a4739244d79ff929be01eeb0be28" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>OpenGate</name></member>
      <member refid="class_cognitive_network_1a263efd10857d5507c0e889e48f7329fe" prot="protected" virt="non-virtual"><scope>MembraneChannel</scope><name>orbital_list</name></member>
      <member refid="class_universe_1a9dc8abd2f8f84318722184f38e1b8cc7" prot="protected" virt="non-virtual"><scope>MembraneChannel</scope><name>point_list</name></member>
      <member refid="class_cognitive_network_1ac97c08a0af7dc0d02fbe059827b6be87" prot="public" virt="virtual"><scope>MembraneChannel</scope><name>PollElementaryForce</name></member>
      <member refid="class_universe_1a4d898757f2d67ca5ab5d504388d6199a" prot="protected" virt="non-virtual"><scope>MembraneChannel</scope><name>polymer_list</name></member>
      <member refid="class_membrane_channel_1a05a2ea08d814a99d1c349dab4b5f3266" prot="private" virt="non-virtual"><scope>MembraneChannel</scope><name>previous_event_time</name></member>
      <member refid="class_cognitive_network_1af79bf7f8b61d5392df7a87bd444eb550" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>RemoveCognitiveInput</name></member>
      <member refid="class_cognitive_network_1aaaf93e7c732b1e1e81060f82ff73c93a" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>RemoveCognitiveInputs</name></member>
      <member refid="class_cognitive_network_1a9874b11ac465c84ccf7baab0a40fb84e" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>RemoveCognitiveOutput</name></member>
      <member refid="class_cognitive_network_1a2f4956b004c828f0165f28c03e089144" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>RemoveCognitiveOutputs</name></member>
      <member refid="class_cognitive_network_1a04e38cea356f1c7ac31c4df5e19d759c" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>RemoveInterneuronSpace</name></member>
      <member refid="class_cognitive_network_1a994c5f93447a82429809c89aa08d3dc1" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>RemoveInterneuronSpaces</name></member>
      <member refid="class_neuron_1a190ae0628482048bef95c8b318939322" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>RemoveMembrane</name></member>
      <member refid="class_membrane_1a36d6927c8869cc752b55623dac661107" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>RemoveMembraneChannel</name></member>
      <member refid="class_membrane_1ac33ffd86416112420dc5b0576287c44d" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>RemoveMembraneChannels</name></member>
      <member refid="class_neuron_1a3cd5fc6f1a354d99bb8768df7ee40552" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>RemoveMembranes</name></member>
      <member refid="class_cognitive_network_1a33e911ec87d902a8fd8bb6d9e23c4261" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>RemoveNeuron</name></member>
      <member refid="class_cognitive_network_1a130985ff0aa14b2a17fc2c589e65f868" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>RemoveNeurons</name></member>
      <member refid="class_membrane_channel_1a2252f222f4a41bf1975dc856569e0a22" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>RemoveNeurotransmitter</name></member>
      <member refid="class_membrane_channel_1a37f22ddd877e3be7b353048149a7bbcd" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>RemoveNeurotransmitters</name></member>
      <member refid="class_cognitive_network_1a6ed0e198f6dcfdd45d57df5d3ad5754c" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>RemoveOrbital</name></member>
      <member refid="class_cognitive_network_1af7834d400995607c2a5a5eac7b5e006d" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>RemoveOrbitals</name></member>
      <member refid="class_neuron_1a4f8c2f0c1b294493a7c581a7f46c2863" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>RemoveSoma</name></member>
      <member refid="class_neuron_1a976b1bab63d0bd21b1c8c8e1cfbd17fe" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>RemoveSomas</name></member>
      <member refid="class_cognitive_network_1a0764ede1c23caa7022a01657a0e3726b" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>RemoveSynapse</name></member>
      <member refid="class_cognitive_network_1a87d6628f388baed1edb8efda9062c443" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>RemoveSynapses</name></member>
      <member refid="class_membrane_channel_1a5982040b46efe5e2b824d1cf4dead25e" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>ResetParameters</name></member>
      <member refid="class_universe_1aeda74e3902c0e56c0c09779854045cde" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>ReturnEnergy</name></member>
      <member refid="class_neuron_1a8f5766ea61dc46b7a25361df540755ec" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>SetCapacity</name></member>
      <member refid="class_neuron_1aed1ba99e24b905cd91a519c33b5a62b0" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>SetChannelMax</name></member>
      <member refid="class_neuron_1ae463ad8173c63e7970a5f4594667d481" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>SetChannelMin</name></member>
      <member refid="class_cognitive_network_1a99f801aeca299186cc706696696749b1" prot="public" virt="virtual"><scope>MembraneChannel</scope><name>SetCharge</name></member>
      <member refid="class_cognitive_network_1a0e8a64151a2446fc16a074ad2de325df" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>SetCognitiveNetworkDeviceTag</name></member>
      <member refid="class_membrane_channel_1a61931feff8f3bb485eeb5c80125bb732" prot="public" virt="virtual"><scope>MembraneChannel</scope><name>SetCounter</name></member>
      <member refid="class_neuron_1a92f942f6f0bd783c39bb550cf4bb8fd0" prot="public" virt="non-virtual" ambiguityscope="Neuron::"><scope>MembraneChannel</scope><name>SetCounter</name></member>
      <member refid="class_membrane_channel_1aed2055857888506a35c09bdcc265799a" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>setDisabled</name></member>
      <member refid="class_neuron_1af9ad96e27f7692e9e328d90e4c96977a" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>SetDisabled</name></member>
      <member refid="class_cognitive_network_1a31764cd5746369d16b45f2ff74806a0b" prot="public" virt="virtual"><scope>MembraneChannel</scope><name>SetElectromagnetic</name></member>
      <member refid="class_cognitive_network_1a270f6842ec14b3e5b80dedf7b48ea6f4" prot="public" virt="virtual"><scope>MembraneChannel</scope><name>SetElectromagneticElectroweak</name></member>
      <member refid="class_membrane_channel_1aaa2d816d3887b6292d995a83130a4834" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>SetEnergy</name></member>
      <member refid="class_membrane_1acefb2fe781d7316b232614663777cde1" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>SetEnergyDec</name></member>
      <member refid="class_membrane_1abd1c69b9b0260799afd3965c34f881ff" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>SetEnergyInc</name></member>
      <member refid="class_membrane_1a96618ef2c05a8af5d6bd8606c9b8eae8" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>SetEnergyLeak</name></member>
      <member refid="class_membrane_1a6d0b96fb6d823cc113dd56b8889b1544" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>SetEnergyThreshold</name></member>
      <member refid="class_neuron_1a492f597021faf1b74942bc75364c3c22" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>SetGateKeeper</name></member>
      <member refid="class_cognitive_network_1af9f082a70f0cc25a3f818d9eace5a527" prot="public" virt="virtual"><scope>MembraneChannel</scope><name>SetGravitation</name></member>
      <member refid="class_membrane_channel_1a1fe0c61eccbb6aa0d905ead27e8337bd" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>SetIons</name></member>
      <member refid="class_universe_1ac3443dd59b61ae3110f07f681f63ed0a" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>SetLifespan</name></member>
      <member refid="class_membrane_1aeda845ea9577e6a07690acad22ef375f" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>SetMembraneChannelPool</name></member>
      <member refid="class_neuron_1aa06d0f1a129e4a901a60e7343bc43533" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>SetNeuronDeviceTag</name></member>
      <member refid="class_cognitive_network_1a2e1137387c4165dd3f91a758d2ce7f34" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>SetNeuronPool</name></member>
      <member refid="class_neuron_1afc685a0444425fceab6685a6ee004b65" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>SetNeuronType</name></member>
      <member refid="class_cognitive_network_1a84f808251f67ced0edad2e1dd4d47039" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>SetNeurotransmitterPool</name></member>
      <member refid="class_membrane_1a5ba2bcb906f3984b28f1030207e106ad" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>SetObjectType</name></member>
      <member refid="class_cognitive_network_1aeee6e2b2eb06b3c55a0f019b6c9cc250" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>SetOrbitalPool</name></member>
      <member refid="class_membrane_channel_1a9f5c69ab1f4dce6113fceebaaa4f15f4" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>setReceptorBindingState</name></member>
      <member refid="class_membrane_channel_1a7f40594845bb0aa6a03fd9c08a836d7e" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>setReceptorType</name></member>
      <member refid="class_neuron_1ae18e23983d02953fa6886bef0bbeb339" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>SetSomaPool</name></member>
      <member refid="class_cognitive_network_1a3fc6d08413bfd4350f94d6f2627eedc7" prot="public" virt="virtual"><scope>MembraneChannel</scope><name>SetSpin</name></member>
      <member refid="class_cognitive_network_1a50f2a12c9873e623d6247318b041ba30" prot="public" virt="virtual"><scope>MembraneChannel</scope><name>SetStrong</name></member>
      <member refid="class_cognitive_network_1ac54286eea279f5caa98b642b9084fd55" prot="public" virt="virtual"><scope>MembraneChannel</scope><name>SetStrongFundamental</name></member>
      <member refid="class_cognitive_network_1a6f7210dd8c2786518329faa61b6e14d5" prot="public" virt="virtual"><scope>MembraneChannel</scope><name>SetStrongResidual</name></member>
      <member refid="class_cognitive_network_1a9d2b7d1de9e7148a403fc15f7f3fd1bf" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>SetSynapsePool</name></member>
      <member refid="class_neuron_1abf99856ac41b5c9c4948b3204bbc1590" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>SetUsage</name></member>
      <member refid="class_cognitive_network_1ab39c9eed50da6d3630c4498ae64b804e" prot="public" virt="virtual"><scope>MembraneChannel</scope><name>SetWeak</name></member>
      <member refid="class_cognitive_network_1a116f6818986a622e4a318857859e2495" prot="public" virt="virtual"><scope>MembraneChannel</scope><name>SetWeakElectroweak</name></member>
      <member refid="class_universe_1a747f9d3cf0b2caada4461cb7b12ea17b" prot="protected" virt="non-virtual"><scope>MembraneChannel</scope><name>solid_list</name></member>
      <member refid="class_neuron_1abb3745c6a8727f4ceb8db9e2258b90b5" prot="protected" virt="non-virtual"><scope>MembraneChannel</scope><name>soma_list</name></member>
      <member refid="class_cognitive_network_1a9218de9d63b10b313df289d1312c81e0" prot="protected" virt="non-virtual"><scope>MembraneChannel</scope><name>synapse_list</name></member>
      <member refid="class_universe_1aa220508c4cc12b02c6fe494622ebb58d" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>TheCalculatedTimeNow</name></member>
      <member refid="class_universe_1ae54d34c5d695917e074b8e07e8820bdb" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>TheTimeNow</name></member>
      <member refid="class_universe_1a3ce4365c727cb6eb5b650146a4188b9b" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>time_dimension_pointer</name></member>
      <member refid="class_membrane_channel_1a16fbba2c7aaf591b3a1d012b745ee97a" prot="private" virt="non-virtual"><scope>MembraneChannel</scope><name>time_object_created</name></member>
      <member refid="class_membrane_1a8c3593b0747495c412bf2d99b7b10104" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>TimeFunction</name></member>
      <member refid="class_membrane_channel_1aabbadec31782704dd497848154dfe0fc" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>toggleDisabled</name></member>
      <member refid="class_membrane_channel_1a289ec477e64eec5d2a1f88f4a677650c" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>toggleReceptorBindingState</name></member>
      <member refid="class_universe_1a4d137a146dd3c2514dfb692dfbab6984" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>Universe</name></member>
      <member refid="class_universe_1a1210ce56049f1fc67f53aeda223bb82b" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>Universe</name></member>
      <member refid="class_universe_1a03af7455263d3028b55ca5dc93ebb6ba" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>Universe</name></member>
      <member refid="class_membrane_channel_1a34077828eee1c2457212f05217b09d6c" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>Update</name></member>
      <member refid="class_neuron_1a06f45a5d1de890da84d3644fe58ea0a9" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>UpdateCycle</name></member>
      <member refid="class_cognitive_network_1aa37dda869174e4eef986cca4ce3e55d2" prot="public" virt="non-virtual" ambiguityscope="CognitiveNetwork::"><scope>MembraneChannel</scope><name>UpdateCycle</name></member>
      <member refid="class_universe_1a0d79e614e1af951c06b78cb5768f9c8e" prot="public" virt="non-virtual" ambiguityscope="Universe::"><scope>MembraneChannel</scope><name>UpdateCycle</name></member>
      <member refid="class_neuron_1a55c72e8066caf1ad8e25a2b0b453ee69" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>UpdateCycle2</name></member>
      <member refid="class_universe_1a63e878aaf03f1800b255e9a089a72a8b" prot="public" virt="non-virtual"><scope>MembraneChannel</scope><name>UseEnergy</name></member>
      <member refid="class_membrane_1a926d35c07f664b60deb6e9f87649fe89" prot="protected" virt="non-virtual"><scope>MembraneChannel</scope><name>visualisation_list</name></member>
      <member refid="class_cognitive_network_1a17142cc6f0bb3894e63f6c66fa401778" prot="public" virt="virtual"><scope>MembraneChannel</scope><name>~CognitiveNetwork</name></member>
      <member refid="class_membrane_1a8765daf8038c1e992e3ea3752db0042f" prot="public" virt="virtual"><scope>MembraneChannel</scope><name>~Membrane</name></member>
      <member refid="class_membrane_channel_1a925e7e98530ef9cc94616ea7a4dd0cbd" prot="public" virt="virtual"><scope>MembraneChannel</scope><name>~MembraneChannel</name></member>
      <member refid="class_neuron_1aecd41febe74ef417230cd74af0c8b801" prot="public" virt="virtual"><scope>MembraneChannel</scope><name>~Neuron</name></member>
      <member refid="class_universe_1ad4d90f6f2727992762c6b409d3d3d228" prot="public" virt="virtual"><scope>MembraneChannel</scope><name>~Universe</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
