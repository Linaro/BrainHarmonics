.TH "/Users/pbisaacs/Developer/BrainHarmonics/BrainHarmonics/main.cc" 3 "Sat Apr 29 2017" "Version 0.1" "BrainHarmonics" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/Users/pbisaacs/Developer/BrainHarmonics/BrainHarmonics/main.cc \- 
.SH SYNOPSIS
.br
.PP
\fC#include <sys/time\&.h>\fP
.br
\fC#include <sys/types\&.h>\fP
.br
\fC#include <sys/socket\&.h>\fP
.br
\fC#include <netinet/in\&.h>\fP
.br
\fC#include <arpa/inet\&.h>\fP
.br
\fC#include <stdio\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <fcntl\&.h>\fP
.br
\fC#include <unistd\&.h>\fP
.br
\fC#include <assert\&.h>\fP
.br
\fC#include <time\&.h>\fP
.br
\fC#include <array>\fP
.br
\fC#include <cstring>\fP
.br
\fC#include <cstdint>\fP
.br
\fC#include <fstream>\fP
.br
\fC#include <iomanip>\fP
.br
\fC#include <iostream>\fP
.br
\fC#include <map>\fP
.br
\fC#include <math\&.h>\fP
.br
\fC#include <numeric>\fP
.br
\fC#include <queue>\fP
.br
\fC#include <sstream>\fP
.br
\fC#include <string>\fP
.br
\fC#include <thread>\fP
.br
\fC#include <vector>\fP
.br
\fC#include <libcaercpp/devices/dynapse\&.hpp>\fP
.br
\fC#include <libcaercpp/libcaer\&.hpp>\fP
.br
\fC#include <libcaercpp/events/packetContainer\&.hpp>\fP
.br
\fC#include <csignal>\fP
.br
\fC#include <atomic>\fP
.br
\fC#include <SFML/Audio\&.hpp>\fP
.br
\fC#include <SFML/Graphics\&.hpp>\fP
.br
\fC#include <Python\&.h>\fP
.br
\fC#include <numpy/arrayobject\&.h>\fP
.br
\fC#include <GL/gl\&.h>\fP
.br
\fC#include <GL/glu\&.h>\fP
.br
\fC#include <GL/glut\&.h>\fP
.br
\fC#include <universe\&.h>\fP
.br
\fC#include <dimension\&.h>\fP
.br
\fC#include <elementaryparticle\&.h>\fP
.br
\fC#include <compositeparticle\&.h>\fP
.br
\fC#include <elementaryforce\&.h>\fP
.br
\fC#include <compositeforce\&.h>\fP
.br
\fC#include <law\&.h>\fP
.br
\fC#include <matter\&.h>\fP
.br
\fC#include <monomer\&.h>\fP
.br
\fC#include <polymer\&.h>\fP
.br
\fC#include <solid\&.h>\fP
.br
\fC#include <polyhedron\&.h>\fP
.br
\fC#include <polygon\&.h>\fP
.br
\fC#include <quad\&.h>\fP
.br
\fC#include <line\&.h>\fP
.br
\fC#include <point\&.h>\fP
.br
\fC#include <node\&.h>\fP
.br
\fC#include <apptimer\&.h>\fP
.br
\fC#include 'cognitivenetwork\&.h'\fP
.br
\fC#include 'orbital\&.h'\fP
.br
\fC#include 'neuron\&.h'\fP
.br
\fC#include 'dendritecleft\&.h'\fP
.br
\fC#include 'neuroreceptor\&.h'\fP
.br
\fC#include 'synapse\&.h'\fP
.br
\fC#include 'membrane\&.h'\fP
.br
\fC#include 'Kchannel\&.h'\fP
.br
\fC#include 'Nachannel\&.h'\fP
.br
\fC#include 'dendrite\&.h'\fP
.br
\fC#include 'dendritebranch\&.h'\fP
.br
\fC#include 'soma\&.h'\fP
.br
\fC#include 'axonhillock\&.h'\fP
.br
\fC#include 'axon\&.h'\fP
.br
\fC#include 'axonbranch\&.h'\fP
.br
\fC#include 'myelinsheath\&.h'\fP
.br
\fC#include 'schwanncell\&.h'\fP
.br
\fC#include 'axonbouton\&.h'\fP
.br
\fC#include 'synapticvesicle\&.h'\fP
.br
\fC#include 'Cagate\&.h'\fP
.br
\fC#include 'neurotransmitter\&.h'\fP
.br
\fC#include 'spike\&.h'\fP
.br
\fC#include 'multiscreen\&.h'\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBScreen_0\fP"
.br
.ti -1c
.RI "class \fBScreen_1\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBDEFAULTBIASES\fP   'data/defaultbiases_values\&.txt'"
.br
.ti -1c
.RI "#define \fBLOWPOWERBIASES\fP   'data/lowpowerbiases_values\&.txt'"
.br
.ti -1c
.RI "#define \fBDEBUG_PROGRAM\fP   true"
.br
.ti -1c
.RI "#define \fBINVALID_SOCKET\fP   \-1"
.br
.ti -1c
.RI "#define \fBSOCKET_ERROR\fP   \-1"
.br
.ti -1c
.RI "#define \fBSOCKET_PORT\fP   9876"
.br
.ti -1c
.RI "#define \fBSOCKET_ADDRESS\fP   '192\&.168\&.42\&.56'"
.br
.ti -1c
.RI "#define \fBDEG2RAD\fP   0\&.01745329252f"
.br
.ti -1c
.RI "#define \fBRAD2DEG\fP   57\&.29577951f"
.br
.ti -1c
.RI "#define \fBONERAD\fP   3\&.14159265f"
.br
.ti -1c
.RI "#define \fBGRAVITY\fP   6\&.67384e\-11;"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "bool \fBmsg_handling\fP (std::vector< std::string > *m_messages, bool m_response, int m_ok, int m_fail)"
.br
.ti -1c
.RI "int \fBCreateUniverse\fP (std::vector< Universe > *toAddto)"
.br
.ti -1c
.RI "int \fBAddElementaryParticle\fP (std::vector< ElementaryParticle > *toAddto, std::vector< Dimension > *aPartof, int arrayEntry)"
.br
.ti -1c
.RI "int \fBAddCompositeParticle\fP (std::vector< CompositeParticle > *toAddto, std::vector< ElementaryParticle > *aPartof, int arrayEntry)"
.br
.ti -1c
.RI "int \fBAddElementaryForce\fP (std::vector< ElementaryForce > *toAddto, std::vector< ElementaryParticle > *aPartof, int arrayEntry)"
.br
.ti -1c
.RI "int \fBAddCompositeForce\fP (std::vector< CompositeForce > *toAddto, std::vector< CompositeParticle > *aPartof, int arrayEntry)"
.br
.ti -1c
.RI "int \fBAddLaw\fP (std::vector< CompositeForce > *toAddto, int arrayEntry, std::vector< CompositeParticle > *toAddto2, int arrayEntry2)"
.br
.ti -1c
.RI "int \fBAddMatter\fP (std::vector< Matter > *toAddto, std::vector< Dimension > *aPartof, int arrayEntry)"
.br
.ti -1c
.RI "int \fBAddMonomer\fP (std::vector< Monomer > *toAddto, std::vector< Dimension > *aPartof, int arrayEntry)"
.br
.ti -1c
.RI "int \fBAddPolymer\fP (std::vector< Polymer > *toAddto, std::vector< Dimension > *aPartof, int arrayEntry)"
.br
.ti -1c
.RI "int \fBAddSolid\fP (std::vector< Solid > *toAddto, std::vector< Dimension > *aPartof, int arrayEntry)"
.br
.ti -1c
.RI "int \fBAddPoint\fP (std::vector< Point > *toAddto, std::vector< Dimension > *aPartof, int arrayEntry)"
.br
.ti -1c
.RI "int \fBAddPolyhedron\fP (std::vector< Polyhedron > *toAddto, std::vector< Solid > *aPartof, int arrayEntry)"
.br
.ti -1c
.RI "int \fBAddPolygon\fP (std::vector< Polygon > *toAddto, std::vector< Polyhedron > *aPartof, int arrayEntry)"
.br
.ti -1c
.RI "int \fBAddQuad\fP (std::vector< Quad > *toAddto, std::vector< Polygon > *aPartof, int arrayEntry)"
.br
.ti -1c
.RI "int \fBAddLine\fP (std::vector< Line > *toAddto, std::vector< Polygon > *aPartof, int arrayEntry)"
.br
.ti -1c
.RI "int \fBAddNeuron\fP (std::vector< \fBNeuron\fP > *toAddto, std::vector< Dimension > *aPartof, int arrayEntry)"
.br
.ti -1c
.RI "int \fBAddSpike\fP (std::vector< \fBSpike\fP > *toAddto)"
.br
.ti -1c
.RI "int \fBAddDendrite\fP (std::vector< \fBDendrite\fP > *toAddto)"
.br
.ti -1c
.RI "int \fBAddSynapse\fP (std::vector< \fBSynapse\fP > *toAddto, std::vector< Dimension > *aPartof, int arrayEntry)"
.br
.ti -1c
.RI "int \fBAddOrbital\fP (std::vector< \fBOrbital\fP > *toAddto, std::vector< Dimension > *aPartof, int arrayEntry, int orbType)"
.br
.ti -1c
.RI "int \fBAddApptimer\fP (std::vector< AppTimer > *toAddto)"
.br
.ti -1c
.RI "int \fBAddSFMLRectangle\fP (std::vector< sf::RectangleShape > *toAddto, std::vector< Dimension > *aPartof, int arrayEntry)"
.br
.ti -1c
.RI "int \fBAddSFMLText\fP (std::vector< sf::Text > *toAddto, std::vector< Dimension > *aPartof, int arrayEntry, sf::Font *font)"
.br
.ti -1c
.RI "bool \fBcompare_swapElementaryParticle\fP (std::vector< ElementaryParticle > *origin, int l_origin_Swap, int l_origin_Candidate1, int l_origin_Candidate2)"
.br
.ti -1c
.RI "int \fBdistanceBetweenNodes\fP (std::vector< Point > *nodesQuery, std::vector< int > *nodesList, int nodesDimensions, double desiredDistance)"
.br
.ti -1c
.RI "bool \fBcompare_swapCompositeParticle\fP (std::vector< CompositeParticle > *origin, int l_origin_Swap, int l_origin_Candidate1, int l_origin_Candidate2)"
.br
.ti -1c
.RI "bool \fBcompare_swapSynapse\fP (std::vector< \fBSynapse\fP > *origin, int l_origin_Swap, int l_origin_Candidate1, int l_origin_Candidate2)"
.br
.ti -1c
.RI "bool \fBanalyseStream\fP (std::vector< \fBNeuron\fP > *neuronList, std::vector< Point > *aPoint, int startPoint, int endPoint, int stepPoint, int neuralSequence, std::vector< Dimension > *dimensionList)"
.br
.ti -1c
.RI "void \fBClearDimensionSelection\fP (std::vector< int > *dimension_list)"
.br
.ti -1c
.RI "void \fBSelectDimension\fP (const int PossibleDimensions[10], std::vector< int > *dimension_list, int whichDimension)"
.br
.ti -1c
.RI "void \fBSelectMultiDimensions\fP (const int PossibleDimensions[10], std::vector< int > *dimension_list, int howManyDimensions)"
.br
.ti -1c
.RI "bool \fBClearDynapse\fP (caerDeviceHandle *usb_handle)"
.br
.ti -1c
.RI "void \fBexitCB\fP ()"
.br
.ti -1c
.RI "int \fBinit\fP (int argc, const char *argv[])"
.br
.ti -1c
.RI "int \fBmain\fP (int argc, const char *argv[])"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "struct caer_dynapse_info \fBdynapse_info\fP"
.br
.ti -1c
.RI "float \fBg_speed\fP"
.br
.ti -1c
.RI "float \fBg_deltaheading\fP"
.br
.ti -1c
.RI "float \fBg_toggle\fP = 0"
.br
.ti -1c
.RI "bool \fBg_buttonPressed\fP = false"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define DEBUG_PROGRAM   true"
< Graphics library http://sfml-dev.org < Python interpreter < Top of the tree, begin with Universe class < Add Dimensions for spatial identification < Follow with the creation of quarks/leptons < Basic interactions form protons/neutrons < Define Force interaction between fundamentals < Define Force interaction between Composites < Specify how Composites interact < Composites form elements of periodic table < Composites form molecules < Composites form molecules < Materials are a combination of Matter < Materials can be formed into multiDimensional shapes < Complex shapes are a combination of simpler forms < Reducing high Dimensions to lower < Further reduction < Fundamental spatial description < Node class for A* search < Interim function describing time before inclusion as Dimension < Example of harmonic motion of particles < \fBNeuron\fP container for other neuron components < Dendritic synaptic cleft, input to the neuron < \fBNeuroreceptor\fP, component of dendritic cleft < \fBSynapse\fP, area of stimulus transmission/reception < Potassium channel, component of the membrane < \fBDendrite\fP, pre-Soma component of a neuron < \fBDendrite\fP branch, division/join of dendrites < \fBSoma\fP, component of a neuron < \fBAxon\fP Hillock, component of \fBSoma\fP < \fBAxon\fP, connected to \fBAxon\fP Hillock < \fBAxon\fP branch, division/join of \fBAxon\fP < \fBAxon\fP synaptic cleft, output area of neuron < Synaptic vesicle, container of neurotransmitters < \fBNeurotransmitter\fP, transfer component between clefts 
.PP
Definition at line 138 of file main\&.cc\&.
.SS "#define DEFAULTBIASES   'data/defaultbiases_values\&.txt'"
< For array in CRC-32 call < For handling strings < For byte handling in CRC-32 < For reading files < Formatting output to console < For output to console < For open and closed maps in A* < For Sine, Cosine, Power, Fabs & Sqrt functions < For CRC-32 < For assigning priority queue in A* < For stringstream input from console < For handling strings < For thread handling < To use vectors, which automatically handle resizing, as arrays to keep track of instances 
.PP
Definition at line 58 of file main\&.cc\&.
.SS "#define DEG2RAD   0\&.01745329252f"
Avoids having to recalculate a constant PI/180 
.PP
Definition at line 159 of file main\&.cc\&.
.SS "#define GRAVITY   6\&.67384e\-11;"

.PP
Definition at line 171 of file main\&.cc\&.
.SS "#define INVALID_SOCKET   \-1"

.PP
Definition at line 142 of file main\&.cc\&.
.SS "#define LOWPOWERBIASES   'data/lowpowerbiases_values\&.txt'"

.PP
Definition at line 59 of file main\&.cc\&.
.SS "#define ONERAD   3\&.14159265f"
Avoids having to recalculate 
.PP
Definition at line 167 of file main\&.cc\&.
.SS "#define RAD2DEG   57\&.29577951f"
Avoids having to recalculate a constant 180/PI 
.PP
Definition at line 163 of file main\&.cc\&.
.SS "#define SOCKET_ADDRESS   '192\&.168\&.42\&.56'"

.PP
Definition at line 154 of file main\&.cc\&.
.SS "#define SOCKET_ERROR   \-1"

.PP
Definition at line 146 of file main\&.cc\&.
.SS "#define SOCKET_PORT   9876"

.PP
Definition at line 150 of file main\&.cc\&.
.SH "Function Documentation"
.PP 
.SS "int AddApptimer (std::vector< AppTimer > * toAddto)"

.PP
Definition at line 425 of file main\&.cc\&.
.SS "int AddCompositeForce (std::vector< CompositeForce > * toAddto, std::vector< CompositeParticle > * aPartof, int arrayEntry)"

.PP
Definition at line 268 of file main\&.cc\&.
.SS "int AddCompositeParticle (std::vector< CompositeParticle > * toAddto, std::vector< ElementaryParticle > * aPartof, int arrayEntry)"

.PP
Definition at line 249 of file main\&.cc\&.
.SS "int AddDendrite (std::vector< \fBDendrite\fP > * toAddto)"

.PP
Definition at line 397 of file main\&.cc\&.
.SS "int AddElementaryForce (std::vector< ElementaryForce > * toAddto, std::vector< ElementaryParticle > * aPartof, int arrayEntry)"

.PP
Definition at line 259 of file main\&.cc\&.
.SS "int AddElementaryParticle (std::vector< ElementaryParticle > * toAddto, std::vector< Dimension > * aPartof, int arrayEntry)"

.PP
Definition at line 239 of file main\&.cc\&.
.SS "int AddLaw (std::vector< CompositeForce > * toAddto, int arrayEntry, std::vector< CompositeParticle > * toAddto2, int arrayEntry2)"

.PP
Definition at line 278 of file main\&.cc\&.
.SS "int AddLine (std::vector< Line > * toAddto, std::vector< Polygon > * aPartof, int arrayEntry)"

.PP
Definition at line 368 of file main\&.cc\&.
.SS "int AddMatter (std::vector< Matter > * toAddto, std::vector< Dimension > * aPartof, int arrayEntry)"

.PP
Definition at line 287 of file main\&.cc\&.
.SS "int AddMonomer (std::vector< Monomer > * toAddto, std::vector< Dimension > * aPartof, int arrayEntry)"

.PP
Definition at line 297 of file main\&.cc\&.
.SS "int AddNeuron (std::vector< \fBNeuron\fP > * toAddto, std::vector< Dimension > * aPartof, int arrayEntry)"

.PP
Definition at line 378 of file main\&.cc\&.
.SS "int AddOrbital (std::vector< \fBOrbital\fP > * toAddto, std::vector< Dimension > * aPartof, int arrayEntry, int orbType)"

.PP
Definition at line 415 of file main\&.cc\&.
.SS "int AddPoint (std::vector< Point > * toAddto, std::vector< Dimension > * aPartof, int arrayEntry)"

.PP
Definition at line 327 of file main\&.cc\&.
.SS "int AddPolygon (std::vector< Polygon > * toAddto, std::vector< Polyhedron > * aPartof, int arrayEntry)"

.PP
Definition at line 348 of file main\&.cc\&.
.SS "int AddPolyhedron (std::vector< Polyhedron > * toAddto, std::vector< Solid > * aPartof, int arrayEntry)"

.PP
Definition at line 338 of file main\&.cc\&.
.SS "int AddPolymer (std::vector< Polymer > * toAddto, std::vector< Dimension > * aPartof, int arrayEntry)"

.PP
Definition at line 307 of file main\&.cc\&.
.SS "int AddQuad (std::vector< Quad > * toAddto, std::vector< Polygon > * aPartof, int arrayEntry)"

.PP
Definition at line 358 of file main\&.cc\&.
.SS "int AddSFMLRectangle (std::vector< sf::RectangleShape > * toAddto, std::vector< Dimension > * aPartof, int arrayEntry)"

.PP
Definition at line 434 of file main\&.cc\&.
.SS "int AddSFMLText (std::vector< sf::Text > * toAddto, std::vector< Dimension > * aPartof, int arrayEntry, sf::Font * font)"

.PP
Definition at line 448 of file main\&.cc\&.
.SS "int AddSolid (std::vector< Solid > * toAddto, std::vector< Dimension > * aPartof, int arrayEntry)"

.PP
Definition at line 317 of file main\&.cc\&.
.SS "int AddSpike (std::vector< \fBSpike\fP > * toAddto)"

.PP
Definition at line 388 of file main\&.cc\&.
.SS "int AddSynapse (std::vector< \fBSynapse\fP > * toAddto, std::vector< Dimension > * aPartof, int arrayEntry)"

.PP
Definition at line 406 of file main\&.cc\&.
.SS "bool analyseStream (std::vector< \fBNeuron\fP > * neuronList, std::vector< Point > * aPoint, int startPoint, int endPoint, int stepPoint, int neuralSequence, std::vector< Dimension > * dimensionList)"

.PP
Definition at line 645 of file main\&.cc\&.
.SS "void ClearDimensionSelection (std::vector< int > * dimension_list)"

.PP
Definition at line 713 of file main\&.cc\&.
.SS "bool ClearDynapse (caerDeviceHandle * usb_handle)"

.PP
Definition at line 751 of file main\&.cc\&.
.SS "bool compare_swapCompositeParticle (std::vector< CompositeParticle > * origin, int l_origin_Swap, int l_origin_Candidate1, int l_origin_Candidate2)"

.PP
Definition at line 599 of file main\&.cc\&.
.SS "bool compare_swapElementaryParticle (std::vector< ElementaryParticle > * origin, int l_origin_Swap, int l_origin_Candidate1, int l_origin_Candidate2)"

.PP
Definition at line 469 of file main\&.cc\&.
.SS "bool compare_swapSynapse (std::vector< \fBSynapse\fP > * origin, int l_origin_Swap, int l_origin_Candidate1, int l_origin_Candidate2)"

.PP
Definition at line 622 of file main\&.cc\&.
.SS "int CreateUniverse (std::vector< Universe > * toAddto)"
< Defined energy level of Universe
.PP
< Create instance of Universe from Universe class
.PP
< Set an energy level and attempt to maintain physics laws by keeping the total in the Universe the same\&. Uses the maximum value for double\&. Levels of abstraction used to cater for environment limitations 
.PP
Definition at line 210 of file main\&.cc\&.
.SS "int distanceBetweenNodes (std::vector< Point > * nodesQuery, std::vector< int > * nodesList, int nodesDimensions, double desiredDistance)"

.PP
Definition at line 491 of file main\&.cc\&.
.SS "void exitCB ()"

.PP
Definition at line 1003 of file main\&.cc\&.
.SS "int init (int argc, const char * argv[])"

.PP
Definition at line 1014 of file main\&.cc\&.
.SS "int main (int argc, const char * argv[])"
< Top of the tree, begin with Universe class
.PP
< Add Dimensions for spatial identification
.PP
< Follow with the creation of quarks/leptons
.PP
< Basic interactions form protons/neutrons
.PP
< Define Force interaction between fundamentals
.PP
< Define Force interaction between Composites
.PP
< Specify how Composites interact
.PP
< Composites form elements of periodic table
.PP
< Composites form molecules
.PP
< Composites form complex molecules
.PP
< Materials are a combination of Matter
.PP
< Materials can be formed into multiDimensional shapes
.PP
< Complex shapes are a combination of simpler forms
.PP
< Reducing high Dimensions to lower
.PP
< Further reduction
.PP
< Fundamental spatial description
.PP
< Interim function describing time before inclusion as Dimension
.PP
< Network container for all AI components
.PP
< Example of orbital timing containing neurons
.PP
< \fBNeuron\fP container for other neuron components
.PP
< Dendritic synaptic cleft, input to the neuron
.PP
< \fBNeuroreceptor\fP, component of dendritic cleft
.PP
< \fBSynapse\fP, area of stimulus transmission/reception
.PP
< \fBMembrane\fP, outer component of the neuron
.PP
< Potassium channel, component of the membrane
.PP
< Sodium channel, component of the membrane
.PP
< \fBDendrite\fP, pre-Soma component of a neuron
.PP
< \fBDendrite\fP branch, division/join of dendrites
.PP
< \fBSoma\fP, component of a neuron
.PP
< \fBAxon\fP Hillock, component of \fBSoma\fP
.PP
< \fBAxon\fP, connected to \fBAxon\fP Hillock
.PP
< \fBAxon\fP branch, division/join of \fBAxon\fP
.PP
< Myelin sheath, wraps around \fBAxon\fP
.PP
< Schwann Cell, component of a Myelin sheath
.PP
< \fBAxon\fP synaptic cleft, output area of neuron
.PP
< Synaptic vesicle, container of neurotransmitters
.PP
< Calcium gate, component of \fBAxon\fP cleft
.PP
< \fBNeurotransmitter\fP, transfer component between clefts
.PP
< \fBSpike\fP
.PP
< Define graphics window size, X axis
.PP
< Define graphics window size, Y axis 
.PP
Definition at line 1023 of file main\&.cc\&.
.SS "bool msg_handling (std::vector< std::string > * m_messages, bool m_response, int m_ok, int m_fail)"

.PP
Definition at line 192 of file main\&.cc\&.
.SS "void SelectDimension (const int PossibleDimensions[10], std::vector< int > * dimension_list, int whichDimension)"

.PP
Definition at line 718 of file main\&.cc\&.
.SS "void SelectMultiDimensions (const int PossibleDimensions[10], std::vector< int > * dimension_list, int howManyDimensions)"

.PP
Definition at line 734 of file main\&.cc\&.
.SH "Variable Documentation"
.PP 
.SS "struct caer_dynapse_info dynapse_info"

.PP
Definition at line 174 of file main\&.cc\&.
.SS "bool g_buttonPressed = false"

.PP
Definition at line 190 of file main\&.cc\&.
.SS "float g_deltaheading"
Change current angle of robot by this amount 
.PP
Definition at line 188 of file main\&.cc\&.
.SS "float g_speed"
Speed of robot 
.PP
Definition at line 187 of file main\&.cc\&.
.SS "float g_toggle = 0"
Discover or localise 
.PP
Definition at line 189 of file main\&.cc\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for BrainHarmonics from the source code\&.
